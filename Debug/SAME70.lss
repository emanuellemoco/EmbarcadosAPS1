
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000221c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040221c  0040221c  0001221c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000090c  20400000  00402224  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000b0  2040090c  00402b30  0002090c  2**2
                  ALLOC
  4 .stack        00002004  204009bc  00402be0  0002090c  2**0
                  ALLOC
  5 .heap         00000200  204029c0  00404be4  0002090c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002090c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002093a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000aa8c  00000000  00000000  00020993  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001550  00000000  00000000  0002b41f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003532  00000000  00000000  0002c96f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000610  00000000  00000000  0002fea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000580  00000000  00000000  000304b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c34a  00000000  00000000  00030a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006aeb  00000000  00000000  0004cd7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00089655  00000000  00000000  00053866  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001d10  00000000  00000000  000dcebc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 29 40 20 b9 0b 40 00 69 0c 40 00 69 0c 40 00     .)@ ..@.i.@.i.@.
  400010:	69 0c 40 00 69 0c 40 00 69 0c 40 00 00 00 00 00     i.@.i.@.i.@.....
	...
  40002c:	69 0c 40 00 69 0c 40 00 00 00 00 00 69 0c 40 00     i.@.i.@.....i.@.
  40003c:	69 0c 40 00 69 0c 40 00 69 0c 40 00 69 0c 40 00     i.@.i.@.i.@.i.@.
  40004c:	69 0c 40 00 69 0c 40 00 69 0c 40 00 69 0c 40 00     i.@.i.@.i.@.i.@.
  40005c:	69 0c 40 00 69 0c 40 00 00 00 00 00 71 07 40 00     i.@.i.@.....q.@.
  40006c:	89 07 40 00 a1 07 40 00 69 0c 40 00 69 0c 40 00     ..@...@.i.@.i.@.
  40007c:	69 0c 40 00 b9 07 40 00 d1 07 40 00 69 0c 40 00     i.@...@...@.i.@.
  40008c:	69 0c 40 00 69 0c 40 00 69 0c 40 00 69 0c 40 00     i.@.i.@.i.@.i.@.
  40009c:	69 0c 40 00 69 0c 40 00 69 0c 40 00 69 0c 40 00     i.@.i.@.i.@.i.@.
  4000ac:	69 0c 40 00 69 0c 40 00 69 0c 40 00 69 0c 40 00     i.@.i.@.i.@.i.@.
  4000bc:	69 0c 40 00 69 0c 40 00 69 0c 40 00 69 0c 40 00     i.@.i.@.i.@.i.@.
  4000cc:	69 0c 40 00 00 00 00 00 69 0c 40 00 00 00 00 00     i.@.....i.@.....
  4000dc:	69 0c 40 00 69 0c 40 00 69 0c 40 00 69 0c 40 00     i.@.i.@.i.@.i.@.
  4000ec:	69 0c 40 00 69 0c 40 00 69 0c 40 00 69 0c 40 00     i.@.i.@.i.@.i.@.
  4000fc:	69 0c 40 00 69 0c 40 00 69 0c 40 00 69 0c 40 00     i.@.i.@.i.@.i.@.
  40010c:	69 0c 40 00 69 0c 40 00 00 00 00 00 00 00 00 00     i.@.i.@.........
  40011c:	00 00 00 00 69 0c 40 00 69 0c 40 00 69 0c 40 00     ....i.@.i.@.i.@.
  40012c:	69 0c 40 00 69 0c 40 00 00 00 00 00 69 0c 40 00     i.@.i.@.....i.@.
  40013c:	69 0c 40 00                                         i.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040090c 	.word	0x2040090c
  40015c:	00000000 	.word	0x00000000
  400160:	00402224 	.word	0x00402224

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402224 	.word	0x00402224
  4001a0:	20400910 	.word	0x20400910
  4001a4:	00402224 	.word	0x00402224
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	004008e9 	.word	0x004008e9
  40022c:	00400955 	.word	0x00400955
  400230:	004009c5 	.word	0x004009c5

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	00400921 	.word	0x00400921
  4002a0:	00400a3d 	.word	0x00400a3d

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	00400a59 	.word	0x00400a59
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	00400a75 	.word	0x00400a75
  400418:	00400a91 	.word	0x00400a91

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a2:	4618      	mov	r0, r3
  4004a4:	bd80      	pop	{r7, pc}
  4004a6:	bf00      	nop
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	00400dd9 	.word	0x00400dd9
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	004007e9 	.word	0x004007e9
  40051c:	00400865 	.word	0x00400865
  400520:	00400c71 	.word	0x00400c71
  400524:	00400499 	.word	0x00400499

00400528 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400528:	b480      	push	{r7}
  40052a:	b085      	sub	sp, #20
  40052c:	af00      	add	r7, sp, #0
  40052e:	60f8      	str	r0, [r7, #12]
  400530:	60b9      	str	r1, [r7, #8]
  400532:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400534:	687b      	ldr	r3, [r7, #4]
  400536:	2b00      	cmp	r3, #0
  400538:	d003      	beq.n	400542 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40053a:	68fb      	ldr	r3, [r7, #12]
  40053c:	68ba      	ldr	r2, [r7, #8]
  40053e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400540:	e002      	b.n	400548 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400542:	68fb      	ldr	r3, [r7, #12]
  400544:	68ba      	ldr	r2, [r7, #8]
  400546:	661a      	str	r2, [r3, #96]	; 0x60
}
  400548:	bf00      	nop
  40054a:	3714      	adds	r7, #20
  40054c:	46bd      	mov	sp, r7
  40054e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400552:	4770      	bx	lr

00400554 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400554:	b480      	push	{r7}
  400556:	b083      	sub	sp, #12
  400558:	af00      	add	r7, sp, #0
  40055a:	6078      	str	r0, [r7, #4]
  40055c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	683a      	ldr	r2, [r7, #0]
  400562:	631a      	str	r2, [r3, #48]	; 0x30
}
  400564:	bf00      	nop
  400566:	370c      	adds	r7, #12
  400568:	46bd      	mov	sp, r7
  40056a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40056e:	4770      	bx	lr

00400570 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400570:	b480      	push	{r7}
  400572:	b083      	sub	sp, #12
  400574:	af00      	add	r7, sp, #0
  400576:	6078      	str	r0, [r7, #4]
  400578:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  40057a:	687b      	ldr	r3, [r7, #4]
  40057c:	683a      	ldr	r2, [r7, #0]
  40057e:	635a      	str	r2, [r3, #52]	; 0x34
}
  400580:	bf00      	nop
  400582:	370c      	adds	r7, #12
  400584:	46bd      	mov	sp, r7
  400586:	f85d 7b04 	ldr.w	r7, [sp], #4
  40058a:	4770      	bx	lr

0040058c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40058c:	b580      	push	{r7, lr}
  40058e:	b084      	sub	sp, #16
  400590:	af00      	add	r7, sp, #0
  400592:	60f8      	str	r0, [r7, #12]
  400594:	60b9      	str	r1, [r7, #8]
  400596:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400598:	68b9      	ldr	r1, [r7, #8]
  40059a:	68f8      	ldr	r0, [r7, #12]
  40059c:	4b19      	ldr	r3, [pc, #100]	; (400604 <pio_set_input+0x78>)
  40059e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	f003 0301 	and.w	r3, r3, #1
  4005a6:	461a      	mov	r2, r3
  4005a8:	68b9      	ldr	r1, [r7, #8]
  4005aa:	68f8      	ldr	r0, [r7, #12]
  4005ac:	4b16      	ldr	r3, [pc, #88]	; (400608 <pio_set_input+0x7c>)
  4005ae:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4005b0:	687b      	ldr	r3, [r7, #4]
  4005b2:	f003 030a 	and.w	r3, r3, #10
  4005b6:	2b00      	cmp	r3, #0
  4005b8:	d003      	beq.n	4005c2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4005ba:	68fb      	ldr	r3, [r7, #12]
  4005bc:	68ba      	ldr	r2, [r7, #8]
  4005be:	621a      	str	r2, [r3, #32]
  4005c0:	e002      	b.n	4005c8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4005c2:	68fb      	ldr	r3, [r7, #12]
  4005c4:	68ba      	ldr	r2, [r7, #8]
  4005c6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4005c8:	687b      	ldr	r3, [r7, #4]
  4005ca:	f003 0302 	and.w	r3, r3, #2
  4005ce:	2b00      	cmp	r3, #0
  4005d0:	d004      	beq.n	4005dc <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4005d2:	68fb      	ldr	r3, [r7, #12]
  4005d4:	68ba      	ldr	r2, [r7, #8]
  4005d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4005da:	e008      	b.n	4005ee <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4005dc:	687b      	ldr	r3, [r7, #4]
  4005de:	f003 0308 	and.w	r3, r3, #8
  4005e2:	2b00      	cmp	r3, #0
  4005e4:	d003      	beq.n	4005ee <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4005e6:	68fb      	ldr	r3, [r7, #12]
  4005e8:	68ba      	ldr	r2, [r7, #8]
  4005ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4005ee:	68fb      	ldr	r3, [r7, #12]
  4005f0:	68ba      	ldr	r2, [r7, #8]
  4005f2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4005f4:	68fb      	ldr	r3, [r7, #12]
  4005f6:	68ba      	ldr	r2, [r7, #8]
  4005f8:	601a      	str	r2, [r3, #0]
}
  4005fa:	bf00      	nop
  4005fc:	3710      	adds	r7, #16
  4005fe:	46bd      	mov	sp, r7
  400600:	bd80      	pop	{r7, pc}
  400602:	bf00      	nop
  400604:	00400671 	.word	0x00400671
  400608:	00400529 	.word	0x00400529

0040060c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40060c:	b580      	push	{r7, lr}
  40060e:	b084      	sub	sp, #16
  400610:	af00      	add	r7, sp, #0
  400612:	60f8      	str	r0, [r7, #12]
  400614:	60b9      	str	r1, [r7, #8]
  400616:	607a      	str	r2, [r7, #4]
  400618:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40061a:	68b9      	ldr	r1, [r7, #8]
  40061c:	68f8      	ldr	r0, [r7, #12]
  40061e:	4b12      	ldr	r3, [pc, #72]	; (400668 <pio_set_output+0x5c>)
  400620:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400622:	69ba      	ldr	r2, [r7, #24]
  400624:	68b9      	ldr	r1, [r7, #8]
  400626:	68f8      	ldr	r0, [r7, #12]
  400628:	4b10      	ldr	r3, [pc, #64]	; (40066c <pio_set_output+0x60>)
  40062a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40062c:	683b      	ldr	r3, [r7, #0]
  40062e:	2b00      	cmp	r3, #0
  400630:	d003      	beq.n	40063a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400632:	68fb      	ldr	r3, [r7, #12]
  400634:	68ba      	ldr	r2, [r7, #8]
  400636:	651a      	str	r2, [r3, #80]	; 0x50
  400638:	e002      	b.n	400640 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40063a:	68fb      	ldr	r3, [r7, #12]
  40063c:	68ba      	ldr	r2, [r7, #8]
  40063e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400640:	687b      	ldr	r3, [r7, #4]
  400642:	2b00      	cmp	r3, #0
  400644:	d003      	beq.n	40064e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400646:	68fb      	ldr	r3, [r7, #12]
  400648:	68ba      	ldr	r2, [r7, #8]
  40064a:	631a      	str	r2, [r3, #48]	; 0x30
  40064c:	e002      	b.n	400654 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40064e:	68fb      	ldr	r3, [r7, #12]
  400650:	68ba      	ldr	r2, [r7, #8]
  400652:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400654:	68fb      	ldr	r3, [r7, #12]
  400656:	68ba      	ldr	r2, [r7, #8]
  400658:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40065a:	68fb      	ldr	r3, [r7, #12]
  40065c:	68ba      	ldr	r2, [r7, #8]
  40065e:	601a      	str	r2, [r3, #0]
}
  400660:	bf00      	nop
  400662:	3710      	adds	r7, #16
  400664:	46bd      	mov	sp, r7
  400666:	bd80      	pop	{r7, pc}
  400668:	00400671 	.word	0x00400671
  40066c:	00400529 	.word	0x00400529

00400670 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400670:	b480      	push	{r7}
  400672:	b083      	sub	sp, #12
  400674:	af00      	add	r7, sp, #0
  400676:	6078      	str	r0, [r7, #4]
  400678:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40067a:	687b      	ldr	r3, [r7, #4]
  40067c:	683a      	ldr	r2, [r7, #0]
  40067e:	645a      	str	r2, [r3, #68]	; 0x44
}
  400680:	bf00      	nop
  400682:	370c      	adds	r7, #12
  400684:	46bd      	mov	sp, r7
  400686:	f85d 7b04 	ldr.w	r7, [sp], #4
  40068a:	4770      	bx	lr

0040068c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40068c:	b480      	push	{r7}
  40068e:	b083      	sub	sp, #12
  400690:	af00      	add	r7, sp, #0
  400692:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400694:	687b      	ldr	r3, [r7, #4]
  400696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400698:	4618      	mov	r0, r3
  40069a:	370c      	adds	r7, #12
  40069c:	46bd      	mov	sp, r7
  40069e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006a2:	4770      	bx	lr

004006a4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4006a4:	b480      	push	{r7}
  4006a6:	b083      	sub	sp, #12
  4006a8:	af00      	add	r7, sp, #0
  4006aa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4006ac:	687b      	ldr	r3, [r7, #4]
  4006ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4006b0:	4618      	mov	r0, r3
  4006b2:	370c      	adds	r7, #12
  4006b4:	46bd      	mov	sp, r7
  4006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ba:	4770      	bx	lr

004006bc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4006bc:	b580      	push	{r7, lr}
  4006be:	b084      	sub	sp, #16
  4006c0:	af00      	add	r7, sp, #0
  4006c2:	6078      	str	r0, [r7, #4]
  4006c4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4006c6:	6878      	ldr	r0, [r7, #4]
  4006c8:	4b26      	ldr	r3, [pc, #152]	; (400764 <pio_handler_process+0xa8>)
  4006ca:	4798      	blx	r3
  4006cc:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4006ce:	6878      	ldr	r0, [r7, #4]
  4006d0:	4b25      	ldr	r3, [pc, #148]	; (400768 <pio_handler_process+0xac>)
  4006d2:	4798      	blx	r3
  4006d4:	4602      	mov	r2, r0
  4006d6:	68fb      	ldr	r3, [r7, #12]
  4006d8:	4013      	ands	r3, r2
  4006da:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4006dc:	68fb      	ldr	r3, [r7, #12]
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d03c      	beq.n	40075c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4006e2:	2300      	movs	r3, #0
  4006e4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4006e6:	e034      	b.n	400752 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4006e8:	4a20      	ldr	r2, [pc, #128]	; (40076c <pio_handler_process+0xb0>)
  4006ea:	68bb      	ldr	r3, [r7, #8]
  4006ec:	011b      	lsls	r3, r3, #4
  4006ee:	4413      	add	r3, r2
  4006f0:	681a      	ldr	r2, [r3, #0]
  4006f2:	683b      	ldr	r3, [r7, #0]
  4006f4:	429a      	cmp	r2, r3
  4006f6:	d126      	bne.n	400746 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4006f8:	4a1c      	ldr	r2, [pc, #112]	; (40076c <pio_handler_process+0xb0>)
  4006fa:	68bb      	ldr	r3, [r7, #8]
  4006fc:	011b      	lsls	r3, r3, #4
  4006fe:	4413      	add	r3, r2
  400700:	3304      	adds	r3, #4
  400702:	681a      	ldr	r2, [r3, #0]
  400704:	68fb      	ldr	r3, [r7, #12]
  400706:	4013      	ands	r3, r2
  400708:	2b00      	cmp	r3, #0
  40070a:	d01c      	beq.n	400746 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40070c:	4a17      	ldr	r2, [pc, #92]	; (40076c <pio_handler_process+0xb0>)
  40070e:	68bb      	ldr	r3, [r7, #8]
  400710:	011b      	lsls	r3, r3, #4
  400712:	4413      	add	r3, r2
  400714:	330c      	adds	r3, #12
  400716:	681b      	ldr	r3, [r3, #0]
  400718:	4914      	ldr	r1, [pc, #80]	; (40076c <pio_handler_process+0xb0>)
  40071a:	68ba      	ldr	r2, [r7, #8]
  40071c:	0112      	lsls	r2, r2, #4
  40071e:	440a      	add	r2, r1
  400720:	6810      	ldr	r0, [r2, #0]
  400722:	4912      	ldr	r1, [pc, #72]	; (40076c <pio_handler_process+0xb0>)
  400724:	68ba      	ldr	r2, [r7, #8]
  400726:	0112      	lsls	r2, r2, #4
  400728:	440a      	add	r2, r1
  40072a:	3204      	adds	r2, #4
  40072c:	6812      	ldr	r2, [r2, #0]
  40072e:	4611      	mov	r1, r2
  400730:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400732:	4a0e      	ldr	r2, [pc, #56]	; (40076c <pio_handler_process+0xb0>)
  400734:	68bb      	ldr	r3, [r7, #8]
  400736:	011b      	lsls	r3, r3, #4
  400738:	4413      	add	r3, r2
  40073a:	3304      	adds	r3, #4
  40073c:	681b      	ldr	r3, [r3, #0]
  40073e:	43db      	mvns	r3, r3
  400740:	68fa      	ldr	r2, [r7, #12]
  400742:	4013      	ands	r3, r2
  400744:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400746:	68bb      	ldr	r3, [r7, #8]
  400748:	3301      	adds	r3, #1
  40074a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40074c:	68bb      	ldr	r3, [r7, #8]
  40074e:	2b06      	cmp	r3, #6
  400750:	d803      	bhi.n	40075a <pio_handler_process+0x9e>
		while (status != 0) {
  400752:	68fb      	ldr	r3, [r7, #12]
  400754:	2b00      	cmp	r3, #0
  400756:	d1c7      	bne.n	4006e8 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400758:	e000      	b.n	40075c <pio_handler_process+0xa0>
				break;
  40075a:	bf00      	nop
}
  40075c:	bf00      	nop
  40075e:	3710      	adds	r7, #16
  400760:	46bd      	mov	sp, r7
  400762:	bd80      	pop	{r7, pc}
  400764:	0040068d 	.word	0x0040068d
  400768:	004006a5 	.word	0x004006a5
  40076c:	20400928 	.word	0x20400928

00400770 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400770:	b580      	push	{r7, lr}
  400772:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400774:	210a      	movs	r1, #10
  400776:	4802      	ldr	r0, [pc, #8]	; (400780 <PIOA_Handler+0x10>)
  400778:	4b02      	ldr	r3, [pc, #8]	; (400784 <PIOA_Handler+0x14>)
  40077a:	4798      	blx	r3
}
  40077c:	bf00      	nop
  40077e:	bd80      	pop	{r7, pc}
  400780:	400e0e00 	.word	0x400e0e00
  400784:	004006bd 	.word	0x004006bd

00400788 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400788:	b580      	push	{r7, lr}
  40078a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40078c:	210b      	movs	r1, #11
  40078e:	4802      	ldr	r0, [pc, #8]	; (400798 <PIOB_Handler+0x10>)
  400790:	4b02      	ldr	r3, [pc, #8]	; (40079c <PIOB_Handler+0x14>)
  400792:	4798      	blx	r3
}
  400794:	bf00      	nop
  400796:	bd80      	pop	{r7, pc}
  400798:	400e1000 	.word	0x400e1000
  40079c:	004006bd 	.word	0x004006bd

004007a0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4007a0:	b580      	push	{r7, lr}
  4007a2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4007a4:	210c      	movs	r1, #12
  4007a6:	4802      	ldr	r0, [pc, #8]	; (4007b0 <PIOC_Handler+0x10>)
  4007a8:	4b02      	ldr	r3, [pc, #8]	; (4007b4 <PIOC_Handler+0x14>)
  4007aa:	4798      	blx	r3
}
  4007ac:	bf00      	nop
  4007ae:	bd80      	pop	{r7, pc}
  4007b0:	400e1200 	.word	0x400e1200
  4007b4:	004006bd 	.word	0x004006bd

004007b8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4007b8:	b580      	push	{r7, lr}
  4007ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4007bc:	2110      	movs	r1, #16
  4007be:	4802      	ldr	r0, [pc, #8]	; (4007c8 <PIOD_Handler+0x10>)
  4007c0:	4b02      	ldr	r3, [pc, #8]	; (4007cc <PIOD_Handler+0x14>)
  4007c2:	4798      	blx	r3
}
  4007c4:	bf00      	nop
  4007c6:	bd80      	pop	{r7, pc}
  4007c8:	400e1400 	.word	0x400e1400
  4007cc:	004006bd 	.word	0x004006bd

004007d0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4007d0:	b580      	push	{r7, lr}
  4007d2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4007d4:	2111      	movs	r1, #17
  4007d6:	4802      	ldr	r0, [pc, #8]	; (4007e0 <PIOE_Handler+0x10>)
  4007d8:	4b02      	ldr	r3, [pc, #8]	; (4007e4 <PIOE_Handler+0x14>)
  4007da:	4798      	blx	r3
}
  4007dc:	bf00      	nop
  4007de:	bd80      	pop	{r7, pc}
  4007e0:	400e1600 	.word	0x400e1600
  4007e4:	004006bd 	.word	0x004006bd

004007e8 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4007e8:	b480      	push	{r7}
  4007ea:	b083      	sub	sp, #12
  4007ec:	af00      	add	r7, sp, #0
  4007ee:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4007f0:	687b      	ldr	r3, [r7, #4]
  4007f2:	3b01      	subs	r3, #1
  4007f4:	2b03      	cmp	r3, #3
  4007f6:	d81a      	bhi.n	40082e <pmc_mck_set_division+0x46>
  4007f8:	a201      	add	r2, pc, #4	; (adr r2, 400800 <pmc_mck_set_division+0x18>)
  4007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4007fe:	bf00      	nop
  400800:	00400811 	.word	0x00400811
  400804:	00400817 	.word	0x00400817
  400808:	0040081f 	.word	0x0040081f
  40080c:	00400827 	.word	0x00400827
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400810:	2300      	movs	r3, #0
  400812:	607b      	str	r3, [r7, #4]
			break;
  400814:	e00e      	b.n	400834 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400816:	f44f 7380 	mov.w	r3, #256	; 0x100
  40081a:	607b      	str	r3, [r7, #4]
			break;
  40081c:	e00a      	b.n	400834 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40081e:	f44f 7340 	mov.w	r3, #768	; 0x300
  400822:	607b      	str	r3, [r7, #4]
			break;
  400824:	e006      	b.n	400834 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400826:	f44f 7300 	mov.w	r3, #512	; 0x200
  40082a:	607b      	str	r3, [r7, #4]
			break;
  40082c:	e002      	b.n	400834 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40082e:	2300      	movs	r3, #0
  400830:	607b      	str	r3, [r7, #4]
			break;
  400832:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400834:	490a      	ldr	r1, [pc, #40]	; (400860 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400836:	4b0a      	ldr	r3, [pc, #40]	; (400860 <pmc_mck_set_division+0x78>)
  400838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40083a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40083e:	687b      	ldr	r3, [r7, #4]
  400840:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  400842:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400844:	bf00      	nop
  400846:	4b06      	ldr	r3, [pc, #24]	; (400860 <pmc_mck_set_division+0x78>)
  400848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40084a:	f003 0308 	and.w	r3, r3, #8
  40084e:	2b00      	cmp	r3, #0
  400850:	d0f9      	beq.n	400846 <pmc_mck_set_division+0x5e>
}
  400852:	bf00      	nop
  400854:	370c      	adds	r7, #12
  400856:	46bd      	mov	sp, r7
  400858:	f85d 7b04 	ldr.w	r7, [sp], #4
  40085c:	4770      	bx	lr
  40085e:	bf00      	nop
  400860:	400e0600 	.word	0x400e0600

00400864 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400864:	b480      	push	{r7}
  400866:	b085      	sub	sp, #20
  400868:	af00      	add	r7, sp, #0
  40086a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40086c:	491d      	ldr	r1, [pc, #116]	; (4008e4 <pmc_switch_mck_to_pllack+0x80>)
  40086e:	4b1d      	ldr	r3, [pc, #116]	; (4008e4 <pmc_switch_mck_to_pllack+0x80>)
  400870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400872:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400876:	687b      	ldr	r3, [r7, #4]
  400878:	4313      	orrs	r3, r2
  40087a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40087c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400880:	60fb      	str	r3, [r7, #12]
  400882:	e007      	b.n	400894 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400884:	68fb      	ldr	r3, [r7, #12]
  400886:	2b00      	cmp	r3, #0
  400888:	d101      	bne.n	40088e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40088a:	2301      	movs	r3, #1
  40088c:	e023      	b.n	4008d6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	3b01      	subs	r3, #1
  400892:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400894:	4b13      	ldr	r3, [pc, #76]	; (4008e4 <pmc_switch_mck_to_pllack+0x80>)
  400896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400898:	f003 0308 	and.w	r3, r3, #8
  40089c:	2b00      	cmp	r3, #0
  40089e:	d0f1      	beq.n	400884 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4008a0:	4a10      	ldr	r2, [pc, #64]	; (4008e4 <pmc_switch_mck_to_pllack+0x80>)
  4008a2:	4b10      	ldr	r3, [pc, #64]	; (4008e4 <pmc_switch_mck_to_pllack+0x80>)
  4008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008a6:	f023 0303 	bic.w	r3, r3, #3
  4008aa:	f043 0302 	orr.w	r3, r3, #2
  4008ae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4008b4:	60fb      	str	r3, [r7, #12]
  4008b6:	e007      	b.n	4008c8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008b8:	68fb      	ldr	r3, [r7, #12]
  4008ba:	2b00      	cmp	r3, #0
  4008bc:	d101      	bne.n	4008c2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4008be:	2301      	movs	r3, #1
  4008c0:	e009      	b.n	4008d6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4008c2:	68fb      	ldr	r3, [r7, #12]
  4008c4:	3b01      	subs	r3, #1
  4008c6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008c8:	4b06      	ldr	r3, [pc, #24]	; (4008e4 <pmc_switch_mck_to_pllack+0x80>)
  4008ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008cc:	f003 0308 	and.w	r3, r3, #8
  4008d0:	2b00      	cmp	r3, #0
  4008d2:	d0f1      	beq.n	4008b8 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4008d4:	2300      	movs	r3, #0
}
  4008d6:	4618      	mov	r0, r3
  4008d8:	3714      	adds	r7, #20
  4008da:	46bd      	mov	sp, r7
  4008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008e0:	4770      	bx	lr
  4008e2:	bf00      	nop
  4008e4:	400e0600 	.word	0x400e0600

004008e8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4008e8:	b480      	push	{r7}
  4008ea:	b083      	sub	sp, #12
  4008ec:	af00      	add	r7, sp, #0
  4008ee:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4008f0:	687b      	ldr	r3, [r7, #4]
  4008f2:	2b01      	cmp	r3, #1
  4008f4:	d105      	bne.n	400902 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4008f6:	4907      	ldr	r1, [pc, #28]	; (400914 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4008f8:	4b06      	ldr	r3, [pc, #24]	; (400914 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4008fa:	689a      	ldr	r2, [r3, #8]
  4008fc:	4b06      	ldr	r3, [pc, #24]	; (400918 <pmc_switch_sclk_to_32kxtal+0x30>)
  4008fe:	4313      	orrs	r3, r2
  400900:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400902:	4b04      	ldr	r3, [pc, #16]	; (400914 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400904:	4a05      	ldr	r2, [pc, #20]	; (40091c <pmc_switch_sclk_to_32kxtal+0x34>)
  400906:	601a      	str	r2, [r3, #0]
}
  400908:	bf00      	nop
  40090a:	370c      	adds	r7, #12
  40090c:	46bd      	mov	sp, r7
  40090e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400912:	4770      	bx	lr
  400914:	400e1810 	.word	0x400e1810
  400918:	a5100000 	.word	0xa5100000
  40091c:	a5000008 	.word	0xa5000008

00400920 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400920:	b480      	push	{r7}
  400922:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400924:	4b09      	ldr	r3, [pc, #36]	; (40094c <pmc_osc_is_ready_32kxtal+0x2c>)
  400926:	695b      	ldr	r3, [r3, #20]
  400928:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40092c:	2b00      	cmp	r3, #0
  40092e:	d007      	beq.n	400940 <pmc_osc_is_ready_32kxtal+0x20>
  400930:	4b07      	ldr	r3, [pc, #28]	; (400950 <pmc_osc_is_ready_32kxtal+0x30>)
  400932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400934:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400938:	2b00      	cmp	r3, #0
  40093a:	d001      	beq.n	400940 <pmc_osc_is_ready_32kxtal+0x20>
  40093c:	2301      	movs	r3, #1
  40093e:	e000      	b.n	400942 <pmc_osc_is_ready_32kxtal+0x22>
  400940:	2300      	movs	r3, #0
}
  400942:	4618      	mov	r0, r3
  400944:	46bd      	mov	sp, r7
  400946:	f85d 7b04 	ldr.w	r7, [sp], #4
  40094a:	4770      	bx	lr
  40094c:	400e1810 	.word	0x400e1810
  400950:	400e0600 	.word	0x400e0600

00400954 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400954:	b480      	push	{r7}
  400956:	b083      	sub	sp, #12
  400958:	af00      	add	r7, sp, #0
  40095a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40095c:	4915      	ldr	r1, [pc, #84]	; (4009b4 <pmc_switch_mainck_to_fastrc+0x60>)
  40095e:	4b15      	ldr	r3, [pc, #84]	; (4009b4 <pmc_switch_mainck_to_fastrc+0x60>)
  400960:	6a1a      	ldr	r2, [r3, #32]
  400962:	4b15      	ldr	r3, [pc, #84]	; (4009b8 <pmc_switch_mainck_to_fastrc+0x64>)
  400964:	4313      	orrs	r3, r2
  400966:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400968:	bf00      	nop
  40096a:	4b12      	ldr	r3, [pc, #72]	; (4009b4 <pmc_switch_mainck_to_fastrc+0x60>)
  40096c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400972:	2b00      	cmp	r3, #0
  400974:	d0f9      	beq.n	40096a <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400976:	490f      	ldr	r1, [pc, #60]	; (4009b4 <pmc_switch_mainck_to_fastrc+0x60>)
  400978:	4b0e      	ldr	r3, [pc, #56]	; (4009b4 <pmc_switch_mainck_to_fastrc+0x60>)
  40097a:	6a1a      	ldr	r2, [r3, #32]
  40097c:	4b0f      	ldr	r3, [pc, #60]	; (4009bc <pmc_switch_mainck_to_fastrc+0x68>)
  40097e:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400980:	687a      	ldr	r2, [r7, #4]
  400982:	4313      	orrs	r3, r2
  400984:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400988:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40098a:	bf00      	nop
  40098c:	4b09      	ldr	r3, [pc, #36]	; (4009b4 <pmc_switch_mainck_to_fastrc+0x60>)
  40098e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400994:	2b00      	cmp	r3, #0
  400996:	d0f9      	beq.n	40098c <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400998:	4906      	ldr	r1, [pc, #24]	; (4009b4 <pmc_switch_mainck_to_fastrc+0x60>)
  40099a:	4b06      	ldr	r3, [pc, #24]	; (4009b4 <pmc_switch_mainck_to_fastrc+0x60>)
  40099c:	6a1a      	ldr	r2, [r3, #32]
  40099e:	4b08      	ldr	r3, [pc, #32]	; (4009c0 <pmc_switch_mainck_to_fastrc+0x6c>)
  4009a0:	4013      	ands	r3, r2
  4009a2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009a6:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4009a8:	bf00      	nop
  4009aa:	370c      	adds	r7, #12
  4009ac:	46bd      	mov	sp, r7
  4009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009b2:	4770      	bx	lr
  4009b4:	400e0600 	.word	0x400e0600
  4009b8:	00370008 	.word	0x00370008
  4009bc:	ffc8ff8f 	.word	0xffc8ff8f
  4009c0:	fec8ffff 	.word	0xfec8ffff

004009c4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4009c4:	b480      	push	{r7}
  4009c6:	b083      	sub	sp, #12
  4009c8:	af00      	add	r7, sp, #0
  4009ca:	6078      	str	r0, [r7, #4]
  4009cc:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4009ce:	687b      	ldr	r3, [r7, #4]
  4009d0:	2b00      	cmp	r3, #0
  4009d2:	d008      	beq.n	4009e6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009d4:	4913      	ldr	r1, [pc, #76]	; (400a24 <pmc_switch_mainck_to_xtal+0x60>)
  4009d6:	4b13      	ldr	r3, [pc, #76]	; (400a24 <pmc_switch_mainck_to_xtal+0x60>)
  4009d8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4009da:	4a13      	ldr	r2, [pc, #76]	; (400a28 <pmc_switch_mainck_to_xtal+0x64>)
  4009dc:	401a      	ands	r2, r3
  4009de:	4b13      	ldr	r3, [pc, #76]	; (400a2c <pmc_switch_mainck_to_xtal+0x68>)
  4009e0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009e2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4009e4:	e018      	b.n	400a18 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009e6:	490f      	ldr	r1, [pc, #60]	; (400a24 <pmc_switch_mainck_to_xtal+0x60>)
  4009e8:	4b0e      	ldr	r3, [pc, #56]	; (400a24 <pmc_switch_mainck_to_xtal+0x60>)
  4009ea:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4009ec:	4b10      	ldr	r3, [pc, #64]	; (400a30 <pmc_switch_mainck_to_xtal+0x6c>)
  4009ee:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4009f0:	683a      	ldr	r2, [r7, #0]
  4009f2:	0212      	lsls	r2, r2, #8
  4009f4:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4009f6:	431a      	orrs	r2, r3
  4009f8:	4b0e      	ldr	r3, [pc, #56]	; (400a34 <pmc_switch_mainck_to_xtal+0x70>)
  4009fa:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009fc:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4009fe:	bf00      	nop
  400a00:	4b08      	ldr	r3, [pc, #32]	; (400a24 <pmc_switch_mainck_to_xtal+0x60>)
  400a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a04:	f003 0301 	and.w	r3, r3, #1
  400a08:	2b00      	cmp	r3, #0
  400a0a:	d0f9      	beq.n	400a00 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400a0c:	4905      	ldr	r1, [pc, #20]	; (400a24 <pmc_switch_mainck_to_xtal+0x60>)
  400a0e:	4b05      	ldr	r3, [pc, #20]	; (400a24 <pmc_switch_mainck_to_xtal+0x60>)
  400a10:	6a1a      	ldr	r2, [r3, #32]
  400a12:	4b09      	ldr	r3, [pc, #36]	; (400a38 <pmc_switch_mainck_to_xtal+0x74>)
  400a14:	4313      	orrs	r3, r2
  400a16:	620b      	str	r3, [r1, #32]
}
  400a18:	bf00      	nop
  400a1a:	370c      	adds	r7, #12
  400a1c:	46bd      	mov	sp, r7
  400a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a22:	4770      	bx	lr
  400a24:	400e0600 	.word	0x400e0600
  400a28:	fec8fffc 	.word	0xfec8fffc
  400a2c:	01370002 	.word	0x01370002
  400a30:	ffc8fffc 	.word	0xffc8fffc
  400a34:	00370001 	.word	0x00370001
  400a38:	01370000 	.word	0x01370000

00400a3c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400a3c:	b480      	push	{r7}
  400a3e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a40:	4b04      	ldr	r3, [pc, #16]	; (400a54 <pmc_osc_is_ready_mainck+0x18>)
  400a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400a48:	4618      	mov	r0, r3
  400a4a:	46bd      	mov	sp, r7
  400a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a50:	4770      	bx	lr
  400a52:	bf00      	nop
  400a54:	400e0600 	.word	0x400e0600

00400a58 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400a58:	b480      	push	{r7}
  400a5a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a5c:	4b04      	ldr	r3, [pc, #16]	; (400a70 <pmc_disable_pllack+0x18>)
  400a5e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400a62:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400a64:	bf00      	nop
  400a66:	46bd      	mov	sp, r7
  400a68:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a6c:	4770      	bx	lr
  400a6e:	bf00      	nop
  400a70:	400e0600 	.word	0x400e0600

00400a74 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400a74:	b480      	push	{r7}
  400a76:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a78:	4b04      	ldr	r3, [pc, #16]	; (400a8c <pmc_is_locked_pllack+0x18>)
  400a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a7c:	f003 0302 	and.w	r3, r3, #2
}
  400a80:	4618      	mov	r0, r3
  400a82:	46bd      	mov	sp, r7
  400a84:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a88:	4770      	bx	lr
  400a8a:	bf00      	nop
  400a8c:	400e0600 	.word	0x400e0600

00400a90 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400a90:	b480      	push	{r7}
  400a92:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400a94:	4b04      	ldr	r3, [pc, #16]	; (400aa8 <pmc_is_locked_upll+0x18>)
  400a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400a9c:	4618      	mov	r0, r3
  400a9e:	46bd      	mov	sp, r7
  400aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400aa4:	4770      	bx	lr
  400aa6:	bf00      	nop
  400aa8:	400e0600 	.word	0x400e0600

00400aac <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400aac:	b480      	push	{r7}
  400aae:	b083      	sub	sp, #12
  400ab0:	af00      	add	r7, sp, #0
  400ab2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400ab4:	687b      	ldr	r3, [r7, #4]
  400ab6:	2b3f      	cmp	r3, #63	; 0x3f
  400ab8:	d901      	bls.n	400abe <pmc_enable_periph_clk+0x12>
		return 1;
  400aba:	2301      	movs	r3, #1
  400abc:	e02f      	b.n	400b1e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400abe:	687b      	ldr	r3, [r7, #4]
  400ac0:	2b1f      	cmp	r3, #31
  400ac2:	d813      	bhi.n	400aec <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400ac4:	4b19      	ldr	r3, [pc, #100]	; (400b2c <pmc_enable_periph_clk+0x80>)
  400ac6:	699a      	ldr	r2, [r3, #24]
  400ac8:	2101      	movs	r1, #1
  400aca:	687b      	ldr	r3, [r7, #4]
  400acc:	fa01 f303 	lsl.w	r3, r1, r3
  400ad0:	401a      	ands	r2, r3
  400ad2:	2101      	movs	r1, #1
  400ad4:	687b      	ldr	r3, [r7, #4]
  400ad6:	fa01 f303 	lsl.w	r3, r1, r3
  400ada:	429a      	cmp	r2, r3
  400adc:	d01e      	beq.n	400b1c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400ade:	4a13      	ldr	r2, [pc, #76]	; (400b2c <pmc_enable_periph_clk+0x80>)
  400ae0:	2101      	movs	r1, #1
  400ae2:	687b      	ldr	r3, [r7, #4]
  400ae4:	fa01 f303 	lsl.w	r3, r1, r3
  400ae8:	6113      	str	r3, [r2, #16]
  400aea:	e017      	b.n	400b1c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400aec:	687b      	ldr	r3, [r7, #4]
  400aee:	3b20      	subs	r3, #32
  400af0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400af2:	4b0e      	ldr	r3, [pc, #56]	; (400b2c <pmc_enable_periph_clk+0x80>)
  400af4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400af8:	2101      	movs	r1, #1
  400afa:	687b      	ldr	r3, [r7, #4]
  400afc:	fa01 f303 	lsl.w	r3, r1, r3
  400b00:	401a      	ands	r2, r3
  400b02:	2101      	movs	r1, #1
  400b04:	687b      	ldr	r3, [r7, #4]
  400b06:	fa01 f303 	lsl.w	r3, r1, r3
  400b0a:	429a      	cmp	r2, r3
  400b0c:	d006      	beq.n	400b1c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400b0e:	4a07      	ldr	r2, [pc, #28]	; (400b2c <pmc_enable_periph_clk+0x80>)
  400b10:	2101      	movs	r1, #1
  400b12:	687b      	ldr	r3, [r7, #4]
  400b14:	fa01 f303 	lsl.w	r3, r1, r3
  400b18:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400b1c:	2300      	movs	r3, #0
}
  400b1e:	4618      	mov	r0, r3
  400b20:	370c      	adds	r7, #12
  400b22:	46bd      	mov	sp, r7
  400b24:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b28:	4770      	bx	lr
  400b2a:	bf00      	nop
  400b2c:	400e0600 	.word	0x400e0600

00400b30 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400b30:	b480      	push	{r7}
  400b32:	b083      	sub	sp, #12
  400b34:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400b36:	f3ef 8310 	mrs	r3, PRIMASK
  400b3a:	607b      	str	r3, [r7, #4]
  return(result);
  400b3c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400b3e:	2b00      	cmp	r3, #0
  400b40:	bf0c      	ite	eq
  400b42:	2301      	moveq	r3, #1
  400b44:	2300      	movne	r3, #0
  400b46:	b2db      	uxtb	r3, r3
  400b48:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400b4a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400b4c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400b50:	4b04      	ldr	r3, [pc, #16]	; (400b64 <cpu_irq_save+0x34>)
  400b52:	2200      	movs	r2, #0
  400b54:	701a      	strb	r2, [r3, #0]
	return flags;
  400b56:	683b      	ldr	r3, [r7, #0]
}
  400b58:	4618      	mov	r0, r3
  400b5a:	370c      	adds	r7, #12
  400b5c:	46bd      	mov	sp, r7
  400b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b62:	4770      	bx	lr
  400b64:	2040000a 	.word	0x2040000a

00400b68 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400b68:	b480      	push	{r7}
  400b6a:	b083      	sub	sp, #12
  400b6c:	af00      	add	r7, sp, #0
  400b6e:	6078      	str	r0, [r7, #4]
	return (flags);
  400b70:	687b      	ldr	r3, [r7, #4]
  400b72:	2b00      	cmp	r3, #0
  400b74:	bf14      	ite	ne
  400b76:	2301      	movne	r3, #1
  400b78:	2300      	moveq	r3, #0
  400b7a:	b2db      	uxtb	r3, r3
}
  400b7c:	4618      	mov	r0, r3
  400b7e:	370c      	adds	r7, #12
  400b80:	46bd      	mov	sp, r7
  400b82:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b86:	4770      	bx	lr

00400b88 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400b88:	b580      	push	{r7, lr}
  400b8a:	b082      	sub	sp, #8
  400b8c:	af00      	add	r7, sp, #0
  400b8e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400b90:	6878      	ldr	r0, [r7, #4]
  400b92:	4b07      	ldr	r3, [pc, #28]	; (400bb0 <cpu_irq_restore+0x28>)
  400b94:	4798      	blx	r3
  400b96:	4603      	mov	r3, r0
  400b98:	2b00      	cmp	r3, #0
  400b9a:	d005      	beq.n	400ba8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400b9c:	4b05      	ldr	r3, [pc, #20]	; (400bb4 <cpu_irq_restore+0x2c>)
  400b9e:	2201      	movs	r2, #1
  400ba0:	701a      	strb	r2, [r3, #0]
  400ba2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400ba6:	b662      	cpsie	i
}
  400ba8:	bf00      	nop
  400baa:	3708      	adds	r7, #8
  400bac:	46bd      	mov	sp, r7
  400bae:	bd80      	pop	{r7, pc}
  400bb0:	00400b69 	.word	0x00400b69
  400bb4:	2040000a 	.word	0x2040000a

00400bb8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400bb8:	b580      	push	{r7, lr}
  400bba:	b084      	sub	sp, #16
  400bbc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  400bbe:	4b1e      	ldr	r3, [pc, #120]	; (400c38 <Reset_Handler+0x80>)
  400bc0:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  400bc2:	4b1e      	ldr	r3, [pc, #120]	; (400c3c <Reset_Handler+0x84>)
  400bc4:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  400bc6:	68fa      	ldr	r2, [r7, #12]
  400bc8:	68bb      	ldr	r3, [r7, #8]
  400bca:	429a      	cmp	r2, r3
  400bcc:	d00c      	beq.n	400be8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  400bce:	e007      	b.n	400be0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  400bd0:	68bb      	ldr	r3, [r7, #8]
  400bd2:	1d1a      	adds	r2, r3, #4
  400bd4:	60ba      	str	r2, [r7, #8]
  400bd6:	68fa      	ldr	r2, [r7, #12]
  400bd8:	1d11      	adds	r1, r2, #4
  400bda:	60f9      	str	r1, [r7, #12]
  400bdc:	6812      	ldr	r2, [r2, #0]
  400bde:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  400be0:	68bb      	ldr	r3, [r7, #8]
  400be2:	4a17      	ldr	r2, [pc, #92]	; (400c40 <Reset_Handler+0x88>)
  400be4:	4293      	cmp	r3, r2
  400be6:	d3f3      	bcc.n	400bd0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400be8:	4b16      	ldr	r3, [pc, #88]	; (400c44 <Reset_Handler+0x8c>)
  400bea:	60bb      	str	r3, [r7, #8]
  400bec:	e004      	b.n	400bf8 <Reset_Handler+0x40>
                *pDest++ = 0;
  400bee:	68bb      	ldr	r3, [r7, #8]
  400bf0:	1d1a      	adds	r2, r3, #4
  400bf2:	60ba      	str	r2, [r7, #8]
  400bf4:	2200      	movs	r2, #0
  400bf6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  400bf8:	68bb      	ldr	r3, [r7, #8]
  400bfa:	4a13      	ldr	r2, [pc, #76]	; (400c48 <Reset_Handler+0x90>)
  400bfc:	4293      	cmp	r3, r2
  400bfe:	d3f6      	bcc.n	400bee <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  400c00:	4b12      	ldr	r3, [pc, #72]	; (400c4c <Reset_Handler+0x94>)
  400c02:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400c04:	4a12      	ldr	r2, [pc, #72]	; (400c50 <Reset_Handler+0x98>)
  400c06:	68fb      	ldr	r3, [r7, #12]
  400c08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400c0c:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  400c0e:	4b11      	ldr	r3, [pc, #68]	; (400c54 <Reset_Handler+0x9c>)
  400c10:	4798      	blx	r3
  400c12:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  400c14:	4a10      	ldr	r2, [pc, #64]	; (400c58 <Reset_Handler+0xa0>)
  400c16:	4b10      	ldr	r3, [pc, #64]	; (400c58 <Reset_Handler+0xa0>)
  400c18:	681b      	ldr	r3, [r3, #0]
  400c1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400c1e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400c20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c24:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  400c28:	6878      	ldr	r0, [r7, #4]
  400c2a:	4b0c      	ldr	r3, [pc, #48]	; (400c5c <Reset_Handler+0xa4>)
  400c2c:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  400c2e:	4b0c      	ldr	r3, [pc, #48]	; (400c60 <Reset_Handler+0xa8>)
  400c30:	4798      	blx	r3

        /* Branch to main function */
        main();
  400c32:	4b0c      	ldr	r3, [pc, #48]	; (400c64 <Reset_Handler+0xac>)
  400c34:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400c36:	e7fe      	b.n	400c36 <Reset_Handler+0x7e>
  400c38:	00402224 	.word	0x00402224
  400c3c:	20400000 	.word	0x20400000
  400c40:	2040090c 	.word	0x2040090c
  400c44:	2040090c 	.word	0x2040090c
  400c48:	204009bc 	.word	0x204009bc
  400c4c:	00400000 	.word	0x00400000
  400c50:	e000ed00 	.word	0xe000ed00
  400c54:	00400b31 	.word	0x00400b31
  400c58:	e000ed88 	.word	0xe000ed88
  400c5c:	00400b89 	.word	0x00400b89
  400c60:	00402085 	.word	0x00402085
  400c64:	00401351 	.word	0x00401351

00400c68 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400c68:	b480      	push	{r7}
  400c6a:	af00      	add	r7, sp, #0
        while (1) {
  400c6c:	e7fe      	b.n	400c6c <Dummy_Handler+0x4>
	...

00400c70 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  400c70:	b480      	push	{r7}
  400c72:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400c74:	4b52      	ldr	r3, [pc, #328]	; (400dc0 <SystemCoreClockUpdate+0x150>)
  400c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c78:	f003 0303 	and.w	r3, r3, #3
  400c7c:	2b01      	cmp	r3, #1
  400c7e:	d014      	beq.n	400caa <SystemCoreClockUpdate+0x3a>
  400c80:	2b01      	cmp	r3, #1
  400c82:	d302      	bcc.n	400c8a <SystemCoreClockUpdate+0x1a>
  400c84:	2b02      	cmp	r3, #2
  400c86:	d038      	beq.n	400cfa <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  400c88:	e07a      	b.n	400d80 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400c8a:	4b4e      	ldr	r3, [pc, #312]	; (400dc4 <SystemCoreClockUpdate+0x154>)
  400c8c:	695b      	ldr	r3, [r3, #20]
  400c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400c92:	2b00      	cmp	r3, #0
  400c94:	d004      	beq.n	400ca0 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c96:	4b4c      	ldr	r3, [pc, #304]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400c98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400c9c:	601a      	str	r2, [r3, #0]
    break;
  400c9e:	e06f      	b.n	400d80 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ca0:	4b49      	ldr	r3, [pc, #292]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400ca2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  400ca6:	601a      	str	r2, [r3, #0]
    break;
  400ca8:	e06a      	b.n	400d80 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400caa:	4b45      	ldr	r3, [pc, #276]	; (400dc0 <SystemCoreClockUpdate+0x150>)
  400cac:	6a1b      	ldr	r3, [r3, #32]
  400cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400cb2:	2b00      	cmp	r3, #0
  400cb4:	d003      	beq.n	400cbe <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400cb6:	4b44      	ldr	r3, [pc, #272]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400cb8:	4a44      	ldr	r2, [pc, #272]	; (400dcc <SystemCoreClockUpdate+0x15c>)
  400cba:	601a      	str	r2, [r3, #0]
    break;
  400cbc:	e060      	b.n	400d80 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400cbe:	4b42      	ldr	r3, [pc, #264]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400cc0:	4a43      	ldr	r2, [pc, #268]	; (400dd0 <SystemCoreClockUpdate+0x160>)
  400cc2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400cc4:	4b3e      	ldr	r3, [pc, #248]	; (400dc0 <SystemCoreClockUpdate+0x150>)
  400cc6:	6a1b      	ldr	r3, [r3, #32]
  400cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ccc:	2b10      	cmp	r3, #16
  400cce:	d004      	beq.n	400cda <SystemCoreClockUpdate+0x6a>
  400cd0:	2b20      	cmp	r3, #32
  400cd2:	d008      	beq.n	400ce6 <SystemCoreClockUpdate+0x76>
  400cd4:	2b00      	cmp	r3, #0
  400cd6:	d00e      	beq.n	400cf6 <SystemCoreClockUpdate+0x86>
          break;
  400cd8:	e00e      	b.n	400cf8 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  400cda:	4b3b      	ldr	r3, [pc, #236]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400cdc:	681b      	ldr	r3, [r3, #0]
  400cde:	005b      	lsls	r3, r3, #1
  400ce0:	4a39      	ldr	r2, [pc, #228]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400ce2:	6013      	str	r3, [r2, #0]
          break;
  400ce4:	e008      	b.n	400cf8 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  400ce6:	4b38      	ldr	r3, [pc, #224]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400ce8:	681a      	ldr	r2, [r3, #0]
  400cea:	4613      	mov	r3, r2
  400cec:	005b      	lsls	r3, r3, #1
  400cee:	4413      	add	r3, r2
  400cf0:	4a35      	ldr	r2, [pc, #212]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400cf2:	6013      	str	r3, [r2, #0]
          break;
  400cf4:	e000      	b.n	400cf8 <SystemCoreClockUpdate+0x88>
          break;
  400cf6:	bf00      	nop
    break;
  400cf8:	e042      	b.n	400d80 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400cfa:	4b31      	ldr	r3, [pc, #196]	; (400dc0 <SystemCoreClockUpdate+0x150>)
  400cfc:	6a1b      	ldr	r3, [r3, #32]
  400cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400d02:	2b00      	cmp	r3, #0
  400d04:	d003      	beq.n	400d0e <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400d06:	4b30      	ldr	r3, [pc, #192]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d08:	4a30      	ldr	r2, [pc, #192]	; (400dcc <SystemCoreClockUpdate+0x15c>)
  400d0a:	601a      	str	r2, [r3, #0]
  400d0c:	e01c      	b.n	400d48 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400d0e:	4b2e      	ldr	r3, [pc, #184]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d10:	4a2f      	ldr	r2, [pc, #188]	; (400dd0 <SystemCoreClockUpdate+0x160>)
  400d12:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400d14:	4b2a      	ldr	r3, [pc, #168]	; (400dc0 <SystemCoreClockUpdate+0x150>)
  400d16:	6a1b      	ldr	r3, [r3, #32]
  400d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d1c:	2b10      	cmp	r3, #16
  400d1e:	d004      	beq.n	400d2a <SystemCoreClockUpdate+0xba>
  400d20:	2b20      	cmp	r3, #32
  400d22:	d008      	beq.n	400d36 <SystemCoreClockUpdate+0xc6>
  400d24:	2b00      	cmp	r3, #0
  400d26:	d00e      	beq.n	400d46 <SystemCoreClockUpdate+0xd6>
          break;
  400d28:	e00e      	b.n	400d48 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  400d2a:	4b27      	ldr	r3, [pc, #156]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d2c:	681b      	ldr	r3, [r3, #0]
  400d2e:	005b      	lsls	r3, r3, #1
  400d30:	4a25      	ldr	r2, [pc, #148]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d32:	6013      	str	r3, [r2, #0]
          break;
  400d34:	e008      	b.n	400d48 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  400d36:	4b24      	ldr	r3, [pc, #144]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d38:	681a      	ldr	r2, [r3, #0]
  400d3a:	4613      	mov	r3, r2
  400d3c:	005b      	lsls	r3, r3, #1
  400d3e:	4413      	add	r3, r2
  400d40:	4a21      	ldr	r2, [pc, #132]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d42:	6013      	str	r3, [r2, #0]
          break;
  400d44:	e000      	b.n	400d48 <SystemCoreClockUpdate+0xd8>
          break;
  400d46:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400d48:	4b1d      	ldr	r3, [pc, #116]	; (400dc0 <SystemCoreClockUpdate+0x150>)
  400d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d4c:	f003 0303 	and.w	r3, r3, #3
  400d50:	2b02      	cmp	r3, #2
  400d52:	d114      	bne.n	400d7e <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400d54:	4b1a      	ldr	r3, [pc, #104]	; (400dc0 <SystemCoreClockUpdate+0x150>)
  400d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400d58:	0c1b      	lsrs	r3, r3, #16
  400d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
  400d5e:	3301      	adds	r3, #1
  400d60:	4a19      	ldr	r2, [pc, #100]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d62:	6812      	ldr	r2, [r2, #0]
  400d64:	fb02 f303 	mul.w	r3, r2, r3
  400d68:	4a17      	ldr	r2, [pc, #92]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d6a:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400d6c:	4b14      	ldr	r3, [pc, #80]	; (400dc0 <SystemCoreClockUpdate+0x150>)
  400d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400d70:	b2db      	uxtb	r3, r3
  400d72:	4a15      	ldr	r2, [pc, #84]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d74:	6812      	ldr	r2, [r2, #0]
  400d76:	fbb2 f3f3 	udiv	r3, r2, r3
  400d7a:	4a13      	ldr	r2, [pc, #76]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d7c:	6013      	str	r3, [r2, #0]
    break;
  400d7e:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400d80:	4b0f      	ldr	r3, [pc, #60]	; (400dc0 <SystemCoreClockUpdate+0x150>)
  400d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d84:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d88:	2b70      	cmp	r3, #112	; 0x70
  400d8a:	d108      	bne.n	400d9e <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  400d8c:	4b0e      	ldr	r3, [pc, #56]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d8e:	681b      	ldr	r3, [r3, #0]
  400d90:	4a10      	ldr	r2, [pc, #64]	; (400dd4 <SystemCoreClockUpdate+0x164>)
  400d92:	fba2 2303 	umull	r2, r3, r2, r3
  400d96:	085b      	lsrs	r3, r3, #1
  400d98:	4a0b      	ldr	r2, [pc, #44]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400d9a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  400d9c:	e00a      	b.n	400db4 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400d9e:	4b08      	ldr	r3, [pc, #32]	; (400dc0 <SystemCoreClockUpdate+0x150>)
  400da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400da2:	091b      	lsrs	r3, r3, #4
  400da4:	f003 0307 	and.w	r3, r3, #7
  400da8:	4a07      	ldr	r2, [pc, #28]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400daa:	6812      	ldr	r2, [r2, #0]
  400dac:	fa22 f303 	lsr.w	r3, r2, r3
  400db0:	4a05      	ldr	r2, [pc, #20]	; (400dc8 <SystemCoreClockUpdate+0x158>)
  400db2:	6013      	str	r3, [r2, #0]
}
  400db4:	bf00      	nop
  400db6:	46bd      	mov	sp, r7
  400db8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dbc:	4770      	bx	lr
  400dbe:	bf00      	nop
  400dc0:	400e0600 	.word	0x400e0600
  400dc4:	400e1810 	.word	0x400e1810
  400dc8:	2040000c 	.word	0x2040000c
  400dcc:	00b71b00 	.word	0x00b71b00
  400dd0:	003d0900 	.word	0x003d0900
  400dd4:	aaaaaaab 	.word	0xaaaaaaab

00400dd8 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  400dd8:	b480      	push	{r7}
  400dda:	b083      	sub	sp, #12
  400ddc:	af00      	add	r7, sp, #0
  400dde:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400de0:	687b      	ldr	r3, [r7, #4]
  400de2:	4a19      	ldr	r2, [pc, #100]	; (400e48 <system_init_flash+0x70>)
  400de4:	4293      	cmp	r3, r2
  400de6:	d804      	bhi.n	400df2 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400de8:	4b18      	ldr	r3, [pc, #96]	; (400e4c <system_init_flash+0x74>)
  400dea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400dee:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  400df0:	e023      	b.n	400e3a <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  400df2:	687b      	ldr	r3, [r7, #4]
  400df4:	4a16      	ldr	r2, [pc, #88]	; (400e50 <system_init_flash+0x78>)
  400df6:	4293      	cmp	r3, r2
  400df8:	d803      	bhi.n	400e02 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400dfa:	4b14      	ldr	r3, [pc, #80]	; (400e4c <system_init_flash+0x74>)
  400dfc:	4a15      	ldr	r2, [pc, #84]	; (400e54 <system_init_flash+0x7c>)
  400dfe:	601a      	str	r2, [r3, #0]
}
  400e00:	e01b      	b.n	400e3a <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  400e02:	687b      	ldr	r3, [r7, #4]
  400e04:	4a14      	ldr	r2, [pc, #80]	; (400e58 <system_init_flash+0x80>)
  400e06:	4293      	cmp	r3, r2
  400e08:	d803      	bhi.n	400e12 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400e0a:	4b10      	ldr	r3, [pc, #64]	; (400e4c <system_init_flash+0x74>)
  400e0c:	4a13      	ldr	r2, [pc, #76]	; (400e5c <system_init_flash+0x84>)
  400e0e:	601a      	str	r2, [r3, #0]
}
  400e10:	e013      	b.n	400e3a <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400e12:	687b      	ldr	r3, [r7, #4]
  400e14:	4a12      	ldr	r2, [pc, #72]	; (400e60 <system_init_flash+0x88>)
  400e16:	4293      	cmp	r3, r2
  400e18:	d803      	bhi.n	400e22 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400e1a:	4b0c      	ldr	r3, [pc, #48]	; (400e4c <system_init_flash+0x74>)
  400e1c:	4a11      	ldr	r2, [pc, #68]	; (400e64 <system_init_flash+0x8c>)
  400e1e:	601a      	str	r2, [r3, #0]
}
  400e20:	e00b      	b.n	400e3a <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400e22:	687b      	ldr	r3, [r7, #4]
  400e24:	4a10      	ldr	r2, [pc, #64]	; (400e68 <system_init_flash+0x90>)
  400e26:	4293      	cmp	r3, r2
  400e28:	d804      	bhi.n	400e34 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400e2a:	4b08      	ldr	r3, [pc, #32]	; (400e4c <system_init_flash+0x74>)
  400e2c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400e30:	601a      	str	r2, [r3, #0]
}
  400e32:	e002      	b.n	400e3a <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400e34:	4b05      	ldr	r3, [pc, #20]	; (400e4c <system_init_flash+0x74>)
  400e36:	4a0d      	ldr	r2, [pc, #52]	; (400e6c <system_init_flash+0x94>)
  400e38:	601a      	str	r2, [r3, #0]
}
  400e3a:	bf00      	nop
  400e3c:	370c      	adds	r7, #12
  400e3e:	46bd      	mov	sp, r7
  400e40:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e44:	4770      	bx	lr
  400e46:	bf00      	nop
  400e48:	01312cff 	.word	0x01312cff
  400e4c:	400e0c00 	.word	0x400e0c00
  400e50:	026259ff 	.word	0x026259ff
  400e54:	04000100 	.word	0x04000100
  400e58:	039386ff 	.word	0x039386ff
  400e5c:	04000200 	.word	0x04000200
  400e60:	04c4b3ff 	.word	0x04c4b3ff
  400e64:	04000300 	.word	0x04000300
  400e68:	05f5e0ff 	.word	0x05f5e0ff
  400e6c:	04000500 	.word	0x04000500

00400e70 <osc_get_rate>:
{
  400e70:	b480      	push	{r7}
  400e72:	b083      	sub	sp, #12
  400e74:	af00      	add	r7, sp, #0
  400e76:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400e78:	687b      	ldr	r3, [r7, #4]
  400e7a:	2b07      	cmp	r3, #7
  400e7c:	d825      	bhi.n	400eca <osc_get_rate+0x5a>
  400e7e:	a201      	add	r2, pc, #4	; (adr r2, 400e84 <osc_get_rate+0x14>)
  400e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e84:	00400ea5 	.word	0x00400ea5
  400e88:	00400eab 	.word	0x00400eab
  400e8c:	00400eb1 	.word	0x00400eb1
  400e90:	00400eb7 	.word	0x00400eb7
  400e94:	00400ebb 	.word	0x00400ebb
  400e98:	00400ebf 	.word	0x00400ebf
  400e9c:	00400ec3 	.word	0x00400ec3
  400ea0:	00400ec7 	.word	0x00400ec7
		return OSC_SLCK_32K_RC_HZ;
  400ea4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400ea8:	e010      	b.n	400ecc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400eae:	e00d      	b.n	400ecc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400eb4:	e00a      	b.n	400ecc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400eb6:	4b08      	ldr	r3, [pc, #32]	; (400ed8 <osc_get_rate+0x68>)
  400eb8:	e008      	b.n	400ecc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400eba:	4b08      	ldr	r3, [pc, #32]	; (400edc <osc_get_rate+0x6c>)
  400ebc:	e006      	b.n	400ecc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400ebe:	4b08      	ldr	r3, [pc, #32]	; (400ee0 <osc_get_rate+0x70>)
  400ec0:	e004      	b.n	400ecc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400ec2:	4b07      	ldr	r3, [pc, #28]	; (400ee0 <osc_get_rate+0x70>)
  400ec4:	e002      	b.n	400ecc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400ec6:	4b06      	ldr	r3, [pc, #24]	; (400ee0 <osc_get_rate+0x70>)
  400ec8:	e000      	b.n	400ecc <osc_get_rate+0x5c>
	return 0;
  400eca:	2300      	movs	r3, #0
}
  400ecc:	4618      	mov	r0, r3
  400ece:	370c      	adds	r7, #12
  400ed0:	46bd      	mov	sp, r7
  400ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ed6:	4770      	bx	lr
  400ed8:	003d0900 	.word	0x003d0900
  400edc:	007a1200 	.word	0x007a1200
  400ee0:	00b71b00 	.word	0x00b71b00

00400ee4 <sysclk_get_main_hz>:
{
  400ee4:	b580      	push	{r7, lr}
  400ee6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400ee8:	2006      	movs	r0, #6
  400eea:	4b05      	ldr	r3, [pc, #20]	; (400f00 <sysclk_get_main_hz+0x1c>)
  400eec:	4798      	blx	r3
  400eee:	4602      	mov	r2, r0
  400ef0:	4613      	mov	r3, r2
  400ef2:	009b      	lsls	r3, r3, #2
  400ef4:	4413      	add	r3, r2
  400ef6:	009a      	lsls	r2, r3, #2
  400ef8:	4413      	add	r3, r2
}
  400efa:	4618      	mov	r0, r3
  400efc:	bd80      	pop	{r7, pc}
  400efe:	bf00      	nop
  400f00:	00400e71 	.word	0x00400e71

00400f04 <sysclk_get_cpu_hz>:
{
  400f04:	b580      	push	{r7, lr}
  400f06:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400f08:	4b02      	ldr	r3, [pc, #8]	; (400f14 <sysclk_get_cpu_hz+0x10>)
  400f0a:	4798      	blx	r3
  400f0c:	4603      	mov	r3, r0
}
  400f0e:	4618      	mov	r0, r3
  400f10:	bd80      	pop	{r7, pc}
  400f12:	bf00      	nop
  400f14:	00400ee5 	.word	0x00400ee5

00400f18 <init>:
/* funcoes                                                              */
/************************************************************************/

// Função de inicialização do uC e config correta dos perifericos e pinos
void init(void)
{
  400f18:	b590      	push	{r4, r7, lr}
  400f1a:	b083      	sub	sp, #12
  400f1c:	af02      	add	r7, sp, #8
	//inicializa board clock
	sysclk_init();
  400f1e:	4b18      	ldr	r3, [pc, #96]	; (400f80 <init+0x68>)
  400f20:	4798      	blx	r3
	
	//desativa WatchDog Timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  400f22:	4b18      	ldr	r3, [pc, #96]	; (400f84 <init+0x6c>)
  400f24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400f28:	605a      	str	r2, [r3, #4]
	
	//Ativa o PIO na qual o LED foi conectado
	// para que possamos controlar o LED
	pmc_enable_periph_clk(LED_PIO_ID);
  400f2a:	200c      	movs	r0, #12
  400f2c:	4b16      	ldr	r3, [pc, #88]	; (400f88 <init+0x70>)
  400f2e:	4798      	blx	r3
	
	//Inicializa o PC8 como saida
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 0, 0, 0);
  400f30:	2300      	movs	r3, #0
  400f32:	9300      	str	r3, [sp, #0]
  400f34:	2300      	movs	r3, #0
  400f36:	2200      	movs	r2, #0
  400f38:	f44f 7180 	mov.w	r1, #256	; 0x100
  400f3c:	4813      	ldr	r0, [pc, #76]	; (400f8c <init+0x74>)
  400f3e:	4c14      	ldr	r4, [pc, #80]	; (400f90 <init+0x78>)
  400f40:	47a0      	blx	r4
	
	// Inicializa PIO do botao
	pmc_enable_periph_clk(BUT_PIO_ID);
  400f42:	200a      	movs	r0, #10
  400f44:	4b10      	ldr	r3, [pc, #64]	; (400f88 <init+0x70>)
  400f46:	4798      	blx	r3
	
	// configura pino ligado ao botão como entrada com um pull-up.
	pio_set_input(BUT_PIO, BUT_PIO_IDX_MASK, PIO_DEFAULT);
  400f48:	2200      	movs	r2, #0
  400f4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400f4e:	4811      	ldr	r0, [pc, #68]	; (400f94 <init+0x7c>)
  400f50:	4b11      	ldr	r3, [pc, #68]	; (400f98 <init+0x80>)
  400f52:	4798      	blx	r3
	
	//Ativar o pull-up
	pio_pull_up(BUT_PIO, BUT_PIO_IDX_MASK, 1);
  400f54:	2201      	movs	r2, #1
  400f56:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400f5a:	480e      	ldr	r0, [pc, #56]	; (400f94 <init+0x7c>)
  400f5c:	4b0f      	ldr	r3, [pc, #60]	; (400f9c <init+0x84>)
  400f5e:	4798      	blx	r3
	
	//BUZZER
	pmc_enable_periph_clk(BUZ_PIO_ID); //inicializa pio do buzzer
  400f60:	200c      	movs	r0, #12
  400f62:	4b09      	ldr	r3, [pc, #36]	; (400f88 <init+0x70>)
  400f64:	4798      	blx	r3
	pio_set_output(BUZ_PIO, BUZ_PIO_IDX_MASK, 0, 0,0 );
  400f66:	2300      	movs	r3, #0
  400f68:	9300      	str	r3, [sp, #0]
  400f6a:	2300      	movs	r3, #0
  400f6c:	2200      	movs	r2, #0
  400f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400f72:	4806      	ldr	r0, [pc, #24]	; (400f8c <init+0x74>)
  400f74:	4c06      	ldr	r4, [pc, #24]	; (400f90 <init+0x78>)
  400f76:	47a0      	blx	r4
}
  400f78:	bf00      	nop
  400f7a:	3704      	adds	r7, #4
  400f7c:	46bd      	mov	sp, r7
  400f7e:	bd90      	pop	{r4, r7, pc}
  400f80:	004004ad 	.word	0x004004ad
  400f84:	400e1850 	.word	0x400e1850
  400f88:	00400aad 	.word	0x00400aad
  400f8c:	400e1200 	.word	0x400e1200
  400f90:	0040060d 	.word	0x0040060d
  400f94:	400e0e00 	.word	0x400e0e00
  400f98:	0040058d 	.word	0x0040058d
  400f9c:	00400529 	.word	0x00400529

00400fa0 <playMusic>:

/************************************************************************/
/* Main                                                                 */
/************************************************************************/

void playMusic(int tempo[], int notes[], int size){
  400fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400fa4:	b089      	sub	sp, #36	; 0x24
  400fa6:	af00      	add	r7, sp, #0
  400fa8:	60f8      	str	r0, [r7, #12]
  400faa:	60b9      	str	r1, [r7, #8]
  400fac:	607a      	str	r2, [r7, #4]
	for (int i=0 ;  i< size ; i++){
  400fae:	2300      	movs	r3, #0
  400fb0:	61fb      	str	r3, [r7, #28]
  400fb2:	e1b5      	b.n	401320 <playMusic+0x380>
		if (notes[i] == 0 ){
  400fb4:	69fb      	ldr	r3, [r7, #28]
  400fb6:	009b      	lsls	r3, r3, #2
  400fb8:	68ba      	ldr	r2, [r7, #8]
  400fba:	4413      	add	r3, r2
  400fbc:	681b      	ldr	r3, [r3, #0]
  400fbe:	2b00      	cmp	r3, #0
  400fc0:	d14b      	bne.n	40105a <playMusic+0xba>
			delay_ms(tempo[i]);
  400fc2:	69fb      	ldr	r3, [r7, #28]
  400fc4:	009b      	lsls	r3, r3, #2
  400fc6:	68fa      	ldr	r2, [r7, #12]
  400fc8:	4413      	add	r3, r2
  400fca:	681b      	ldr	r3, [r3, #0]
  400fcc:	2b00      	cmp	r3, #0
  400fce:	d02b      	beq.n	401028 <playMusic+0x88>
  400fd0:	69fb      	ldr	r3, [r7, #28]
  400fd2:	009b      	lsls	r3, r3, #2
  400fd4:	68fa      	ldr	r2, [r7, #12]
  400fd6:	4413      	add	r3, r2
  400fd8:	681b      	ldr	r3, [r3, #0]
  400fda:	4698      	mov	r8, r3
  400fdc:	ea4f 79e8 	mov.w	r9, r8, asr #31
  400fe0:	4b8c      	ldr	r3, [pc, #560]	; (401214 <playMusic+0x274>)
  400fe2:	4798      	blx	r3
  400fe4:	4603      	mov	r3, r0
  400fe6:	f04f 0400 	mov.w	r4, #0
  400fea:	fb03 f109 	mul.w	r1, r3, r9
  400fee:	fb08 f204 	mul.w	r2, r8, r4
  400ff2:	440a      	add	r2, r1
  400ff4:	fba8 3403 	umull	r3, r4, r8, r3
  400ff8:	4422      	add	r2, r4
  400ffa:	4614      	mov	r4, r2
  400ffc:	f241 712b 	movw	r1, #5931	; 0x172b
  401000:	f04f 0200 	mov.w	r2, #0
  401004:	eb13 0801 	adds.w	r8, r3, r1
  401008:	eb44 0902 	adc.w	r9, r4, r2
  40100c:	4640      	mov	r0, r8
  40100e:	4649      	mov	r1, r9
  401010:	4c81      	ldr	r4, [pc, #516]	; (401218 <playMusic+0x278>)
  401012:	f241 722c 	movw	r2, #5932	; 0x172c
  401016:	f04f 0300 	mov.w	r3, #0
  40101a:	47a0      	blx	r4
  40101c:	4603      	mov	r3, r0
  40101e:	460c      	mov	r4, r1
  401020:	4618      	mov	r0, r3
  401022:	4b7e      	ldr	r3, [pc, #504]	; (40121c <playMusic+0x27c>)
  401024:	4798      	blx	r3
  401026:	e148      	b.n	4012ba <playMusic+0x31a>
  401028:	4b7a      	ldr	r3, [pc, #488]	; (401214 <playMusic+0x274>)
  40102a:	4798      	blx	r3
  40102c:	4603      	mov	r3, r0
  40102e:	f04f 0400 	mov.w	r4, #0
  401032:	497b      	ldr	r1, [pc, #492]	; (401220 <playMusic+0x280>)
  401034:	f04f 0200 	mov.w	r2, #0
  401038:	eb13 0801 	adds.w	r8, r3, r1
  40103c:	eb44 0902 	adc.w	r9, r4, r2
  401040:	4640      	mov	r0, r8
  401042:	4649      	mov	r1, r9
  401044:	4c74      	ldr	r4, [pc, #464]	; (401218 <playMusic+0x278>)
  401046:	4a77      	ldr	r2, [pc, #476]	; (401224 <playMusic+0x284>)
  401048:	f04f 0300 	mov.w	r3, #0
  40104c:	47a0      	blx	r4
  40104e:	4603      	mov	r3, r0
  401050:	460c      	mov	r4, r1
  401052:	4618      	mov	r0, r3
  401054:	4b71      	ldr	r3, [pc, #452]	; (40121c <playMusic+0x27c>)
  401056:	4798      	blx	r3
  401058:	e12f      	b.n	4012ba <playMusic+0x31a>
		}
		
		else {
			float t_delay = 1000.0 /(int)(notes[i])	;
  40105a:	69fb      	ldr	r3, [r7, #28]
  40105c:	009b      	lsls	r3, r3, #2
  40105e:	68ba      	ldr	r2, [r7, #8]
  401060:	4413      	add	r3, r2
  401062:	681a      	ldr	r2, [r3, #0]
  401064:	4b70      	ldr	r3, [pc, #448]	; (401228 <playMusic+0x288>)
  401066:	4610      	mov	r0, r2
  401068:	4798      	blx	r3
  40106a:	4602      	mov	r2, r0
  40106c:	460b      	mov	r3, r1
  40106e:	4c6f      	ldr	r4, [pc, #444]	; (40122c <playMusic+0x28c>)
  401070:	f04f 0000 	mov.w	r0, #0
  401074:	496e      	ldr	r1, [pc, #440]	; (401230 <playMusic+0x290>)
  401076:	47a0      	blx	r4
  401078:	4603      	mov	r3, r0
  40107a:	460c      	mov	r4, r1
  40107c:	4619      	mov	r1, r3
  40107e:	4622      	mov	r2, r4
  401080:	4b6c      	ldr	r3, [pc, #432]	; (401234 <playMusic+0x294>)
  401082:	4608      	mov	r0, r1
  401084:	4611      	mov	r1, r2
  401086:	4798      	blx	r3
  401088:	4603      	mov	r3, r0
  40108a:	617b      	str	r3, [r7, #20]
			pio_clear(PIOC, LED_PIO_IDX_MASK);    // Coloca 0 no pino do LED
  40108c:	f44f 7180 	mov.w	r1, #256	; 0x100
  401090:	4869      	ldr	r0, [pc, #420]	; (401238 <playMusic+0x298>)
  401092:	4b6a      	ldr	r3, [pc, #424]	; (40123c <playMusic+0x29c>)
  401094:	4798      	blx	r3
			for (long j=0 ; j < (tempo[i]/t_delay ); j++){
  401096:	2300      	movs	r3, #0
  401098:	61bb      	str	r3, [r7, #24]
  40109a:	e0f6      	b.n	40128a <playMusic+0x2ea>
				if (tempo[i]!= 0){
  40109c:	69fb      	ldr	r3, [r7, #28]
  40109e:	009b      	lsls	r3, r3, #2
  4010a0:	68fa      	ldr	r2, [r7, #12]
  4010a2:	4413      	add	r3, r2
  4010a4:	681b      	ldr	r3, [r3, #0]
  4010a6:	2b00      	cmp	r3, #0
  4010a8:	f000 80ec 	beq.w	401284 <playMusic+0x2e4>
					pio_set(PIOC, BUZ_PIO_IDX_MASK);
  4010ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4010b0:	4861      	ldr	r0, [pc, #388]	; (401238 <playMusic+0x298>)
  4010b2:	4b63      	ldr	r3, [pc, #396]	; (401240 <playMusic+0x2a0>)
  4010b4:	4798      	blx	r3
					delay_us(t_delay*1000.0);
  4010b6:	4b63      	ldr	r3, [pc, #396]	; (401244 <playMusic+0x2a4>)
  4010b8:	6978      	ldr	r0, [r7, #20]
  4010ba:	4798      	blx	r3
  4010bc:	4c62      	ldr	r4, [pc, #392]	; (401248 <playMusic+0x2a8>)
  4010be:	f04f 0200 	mov.w	r2, #0
  4010c2:	4b5b      	ldr	r3, [pc, #364]	; (401230 <playMusic+0x290>)
  4010c4:	47a0      	blx	r4
  4010c6:	4603      	mov	r3, r0
  4010c8:	460c      	mov	r4, r1
  4010ca:	4618      	mov	r0, r3
  4010cc:	4621      	mov	r1, r4
  4010ce:	4c5f      	ldr	r4, [pc, #380]	; (40124c <playMusic+0x2ac>)
  4010d0:	f04f 0200 	mov.w	r2, #0
  4010d4:	f04f 0300 	mov.w	r3, #0
  4010d8:	47a0      	blx	r4
  4010da:	4603      	mov	r3, r0
  4010dc:	2b00      	cmp	r3, #0
  4010de:	d133      	bne.n	401148 <playMusic+0x1a8>
  4010e0:	4b58      	ldr	r3, [pc, #352]	; (401244 <playMusic+0x2a4>)
  4010e2:	6978      	ldr	r0, [r7, #20]
  4010e4:	4798      	blx	r3
  4010e6:	4c58      	ldr	r4, [pc, #352]	; (401248 <playMusic+0x2a8>)
  4010e8:	f04f 0200 	mov.w	r2, #0
  4010ec:	4b50      	ldr	r3, [pc, #320]	; (401230 <playMusic+0x290>)
  4010ee:	47a0      	blx	r4
  4010f0:	4603      	mov	r3, r0
  4010f2:	460c      	mov	r4, r1
  4010f4:	4619      	mov	r1, r3
  4010f6:	4622      	mov	r2, r4
  4010f8:	4b55      	ldr	r3, [pc, #340]	; (401250 <playMusic+0x2b0>)
  4010fa:	4608      	mov	r0, r1
  4010fc:	4611      	mov	r1, r2
  4010fe:	4798      	blx	r3
  401100:	4680      	mov	r8, r0
  401102:	4689      	mov	r9, r1
  401104:	4b43      	ldr	r3, [pc, #268]	; (401214 <playMusic+0x274>)
  401106:	4798      	blx	r3
  401108:	4603      	mov	r3, r0
  40110a:	f04f 0400 	mov.w	r4, #0
  40110e:	fb03 f109 	mul.w	r1, r3, r9
  401112:	fb08 f204 	mul.w	r2, r8, r4
  401116:	440a      	add	r2, r1
  401118:	fba8 3403 	umull	r3, r4, r8, r3
  40111c:	4422      	add	r2, r4
  40111e:	4614      	mov	r4, r2
  401120:	493f      	ldr	r1, [pc, #252]	; (401220 <playMusic+0x280>)
  401122:	f04f 0200 	mov.w	r2, #0
  401126:	eb13 0801 	adds.w	r8, r3, r1
  40112a:	eb44 0902 	adc.w	r9, r4, r2
  40112e:	4640      	mov	r0, r8
  401130:	4649      	mov	r1, r9
  401132:	4c39      	ldr	r4, [pc, #228]	; (401218 <playMusic+0x278>)
  401134:	4a3b      	ldr	r2, [pc, #236]	; (401224 <playMusic+0x284>)
  401136:	f04f 0300 	mov.w	r3, #0
  40113a:	47a0      	blx	r4
  40113c:	4603      	mov	r3, r0
  40113e:	460c      	mov	r4, r1
  401140:	4618      	mov	r0, r3
  401142:	4b36      	ldr	r3, [pc, #216]	; (40121c <playMusic+0x27c>)
  401144:	4798      	blx	r3
  401146:	e017      	b.n	401178 <playMusic+0x1d8>
  401148:	4b32      	ldr	r3, [pc, #200]	; (401214 <playMusic+0x274>)
  40114a:	4798      	blx	r3
  40114c:	4603      	mov	r3, r0
  40114e:	f04f 0400 	mov.w	r4, #0
  401152:	4933      	ldr	r1, [pc, #204]	; (401220 <playMusic+0x280>)
  401154:	f04f 0200 	mov.w	r2, #0
  401158:	eb13 0801 	adds.w	r8, r3, r1
  40115c:	eb44 0902 	adc.w	r9, r4, r2
  401160:	4640      	mov	r0, r8
  401162:	4649      	mov	r1, r9
  401164:	4c2c      	ldr	r4, [pc, #176]	; (401218 <playMusic+0x278>)
  401166:	4a2f      	ldr	r2, [pc, #188]	; (401224 <playMusic+0x284>)
  401168:	f04f 0300 	mov.w	r3, #0
  40116c:	47a0      	blx	r4
  40116e:	4603      	mov	r3, r0
  401170:	460c      	mov	r4, r1
  401172:	4618      	mov	r0, r3
  401174:	4b29      	ldr	r3, [pc, #164]	; (40121c <playMusic+0x27c>)
  401176:	4798      	blx	r3
					pio_clear(PIOC, BUZ_PIO_IDX_MASK);
  401178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40117c:	482e      	ldr	r0, [pc, #184]	; (401238 <playMusic+0x298>)
  40117e:	4b2f      	ldr	r3, [pc, #188]	; (40123c <playMusic+0x29c>)
  401180:	4798      	blx	r3
					delay_us(t_delay*1000.0);
  401182:	4b30      	ldr	r3, [pc, #192]	; (401244 <playMusic+0x2a4>)
  401184:	6978      	ldr	r0, [r7, #20]
  401186:	4798      	blx	r3
  401188:	4c2f      	ldr	r4, [pc, #188]	; (401248 <playMusic+0x2a8>)
  40118a:	f04f 0200 	mov.w	r2, #0
  40118e:	4b28      	ldr	r3, [pc, #160]	; (401230 <playMusic+0x290>)
  401190:	47a0      	blx	r4
  401192:	4603      	mov	r3, r0
  401194:	460c      	mov	r4, r1
  401196:	4618      	mov	r0, r3
  401198:	4621      	mov	r1, r4
  40119a:	4c2c      	ldr	r4, [pc, #176]	; (40124c <playMusic+0x2ac>)
  40119c:	f04f 0200 	mov.w	r2, #0
  4011a0:	f04f 0300 	mov.w	r3, #0
  4011a4:	47a0      	blx	r4
  4011a6:	4603      	mov	r3, r0
  4011a8:	2b00      	cmp	r3, #0
  4011aa:	d153      	bne.n	401254 <playMusic+0x2b4>
  4011ac:	4b25      	ldr	r3, [pc, #148]	; (401244 <playMusic+0x2a4>)
  4011ae:	6978      	ldr	r0, [r7, #20]
  4011b0:	4798      	blx	r3
  4011b2:	4c25      	ldr	r4, [pc, #148]	; (401248 <playMusic+0x2a8>)
  4011b4:	f04f 0200 	mov.w	r2, #0
  4011b8:	4b1d      	ldr	r3, [pc, #116]	; (401230 <playMusic+0x290>)
  4011ba:	47a0      	blx	r4
  4011bc:	4603      	mov	r3, r0
  4011be:	460c      	mov	r4, r1
  4011c0:	4619      	mov	r1, r3
  4011c2:	4622      	mov	r2, r4
  4011c4:	4b22      	ldr	r3, [pc, #136]	; (401250 <playMusic+0x2b0>)
  4011c6:	4608      	mov	r0, r1
  4011c8:	4611      	mov	r1, r2
  4011ca:	4798      	blx	r3
  4011cc:	4680      	mov	r8, r0
  4011ce:	4689      	mov	r9, r1
  4011d0:	4b10      	ldr	r3, [pc, #64]	; (401214 <playMusic+0x274>)
  4011d2:	4798      	blx	r3
  4011d4:	4603      	mov	r3, r0
  4011d6:	f04f 0400 	mov.w	r4, #0
  4011da:	fb03 f109 	mul.w	r1, r3, r9
  4011de:	fb08 f204 	mul.w	r2, r8, r4
  4011e2:	440a      	add	r2, r1
  4011e4:	fba8 3403 	umull	r3, r4, r8, r3
  4011e8:	4422      	add	r2, r4
  4011ea:	4614      	mov	r4, r2
  4011ec:	490c      	ldr	r1, [pc, #48]	; (401220 <playMusic+0x280>)
  4011ee:	f04f 0200 	mov.w	r2, #0
  4011f2:	eb13 0801 	adds.w	r8, r3, r1
  4011f6:	eb44 0902 	adc.w	r9, r4, r2
  4011fa:	4640      	mov	r0, r8
  4011fc:	4649      	mov	r1, r9
  4011fe:	4c06      	ldr	r4, [pc, #24]	; (401218 <playMusic+0x278>)
  401200:	4a08      	ldr	r2, [pc, #32]	; (401224 <playMusic+0x284>)
  401202:	f04f 0300 	mov.w	r3, #0
  401206:	47a0      	blx	r4
  401208:	4603      	mov	r3, r0
  40120a:	460c      	mov	r4, r1
  40120c:	4618      	mov	r0, r3
  40120e:	4b03      	ldr	r3, [pc, #12]	; (40121c <playMusic+0x27c>)
  401210:	4798      	blx	r3
  401212:	e037      	b.n	401284 <playMusic+0x2e4>
  401214:	00400f05 	.word	0x00400f05
  401218:	00401ced 	.word	0x00401ced
  40121c:	20400001 	.word	0x20400001
  401220:	005a83df 	.word	0x005a83df
  401224:	005a83e0 	.word	0x005a83e0
  401228:	0040164d 	.word	0x0040164d
  40122c:	0040196d 	.word	0x0040196d
  401230:	408f4000 	.word	0x408f4000
  401234:	00401c4d 	.word	0x00401c4d
  401238:	400e1200 	.word	0x400e1200
  40123c:	00400571 	.word	0x00400571
  401240:	00400555 	.word	0x00400555
  401244:	00401671 	.word	0x00401671
  401248:	00401719 	.word	0x00401719
  40124c:	00401be9 	.word	0x00401be9
  401250:	00401d1d 	.word	0x00401d1d
  401254:	4b37      	ldr	r3, [pc, #220]	; (401334 <playMusic+0x394>)
  401256:	4798      	blx	r3
  401258:	4603      	mov	r3, r0
  40125a:	f04f 0400 	mov.w	r4, #0
  40125e:	4936      	ldr	r1, [pc, #216]	; (401338 <playMusic+0x398>)
  401260:	f04f 0200 	mov.w	r2, #0
  401264:	eb13 0801 	adds.w	r8, r3, r1
  401268:	eb44 0902 	adc.w	r9, r4, r2
  40126c:	4640      	mov	r0, r8
  40126e:	4649      	mov	r1, r9
  401270:	4c32      	ldr	r4, [pc, #200]	; (40133c <playMusic+0x39c>)
  401272:	4a33      	ldr	r2, [pc, #204]	; (401340 <playMusic+0x3a0>)
  401274:	f04f 0300 	mov.w	r3, #0
  401278:	47a0      	blx	r4
  40127a:	4603      	mov	r3, r0
  40127c:	460c      	mov	r4, r1
  40127e:	4618      	mov	r0, r3
  401280:	4b30      	ldr	r3, [pc, #192]	; (401344 <playMusic+0x3a4>)
  401282:	4798      	blx	r3
			for (long j=0 ; j < (tempo[i]/t_delay ); j++){
  401284:	69bb      	ldr	r3, [r7, #24]
  401286:	3301      	adds	r3, #1
  401288:	61bb      	str	r3, [r7, #24]
  40128a:	69bb      	ldr	r3, [r7, #24]
  40128c:	ee07 3a90 	vmov	s15, r3
  401290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  401294:	69fb      	ldr	r3, [r7, #28]
  401296:	009b      	lsls	r3, r3, #2
  401298:	68fa      	ldr	r2, [r7, #12]
  40129a:	4413      	add	r3, r2
  40129c:	681b      	ldr	r3, [r3, #0]
  40129e:	ee07 3a90 	vmov	s15, r3
  4012a2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
  4012a6:	edd7 6a05 	vldr	s13, [r7, #20]
  4012aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
  4012ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4012b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4012b6:	f53f aef1 	bmi.w	40109c <playMusic+0xfc>
				}
			}
		}
		delay_us(100);
  4012ba:	4b1e      	ldr	r3, [pc, #120]	; (401334 <playMusic+0x394>)
  4012bc:	4798      	blx	r3
  4012be:	4603      	mov	r3, r0
  4012c0:	4619      	mov	r1, r3
  4012c2:	f04f 0200 	mov.w	r2, #0
  4012c6:	460b      	mov	r3, r1
  4012c8:	4614      	mov	r4, r2
  4012ca:	18db      	adds	r3, r3, r3
  4012cc:	eb44 0404 	adc.w	r4, r4, r4
  4012d0:	185b      	adds	r3, r3, r1
  4012d2:	eb44 0402 	adc.w	r4, r4, r2
  4012d6:	0166      	lsls	r6, r4, #5
  4012d8:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  4012dc:	015d      	lsls	r5, r3, #5
  4012de:	195b      	adds	r3, r3, r5
  4012e0:	eb44 0406 	adc.w	r4, r4, r6
  4012e4:	185b      	adds	r3, r3, r1
  4012e6:	eb44 0402 	adc.w	r4, r4, r2
  4012ea:	4913      	ldr	r1, [pc, #76]	; (401338 <playMusic+0x398>)
  4012ec:	f04f 0200 	mov.w	r2, #0
  4012f0:	eb13 0801 	adds.w	r8, r3, r1
  4012f4:	eb44 0902 	adc.w	r9, r4, r2
  4012f8:	4640      	mov	r0, r8
  4012fa:	4649      	mov	r1, r9
  4012fc:	4c0f      	ldr	r4, [pc, #60]	; (40133c <playMusic+0x39c>)
  4012fe:	4a10      	ldr	r2, [pc, #64]	; (401340 <playMusic+0x3a0>)
  401300:	f04f 0300 	mov.w	r3, #0
  401304:	47a0      	blx	r4
  401306:	4603      	mov	r3, r0
  401308:	460c      	mov	r4, r1
  40130a:	4618      	mov	r0, r3
  40130c:	4b0d      	ldr	r3, [pc, #52]	; (401344 <playMusic+0x3a4>)
  40130e:	4798      	blx	r3
		pio_set(PIOC, LED_PIO_IDX_MASK);      // Coloca 1 no pino LED
  401310:	f44f 7180 	mov.w	r1, #256	; 0x100
  401314:	480c      	ldr	r0, [pc, #48]	; (401348 <playMusic+0x3a8>)
  401316:	4b0d      	ldr	r3, [pc, #52]	; (40134c <playMusic+0x3ac>)
  401318:	4798      	blx	r3
	for (int i=0 ;  i< size ; i++){
  40131a:	69fb      	ldr	r3, [r7, #28]
  40131c:	3301      	adds	r3, #1
  40131e:	61fb      	str	r3, [r7, #28]
  401320:	69fa      	ldr	r2, [r7, #28]
  401322:	687b      	ldr	r3, [r7, #4]
  401324:	429a      	cmp	r2, r3
  401326:	f6ff ae45 	blt.w	400fb4 <playMusic+0x14>
	}// fim primeiro for
	
}
  40132a:	bf00      	nop
  40132c:	3724      	adds	r7, #36	; 0x24
  40132e:	46bd      	mov	sp, r7
  401330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401334:	00400f05 	.word	0x00400f05
  401338:	005a83df 	.word	0x005a83df
  40133c:	00401ced 	.word	0x00401ced
  401340:	005a83e0 	.word	0x005a83e0
  401344:	20400001 	.word	0x20400001
  401348:	400e1200 	.word	0x400e1200
  40134c:	00400555 	.word	0x00400555

00401350 <main>:

// Funcao principal chamada na inicalizacao do uC.
int main(void)
{
  401350:	b580      	push	{r7, lr}
  401352:	b084      	sub	sp, #16
  401354:	af00      	add	r7, sp, #0
	// inicializa sistema e IOs
	init();
  401356:	4b0c      	ldr	r3, [pc, #48]	; (401388 <main+0x38>)
  401358:	4798      	blx	r3
	// super loop
	// aplicacoes embarcadas não devem sair do while(1).
	
	while(1){
	
	int mario_theme_size = sizeof(mario_theme_tempo) / sizeof(int);
  40135a:	234e      	movs	r3, #78	; 0x4e
  40135c:	60fb      	str	r3, [r7, #12]
	int imperial_march_size = sizeof(imperial_march_tempo) / sizeof(int);
  40135e:	2314      	movs	r3, #20
  401360:	60bb      	str	r3, [r7, #8]
	int underworld_size = sizeof(underworld_tempo) / sizeof(int);
  401362:	2338      	movs	r3, #56	; 0x38
  401364:	607b      	str	r3, [r7, #4]

	playMusic(mario_theme_tempo, mario_theme_notes, mario_theme_size);
  401366:	68fa      	ldr	r2, [r7, #12]
  401368:	4908      	ldr	r1, [pc, #32]	; (40138c <main+0x3c>)
  40136a:	4809      	ldr	r0, [pc, #36]	; (401390 <main+0x40>)
  40136c:	4b09      	ldr	r3, [pc, #36]	; (401394 <main+0x44>)
  40136e:	4798      	blx	r3
	playMusic(imperial_march_tempo, imperial_march_notes, imperial_march_size);
  401370:	68ba      	ldr	r2, [r7, #8]
  401372:	4909      	ldr	r1, [pc, #36]	; (401398 <main+0x48>)
  401374:	4809      	ldr	r0, [pc, #36]	; (40139c <main+0x4c>)
  401376:	4b07      	ldr	r3, [pc, #28]	; (401394 <main+0x44>)
  401378:	4798      	blx	r3
	playMusic(underworld_tempo, underworld_notes, underworld_size);
  40137a:	687a      	ldr	r2, [r7, #4]
  40137c:	4908      	ldr	r1, [pc, #32]	; (4013a0 <main+0x50>)
  40137e:	4809      	ldr	r0, [pc, #36]	; (4013a4 <main+0x54>)
  401380:	4b04      	ldr	r3, [pc, #16]	; (401394 <main+0x44>)
  401382:	4798      	blx	r3
	while(1){
  401384:	e7e9      	b.n	40135a <main+0xa>
  401386:	bf00      	nop
  401388:	00400f19 	.word	0x00400f19
  40138c:	20400010 	.word	0x20400010
  401390:	20400148 	.word	0x20400148
  401394:	00400fa1 	.word	0x00400fa1
  401398:	20400440 	.word	0x20400440
  40139c:	20400490 	.word	0x20400490
  4013a0:	20400280 	.word	0x20400280
  4013a4:	20400360 	.word	0x20400360

004013a8 <__aeabi_drsub>:
  4013a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4013ac:	e002      	b.n	4013b4 <__adddf3>
  4013ae:	bf00      	nop

004013b0 <__aeabi_dsub>:
  4013b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004013b4 <__adddf3>:
  4013b4:	b530      	push	{r4, r5, lr}
  4013b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4013ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4013be:	ea94 0f05 	teq	r4, r5
  4013c2:	bf08      	it	eq
  4013c4:	ea90 0f02 	teqeq	r0, r2
  4013c8:	bf1f      	itttt	ne
  4013ca:	ea54 0c00 	orrsne.w	ip, r4, r0
  4013ce:	ea55 0c02 	orrsne.w	ip, r5, r2
  4013d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4013d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4013da:	f000 80e2 	beq.w	4015a2 <__adddf3+0x1ee>
  4013de:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4013e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4013e6:	bfb8      	it	lt
  4013e8:	426d      	neglt	r5, r5
  4013ea:	dd0c      	ble.n	401406 <__adddf3+0x52>
  4013ec:	442c      	add	r4, r5
  4013ee:	ea80 0202 	eor.w	r2, r0, r2
  4013f2:	ea81 0303 	eor.w	r3, r1, r3
  4013f6:	ea82 0000 	eor.w	r0, r2, r0
  4013fa:	ea83 0101 	eor.w	r1, r3, r1
  4013fe:	ea80 0202 	eor.w	r2, r0, r2
  401402:	ea81 0303 	eor.w	r3, r1, r3
  401406:	2d36      	cmp	r5, #54	; 0x36
  401408:	bf88      	it	hi
  40140a:	bd30      	pophi	{r4, r5, pc}
  40140c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401410:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401414:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401418:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40141c:	d002      	beq.n	401424 <__adddf3+0x70>
  40141e:	4240      	negs	r0, r0
  401420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401424:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401428:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40142c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401430:	d002      	beq.n	401438 <__adddf3+0x84>
  401432:	4252      	negs	r2, r2
  401434:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401438:	ea94 0f05 	teq	r4, r5
  40143c:	f000 80a7 	beq.w	40158e <__adddf3+0x1da>
  401440:	f1a4 0401 	sub.w	r4, r4, #1
  401444:	f1d5 0e20 	rsbs	lr, r5, #32
  401448:	db0d      	blt.n	401466 <__adddf3+0xb2>
  40144a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40144e:	fa22 f205 	lsr.w	r2, r2, r5
  401452:	1880      	adds	r0, r0, r2
  401454:	f141 0100 	adc.w	r1, r1, #0
  401458:	fa03 f20e 	lsl.w	r2, r3, lr
  40145c:	1880      	adds	r0, r0, r2
  40145e:	fa43 f305 	asr.w	r3, r3, r5
  401462:	4159      	adcs	r1, r3
  401464:	e00e      	b.n	401484 <__adddf3+0xd0>
  401466:	f1a5 0520 	sub.w	r5, r5, #32
  40146a:	f10e 0e20 	add.w	lr, lr, #32
  40146e:	2a01      	cmp	r2, #1
  401470:	fa03 fc0e 	lsl.w	ip, r3, lr
  401474:	bf28      	it	cs
  401476:	f04c 0c02 	orrcs.w	ip, ip, #2
  40147a:	fa43 f305 	asr.w	r3, r3, r5
  40147e:	18c0      	adds	r0, r0, r3
  401480:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401488:	d507      	bpl.n	40149a <__adddf3+0xe6>
  40148a:	f04f 0e00 	mov.w	lr, #0
  40148e:	f1dc 0c00 	rsbs	ip, ip, #0
  401492:	eb7e 0000 	sbcs.w	r0, lr, r0
  401496:	eb6e 0101 	sbc.w	r1, lr, r1
  40149a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40149e:	d31b      	bcc.n	4014d8 <__adddf3+0x124>
  4014a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4014a4:	d30c      	bcc.n	4014c0 <__adddf3+0x10c>
  4014a6:	0849      	lsrs	r1, r1, #1
  4014a8:	ea5f 0030 	movs.w	r0, r0, rrx
  4014ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4014b0:	f104 0401 	add.w	r4, r4, #1
  4014b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4014b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4014bc:	f080 809a 	bcs.w	4015f4 <__adddf3+0x240>
  4014c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4014c4:	bf08      	it	eq
  4014c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4014ca:	f150 0000 	adcs.w	r0, r0, #0
  4014ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4014d2:	ea41 0105 	orr.w	r1, r1, r5
  4014d6:	bd30      	pop	{r4, r5, pc}
  4014d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4014dc:	4140      	adcs	r0, r0
  4014de:	eb41 0101 	adc.w	r1, r1, r1
  4014e2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4014e6:	f1a4 0401 	sub.w	r4, r4, #1
  4014ea:	d1e9      	bne.n	4014c0 <__adddf3+0x10c>
  4014ec:	f091 0f00 	teq	r1, #0
  4014f0:	bf04      	itt	eq
  4014f2:	4601      	moveq	r1, r0
  4014f4:	2000      	moveq	r0, #0
  4014f6:	fab1 f381 	clz	r3, r1
  4014fa:	bf08      	it	eq
  4014fc:	3320      	addeq	r3, #32
  4014fe:	f1a3 030b 	sub.w	r3, r3, #11
  401502:	f1b3 0220 	subs.w	r2, r3, #32
  401506:	da0c      	bge.n	401522 <__adddf3+0x16e>
  401508:	320c      	adds	r2, #12
  40150a:	dd08      	ble.n	40151e <__adddf3+0x16a>
  40150c:	f102 0c14 	add.w	ip, r2, #20
  401510:	f1c2 020c 	rsb	r2, r2, #12
  401514:	fa01 f00c 	lsl.w	r0, r1, ip
  401518:	fa21 f102 	lsr.w	r1, r1, r2
  40151c:	e00c      	b.n	401538 <__adddf3+0x184>
  40151e:	f102 0214 	add.w	r2, r2, #20
  401522:	bfd8      	it	le
  401524:	f1c2 0c20 	rsble	ip, r2, #32
  401528:	fa01 f102 	lsl.w	r1, r1, r2
  40152c:	fa20 fc0c 	lsr.w	ip, r0, ip
  401530:	bfdc      	itt	le
  401532:	ea41 010c 	orrle.w	r1, r1, ip
  401536:	4090      	lslle	r0, r2
  401538:	1ae4      	subs	r4, r4, r3
  40153a:	bfa2      	ittt	ge
  40153c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401540:	4329      	orrge	r1, r5
  401542:	bd30      	popge	{r4, r5, pc}
  401544:	ea6f 0404 	mvn.w	r4, r4
  401548:	3c1f      	subs	r4, #31
  40154a:	da1c      	bge.n	401586 <__adddf3+0x1d2>
  40154c:	340c      	adds	r4, #12
  40154e:	dc0e      	bgt.n	40156e <__adddf3+0x1ba>
  401550:	f104 0414 	add.w	r4, r4, #20
  401554:	f1c4 0220 	rsb	r2, r4, #32
  401558:	fa20 f004 	lsr.w	r0, r0, r4
  40155c:	fa01 f302 	lsl.w	r3, r1, r2
  401560:	ea40 0003 	orr.w	r0, r0, r3
  401564:	fa21 f304 	lsr.w	r3, r1, r4
  401568:	ea45 0103 	orr.w	r1, r5, r3
  40156c:	bd30      	pop	{r4, r5, pc}
  40156e:	f1c4 040c 	rsb	r4, r4, #12
  401572:	f1c4 0220 	rsb	r2, r4, #32
  401576:	fa20 f002 	lsr.w	r0, r0, r2
  40157a:	fa01 f304 	lsl.w	r3, r1, r4
  40157e:	ea40 0003 	orr.w	r0, r0, r3
  401582:	4629      	mov	r1, r5
  401584:	bd30      	pop	{r4, r5, pc}
  401586:	fa21 f004 	lsr.w	r0, r1, r4
  40158a:	4629      	mov	r1, r5
  40158c:	bd30      	pop	{r4, r5, pc}
  40158e:	f094 0f00 	teq	r4, #0
  401592:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401596:	bf06      	itte	eq
  401598:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40159c:	3401      	addeq	r4, #1
  40159e:	3d01      	subne	r5, #1
  4015a0:	e74e      	b.n	401440 <__adddf3+0x8c>
  4015a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4015a6:	bf18      	it	ne
  4015a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4015ac:	d029      	beq.n	401602 <__adddf3+0x24e>
  4015ae:	ea94 0f05 	teq	r4, r5
  4015b2:	bf08      	it	eq
  4015b4:	ea90 0f02 	teqeq	r0, r2
  4015b8:	d005      	beq.n	4015c6 <__adddf3+0x212>
  4015ba:	ea54 0c00 	orrs.w	ip, r4, r0
  4015be:	bf04      	itt	eq
  4015c0:	4619      	moveq	r1, r3
  4015c2:	4610      	moveq	r0, r2
  4015c4:	bd30      	pop	{r4, r5, pc}
  4015c6:	ea91 0f03 	teq	r1, r3
  4015ca:	bf1e      	ittt	ne
  4015cc:	2100      	movne	r1, #0
  4015ce:	2000      	movne	r0, #0
  4015d0:	bd30      	popne	{r4, r5, pc}
  4015d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4015d6:	d105      	bne.n	4015e4 <__adddf3+0x230>
  4015d8:	0040      	lsls	r0, r0, #1
  4015da:	4149      	adcs	r1, r1
  4015dc:	bf28      	it	cs
  4015de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4015e2:	bd30      	pop	{r4, r5, pc}
  4015e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4015e8:	bf3c      	itt	cc
  4015ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4015ee:	bd30      	popcc	{r4, r5, pc}
  4015f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4015f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4015f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4015fc:	f04f 0000 	mov.w	r0, #0
  401600:	bd30      	pop	{r4, r5, pc}
  401602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401606:	bf1a      	itte	ne
  401608:	4619      	movne	r1, r3
  40160a:	4610      	movne	r0, r2
  40160c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401610:	bf1c      	itt	ne
  401612:	460b      	movne	r3, r1
  401614:	4602      	movne	r2, r0
  401616:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40161a:	bf06      	itte	eq
  40161c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401620:	ea91 0f03 	teqeq	r1, r3
  401624:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401628:	bd30      	pop	{r4, r5, pc}
  40162a:	bf00      	nop

0040162c <__aeabi_ui2d>:
  40162c:	f090 0f00 	teq	r0, #0
  401630:	bf04      	itt	eq
  401632:	2100      	moveq	r1, #0
  401634:	4770      	bxeq	lr
  401636:	b530      	push	{r4, r5, lr}
  401638:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40163c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401640:	f04f 0500 	mov.w	r5, #0
  401644:	f04f 0100 	mov.w	r1, #0
  401648:	e750      	b.n	4014ec <__adddf3+0x138>
  40164a:	bf00      	nop

0040164c <__aeabi_i2d>:
  40164c:	f090 0f00 	teq	r0, #0
  401650:	bf04      	itt	eq
  401652:	2100      	moveq	r1, #0
  401654:	4770      	bxeq	lr
  401656:	b530      	push	{r4, r5, lr}
  401658:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40165c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401660:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401664:	bf48      	it	mi
  401666:	4240      	negmi	r0, r0
  401668:	f04f 0100 	mov.w	r1, #0
  40166c:	e73e      	b.n	4014ec <__adddf3+0x138>
  40166e:	bf00      	nop

00401670 <__aeabi_f2d>:
  401670:	0042      	lsls	r2, r0, #1
  401672:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401676:	ea4f 0131 	mov.w	r1, r1, rrx
  40167a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40167e:	bf1f      	itttt	ne
  401680:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401684:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401688:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40168c:	4770      	bxne	lr
  40168e:	f092 0f00 	teq	r2, #0
  401692:	bf14      	ite	ne
  401694:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401698:	4770      	bxeq	lr
  40169a:	b530      	push	{r4, r5, lr}
  40169c:	f44f 7460 	mov.w	r4, #896	; 0x380
  4016a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4016a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4016a8:	e720      	b.n	4014ec <__adddf3+0x138>
  4016aa:	bf00      	nop

004016ac <__aeabi_ul2d>:
  4016ac:	ea50 0201 	orrs.w	r2, r0, r1
  4016b0:	bf08      	it	eq
  4016b2:	4770      	bxeq	lr
  4016b4:	b530      	push	{r4, r5, lr}
  4016b6:	f04f 0500 	mov.w	r5, #0
  4016ba:	e00a      	b.n	4016d2 <__aeabi_l2d+0x16>

004016bc <__aeabi_l2d>:
  4016bc:	ea50 0201 	orrs.w	r2, r0, r1
  4016c0:	bf08      	it	eq
  4016c2:	4770      	bxeq	lr
  4016c4:	b530      	push	{r4, r5, lr}
  4016c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4016ca:	d502      	bpl.n	4016d2 <__aeabi_l2d+0x16>
  4016cc:	4240      	negs	r0, r0
  4016ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4016d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4016d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4016da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4016de:	f43f aedc 	beq.w	40149a <__adddf3+0xe6>
  4016e2:	f04f 0203 	mov.w	r2, #3
  4016e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4016ea:	bf18      	it	ne
  4016ec:	3203      	addne	r2, #3
  4016ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4016f2:	bf18      	it	ne
  4016f4:	3203      	addne	r2, #3
  4016f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4016fa:	f1c2 0320 	rsb	r3, r2, #32
  4016fe:	fa00 fc03 	lsl.w	ip, r0, r3
  401702:	fa20 f002 	lsr.w	r0, r0, r2
  401706:	fa01 fe03 	lsl.w	lr, r1, r3
  40170a:	ea40 000e 	orr.w	r0, r0, lr
  40170e:	fa21 f102 	lsr.w	r1, r1, r2
  401712:	4414      	add	r4, r2
  401714:	e6c1      	b.n	40149a <__adddf3+0xe6>
  401716:	bf00      	nop

00401718 <__aeabi_dmul>:
  401718:	b570      	push	{r4, r5, r6, lr}
  40171a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40171e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401726:	bf1d      	ittte	ne
  401728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40172c:	ea94 0f0c 	teqne	r4, ip
  401730:	ea95 0f0c 	teqne	r5, ip
  401734:	f000 f8de 	bleq	4018f4 <__aeabi_dmul+0x1dc>
  401738:	442c      	add	r4, r5
  40173a:	ea81 0603 	eor.w	r6, r1, r3
  40173e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40174a:	bf18      	it	ne
  40174c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401758:	d038      	beq.n	4017cc <__aeabi_dmul+0xb4>
  40175a:	fba0 ce02 	umull	ip, lr, r0, r2
  40175e:	f04f 0500 	mov.w	r5, #0
  401762:	fbe1 e502 	umlal	lr, r5, r1, r2
  401766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40176a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40176e:	f04f 0600 	mov.w	r6, #0
  401772:	fbe1 5603 	umlal	r5, r6, r1, r3
  401776:	f09c 0f00 	teq	ip, #0
  40177a:	bf18      	it	ne
  40177c:	f04e 0e01 	orrne.w	lr, lr, #1
  401780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40178c:	d204      	bcs.n	401798 <__aeabi_dmul+0x80>
  40178e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401792:	416d      	adcs	r5, r5
  401794:	eb46 0606 	adc.w	r6, r6, r6
  401798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40179c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4017a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4017a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4017a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4017ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4017b0:	bf88      	it	hi
  4017b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4017b6:	d81e      	bhi.n	4017f6 <__aeabi_dmul+0xde>
  4017b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4017bc:	bf08      	it	eq
  4017be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4017c2:	f150 0000 	adcs.w	r0, r0, #0
  4017c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4017ca:	bd70      	pop	{r4, r5, r6, pc}
  4017cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4017d0:	ea46 0101 	orr.w	r1, r6, r1
  4017d4:	ea40 0002 	orr.w	r0, r0, r2
  4017d8:	ea81 0103 	eor.w	r1, r1, r3
  4017dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4017e0:	bfc2      	ittt	gt
  4017e2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4017e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4017ea:	bd70      	popgt	{r4, r5, r6, pc}
  4017ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4017f0:	f04f 0e00 	mov.w	lr, #0
  4017f4:	3c01      	subs	r4, #1
  4017f6:	f300 80ab 	bgt.w	401950 <__aeabi_dmul+0x238>
  4017fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4017fe:	bfde      	ittt	le
  401800:	2000      	movle	r0, #0
  401802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401806:	bd70      	pople	{r4, r5, r6, pc}
  401808:	f1c4 0400 	rsb	r4, r4, #0
  40180c:	3c20      	subs	r4, #32
  40180e:	da35      	bge.n	40187c <__aeabi_dmul+0x164>
  401810:	340c      	adds	r4, #12
  401812:	dc1b      	bgt.n	40184c <__aeabi_dmul+0x134>
  401814:	f104 0414 	add.w	r4, r4, #20
  401818:	f1c4 0520 	rsb	r5, r4, #32
  40181c:	fa00 f305 	lsl.w	r3, r0, r5
  401820:	fa20 f004 	lsr.w	r0, r0, r4
  401824:	fa01 f205 	lsl.w	r2, r1, r5
  401828:	ea40 0002 	orr.w	r0, r0, r2
  40182c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401838:	fa21 f604 	lsr.w	r6, r1, r4
  40183c:	eb42 0106 	adc.w	r1, r2, r6
  401840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401844:	bf08      	it	eq
  401846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40184a:	bd70      	pop	{r4, r5, r6, pc}
  40184c:	f1c4 040c 	rsb	r4, r4, #12
  401850:	f1c4 0520 	rsb	r5, r4, #32
  401854:	fa00 f304 	lsl.w	r3, r0, r4
  401858:	fa20 f005 	lsr.w	r0, r0, r5
  40185c:	fa01 f204 	lsl.w	r2, r1, r4
  401860:	ea40 0002 	orr.w	r0, r0, r2
  401864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40186c:	f141 0100 	adc.w	r1, r1, #0
  401870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401874:	bf08      	it	eq
  401876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40187a:	bd70      	pop	{r4, r5, r6, pc}
  40187c:	f1c4 0520 	rsb	r5, r4, #32
  401880:	fa00 f205 	lsl.w	r2, r0, r5
  401884:	ea4e 0e02 	orr.w	lr, lr, r2
  401888:	fa20 f304 	lsr.w	r3, r0, r4
  40188c:	fa01 f205 	lsl.w	r2, r1, r5
  401890:	ea43 0302 	orr.w	r3, r3, r2
  401894:	fa21 f004 	lsr.w	r0, r1, r4
  401898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40189c:	fa21 f204 	lsr.w	r2, r1, r4
  4018a0:	ea20 0002 	bic.w	r0, r0, r2
  4018a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4018a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4018ac:	bf08      	it	eq
  4018ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4018b2:	bd70      	pop	{r4, r5, r6, pc}
  4018b4:	f094 0f00 	teq	r4, #0
  4018b8:	d10f      	bne.n	4018da <__aeabi_dmul+0x1c2>
  4018ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4018be:	0040      	lsls	r0, r0, #1
  4018c0:	eb41 0101 	adc.w	r1, r1, r1
  4018c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4018c8:	bf08      	it	eq
  4018ca:	3c01      	subeq	r4, #1
  4018cc:	d0f7      	beq.n	4018be <__aeabi_dmul+0x1a6>
  4018ce:	ea41 0106 	orr.w	r1, r1, r6
  4018d2:	f095 0f00 	teq	r5, #0
  4018d6:	bf18      	it	ne
  4018d8:	4770      	bxne	lr
  4018da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4018de:	0052      	lsls	r2, r2, #1
  4018e0:	eb43 0303 	adc.w	r3, r3, r3
  4018e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4018e8:	bf08      	it	eq
  4018ea:	3d01      	subeq	r5, #1
  4018ec:	d0f7      	beq.n	4018de <__aeabi_dmul+0x1c6>
  4018ee:	ea43 0306 	orr.w	r3, r3, r6
  4018f2:	4770      	bx	lr
  4018f4:	ea94 0f0c 	teq	r4, ip
  4018f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4018fc:	bf18      	it	ne
  4018fe:	ea95 0f0c 	teqne	r5, ip
  401902:	d00c      	beq.n	40191e <__aeabi_dmul+0x206>
  401904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401908:	bf18      	it	ne
  40190a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40190e:	d1d1      	bne.n	4018b4 <__aeabi_dmul+0x19c>
  401910:	ea81 0103 	eor.w	r1, r1, r3
  401914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401918:	f04f 0000 	mov.w	r0, #0
  40191c:	bd70      	pop	{r4, r5, r6, pc}
  40191e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401922:	bf06      	itte	eq
  401924:	4610      	moveq	r0, r2
  401926:	4619      	moveq	r1, r3
  401928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40192c:	d019      	beq.n	401962 <__aeabi_dmul+0x24a>
  40192e:	ea94 0f0c 	teq	r4, ip
  401932:	d102      	bne.n	40193a <__aeabi_dmul+0x222>
  401934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401938:	d113      	bne.n	401962 <__aeabi_dmul+0x24a>
  40193a:	ea95 0f0c 	teq	r5, ip
  40193e:	d105      	bne.n	40194c <__aeabi_dmul+0x234>
  401940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401944:	bf1c      	itt	ne
  401946:	4610      	movne	r0, r2
  401948:	4619      	movne	r1, r3
  40194a:	d10a      	bne.n	401962 <__aeabi_dmul+0x24a>
  40194c:	ea81 0103 	eor.w	r1, r1, r3
  401950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40195c:	f04f 0000 	mov.w	r0, #0
  401960:	bd70      	pop	{r4, r5, r6, pc}
  401962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40196a:	bd70      	pop	{r4, r5, r6, pc}

0040196c <__aeabi_ddiv>:
  40196c:	b570      	push	{r4, r5, r6, lr}
  40196e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40197a:	bf1d      	ittte	ne
  40197c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401980:	ea94 0f0c 	teqne	r4, ip
  401984:	ea95 0f0c 	teqne	r5, ip
  401988:	f000 f8a7 	bleq	401ada <__aeabi_ddiv+0x16e>
  40198c:	eba4 0405 	sub.w	r4, r4, r5
  401990:	ea81 0e03 	eor.w	lr, r1, r3
  401994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401998:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40199c:	f000 8088 	beq.w	401ab0 <__aeabi_ddiv+0x144>
  4019a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4019a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4019a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4019ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4019b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4019b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4019b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4019bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4019c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4019c4:	429d      	cmp	r5, r3
  4019c6:	bf08      	it	eq
  4019c8:	4296      	cmpeq	r6, r2
  4019ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4019ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4019d2:	d202      	bcs.n	4019da <__aeabi_ddiv+0x6e>
  4019d4:	085b      	lsrs	r3, r3, #1
  4019d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4019da:	1ab6      	subs	r6, r6, r2
  4019dc:	eb65 0503 	sbc.w	r5, r5, r3
  4019e0:	085b      	lsrs	r3, r3, #1
  4019e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4019e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4019ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4019ee:	ebb6 0e02 	subs.w	lr, r6, r2
  4019f2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4019f6:	bf22      	ittt	cs
  4019f8:	1ab6      	subcs	r6, r6, r2
  4019fa:	4675      	movcs	r5, lr
  4019fc:	ea40 000c 	orrcs.w	r0, r0, ip
  401a00:	085b      	lsrs	r3, r3, #1
  401a02:	ea4f 0232 	mov.w	r2, r2, rrx
  401a06:	ebb6 0e02 	subs.w	lr, r6, r2
  401a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
  401a0e:	bf22      	ittt	cs
  401a10:	1ab6      	subcs	r6, r6, r2
  401a12:	4675      	movcs	r5, lr
  401a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  401a18:	085b      	lsrs	r3, r3, #1
  401a1a:	ea4f 0232 	mov.w	r2, r2, rrx
  401a1e:	ebb6 0e02 	subs.w	lr, r6, r2
  401a22:	eb75 0e03 	sbcs.w	lr, r5, r3
  401a26:	bf22      	ittt	cs
  401a28:	1ab6      	subcs	r6, r6, r2
  401a2a:	4675      	movcs	r5, lr
  401a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  401a30:	085b      	lsrs	r3, r3, #1
  401a32:	ea4f 0232 	mov.w	r2, r2, rrx
  401a36:	ebb6 0e02 	subs.w	lr, r6, r2
  401a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
  401a3e:	bf22      	ittt	cs
  401a40:	1ab6      	subcs	r6, r6, r2
  401a42:	4675      	movcs	r5, lr
  401a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401a48:	ea55 0e06 	orrs.w	lr, r5, r6
  401a4c:	d018      	beq.n	401a80 <__aeabi_ddiv+0x114>
  401a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  401a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  401a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  401a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  401a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  401a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401a6a:	d1c0      	bne.n	4019ee <__aeabi_ddiv+0x82>
  401a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401a70:	d10b      	bne.n	401a8a <__aeabi_ddiv+0x11e>
  401a72:	ea41 0100 	orr.w	r1, r1, r0
  401a76:	f04f 0000 	mov.w	r0, #0
  401a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  401a7e:	e7b6      	b.n	4019ee <__aeabi_ddiv+0x82>
  401a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401a84:	bf04      	itt	eq
  401a86:	4301      	orreq	r1, r0
  401a88:	2000      	moveq	r0, #0
  401a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401a8e:	bf88      	it	hi
  401a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401a94:	f63f aeaf 	bhi.w	4017f6 <__aeabi_dmul+0xde>
  401a98:	ebb5 0c03 	subs.w	ip, r5, r3
  401a9c:	bf04      	itt	eq
  401a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
  401aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401aa6:	f150 0000 	adcs.w	r0, r0, #0
  401aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401aae:	bd70      	pop	{r4, r5, r6, pc}
  401ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  401abc:	bfc2      	ittt	gt
  401abe:	ebd4 050c 	rsbsgt	r5, r4, ip
  401ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401ac6:	bd70      	popgt	{r4, r5, r6, pc}
  401ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401acc:	f04f 0e00 	mov.w	lr, #0
  401ad0:	3c01      	subs	r4, #1
  401ad2:	e690      	b.n	4017f6 <__aeabi_dmul+0xde>
  401ad4:	ea45 0e06 	orr.w	lr, r5, r6
  401ad8:	e68d      	b.n	4017f6 <__aeabi_dmul+0xde>
  401ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401ade:	ea94 0f0c 	teq	r4, ip
  401ae2:	bf08      	it	eq
  401ae4:	ea95 0f0c 	teqeq	r5, ip
  401ae8:	f43f af3b 	beq.w	401962 <__aeabi_dmul+0x24a>
  401aec:	ea94 0f0c 	teq	r4, ip
  401af0:	d10a      	bne.n	401b08 <__aeabi_ddiv+0x19c>
  401af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401af6:	f47f af34 	bne.w	401962 <__aeabi_dmul+0x24a>
  401afa:	ea95 0f0c 	teq	r5, ip
  401afe:	f47f af25 	bne.w	40194c <__aeabi_dmul+0x234>
  401b02:	4610      	mov	r0, r2
  401b04:	4619      	mov	r1, r3
  401b06:	e72c      	b.n	401962 <__aeabi_dmul+0x24a>
  401b08:	ea95 0f0c 	teq	r5, ip
  401b0c:	d106      	bne.n	401b1c <__aeabi_ddiv+0x1b0>
  401b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401b12:	f43f aefd 	beq.w	401910 <__aeabi_dmul+0x1f8>
  401b16:	4610      	mov	r0, r2
  401b18:	4619      	mov	r1, r3
  401b1a:	e722      	b.n	401962 <__aeabi_dmul+0x24a>
  401b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401b20:	bf18      	it	ne
  401b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401b26:	f47f aec5 	bne.w	4018b4 <__aeabi_dmul+0x19c>
  401b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  401b2e:	f47f af0d 	bne.w	40194c <__aeabi_dmul+0x234>
  401b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  401b36:	f47f aeeb 	bne.w	401910 <__aeabi_dmul+0x1f8>
  401b3a:	e712      	b.n	401962 <__aeabi_dmul+0x24a>

00401b3c <__gedf2>:
  401b3c:	f04f 3cff 	mov.w	ip, #4294967295
  401b40:	e006      	b.n	401b50 <__cmpdf2+0x4>
  401b42:	bf00      	nop

00401b44 <__ledf2>:
  401b44:	f04f 0c01 	mov.w	ip, #1
  401b48:	e002      	b.n	401b50 <__cmpdf2+0x4>
  401b4a:	bf00      	nop

00401b4c <__cmpdf2>:
  401b4c:	f04f 0c01 	mov.w	ip, #1
  401b50:	f84d cd04 	str.w	ip, [sp, #-4]!
  401b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  401b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  401b60:	bf18      	it	ne
  401b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  401b66:	d01b      	beq.n	401ba0 <__cmpdf2+0x54>
  401b68:	b001      	add	sp, #4
  401b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  401b6e:	bf0c      	ite	eq
  401b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  401b74:	ea91 0f03 	teqne	r1, r3
  401b78:	bf02      	ittt	eq
  401b7a:	ea90 0f02 	teqeq	r0, r2
  401b7e:	2000      	moveq	r0, #0
  401b80:	4770      	bxeq	lr
  401b82:	f110 0f00 	cmn.w	r0, #0
  401b86:	ea91 0f03 	teq	r1, r3
  401b8a:	bf58      	it	pl
  401b8c:	4299      	cmppl	r1, r3
  401b8e:	bf08      	it	eq
  401b90:	4290      	cmpeq	r0, r2
  401b92:	bf2c      	ite	cs
  401b94:	17d8      	asrcs	r0, r3, #31
  401b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  401b9a:	f040 0001 	orr.w	r0, r0, #1
  401b9e:	4770      	bx	lr
  401ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  401ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401ba8:	d102      	bne.n	401bb0 <__cmpdf2+0x64>
  401baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  401bae:	d107      	bne.n	401bc0 <__cmpdf2+0x74>
  401bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  401bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401bb8:	d1d6      	bne.n	401b68 <__cmpdf2+0x1c>
  401bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  401bbe:	d0d3      	beq.n	401b68 <__cmpdf2+0x1c>
  401bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
  401bc4:	4770      	bx	lr
  401bc6:	bf00      	nop

00401bc8 <__aeabi_cdrcmple>:
  401bc8:	4684      	mov	ip, r0
  401bca:	4610      	mov	r0, r2
  401bcc:	4662      	mov	r2, ip
  401bce:	468c      	mov	ip, r1
  401bd0:	4619      	mov	r1, r3
  401bd2:	4663      	mov	r3, ip
  401bd4:	e000      	b.n	401bd8 <__aeabi_cdcmpeq>
  401bd6:	bf00      	nop

00401bd8 <__aeabi_cdcmpeq>:
  401bd8:	b501      	push	{r0, lr}
  401bda:	f7ff ffb7 	bl	401b4c <__cmpdf2>
  401bde:	2800      	cmp	r0, #0
  401be0:	bf48      	it	mi
  401be2:	f110 0f00 	cmnmi.w	r0, #0
  401be6:	bd01      	pop	{r0, pc}

00401be8 <__aeabi_dcmpeq>:
  401be8:	f84d ed08 	str.w	lr, [sp, #-8]!
  401bec:	f7ff fff4 	bl	401bd8 <__aeabi_cdcmpeq>
  401bf0:	bf0c      	ite	eq
  401bf2:	2001      	moveq	r0, #1
  401bf4:	2000      	movne	r0, #0
  401bf6:	f85d fb08 	ldr.w	pc, [sp], #8
  401bfa:	bf00      	nop

00401bfc <__aeabi_dcmplt>:
  401bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
  401c00:	f7ff ffea 	bl	401bd8 <__aeabi_cdcmpeq>
  401c04:	bf34      	ite	cc
  401c06:	2001      	movcc	r0, #1
  401c08:	2000      	movcs	r0, #0
  401c0a:	f85d fb08 	ldr.w	pc, [sp], #8
  401c0e:	bf00      	nop

00401c10 <__aeabi_dcmple>:
  401c10:	f84d ed08 	str.w	lr, [sp, #-8]!
  401c14:	f7ff ffe0 	bl	401bd8 <__aeabi_cdcmpeq>
  401c18:	bf94      	ite	ls
  401c1a:	2001      	movls	r0, #1
  401c1c:	2000      	movhi	r0, #0
  401c1e:	f85d fb08 	ldr.w	pc, [sp], #8
  401c22:	bf00      	nop

00401c24 <__aeabi_dcmpge>:
  401c24:	f84d ed08 	str.w	lr, [sp, #-8]!
  401c28:	f7ff ffce 	bl	401bc8 <__aeabi_cdrcmple>
  401c2c:	bf94      	ite	ls
  401c2e:	2001      	movls	r0, #1
  401c30:	2000      	movhi	r0, #0
  401c32:	f85d fb08 	ldr.w	pc, [sp], #8
  401c36:	bf00      	nop

00401c38 <__aeabi_dcmpgt>:
  401c38:	f84d ed08 	str.w	lr, [sp, #-8]!
  401c3c:	f7ff ffc4 	bl	401bc8 <__aeabi_cdrcmple>
  401c40:	bf34      	ite	cc
  401c42:	2001      	movcc	r0, #1
  401c44:	2000      	movcs	r0, #0
  401c46:	f85d fb08 	ldr.w	pc, [sp], #8
  401c4a:	bf00      	nop

00401c4c <__aeabi_d2f>:
  401c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  401c50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  401c54:	bf24      	itt	cs
  401c56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  401c5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  401c5e:	d90d      	bls.n	401c7c <__aeabi_d2f+0x30>
  401c60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  401c64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  401c68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  401c6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  401c70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  401c74:	bf08      	it	eq
  401c76:	f020 0001 	biceq.w	r0, r0, #1
  401c7a:	4770      	bx	lr
  401c7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  401c80:	d121      	bne.n	401cc6 <__aeabi_d2f+0x7a>
  401c82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  401c86:	bfbc      	itt	lt
  401c88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  401c8c:	4770      	bxlt	lr
  401c8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401c92:	ea4f 5252 	mov.w	r2, r2, lsr #21
  401c96:	f1c2 0218 	rsb	r2, r2, #24
  401c9a:	f1c2 0c20 	rsb	ip, r2, #32
  401c9e:	fa10 f30c 	lsls.w	r3, r0, ip
  401ca2:	fa20 f002 	lsr.w	r0, r0, r2
  401ca6:	bf18      	it	ne
  401ca8:	f040 0001 	orrne.w	r0, r0, #1
  401cac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  401cb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  401cb4:	fa03 fc0c 	lsl.w	ip, r3, ip
  401cb8:	ea40 000c 	orr.w	r0, r0, ip
  401cbc:	fa23 f302 	lsr.w	r3, r3, r2
  401cc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  401cc4:	e7cc      	b.n	401c60 <__aeabi_d2f+0x14>
  401cc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  401cca:	d107      	bne.n	401cdc <__aeabi_d2f+0x90>
  401ccc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  401cd0:	bf1e      	ittt	ne
  401cd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  401cd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  401cda:	4770      	bxne	lr
  401cdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  401ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  401ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  401ce8:	4770      	bx	lr
  401cea:	bf00      	nop

00401cec <__aeabi_uldivmod>:
  401cec:	b953      	cbnz	r3, 401d04 <__aeabi_uldivmod+0x18>
  401cee:	b94a      	cbnz	r2, 401d04 <__aeabi_uldivmod+0x18>
  401cf0:	2900      	cmp	r1, #0
  401cf2:	bf08      	it	eq
  401cf4:	2800      	cmpeq	r0, #0
  401cf6:	bf1c      	itt	ne
  401cf8:	f04f 31ff 	movne.w	r1, #4294967295
  401cfc:	f04f 30ff 	movne.w	r0, #4294967295
  401d00:	f000 b99e 	b.w	402040 <__aeabi_idiv0>
  401d04:	f1ad 0c08 	sub.w	ip, sp, #8
  401d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401d0c:	f000 f82a 	bl	401d64 <__udivmoddi4>
  401d10:	f8dd e004 	ldr.w	lr, [sp, #4]
  401d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401d18:	b004      	add	sp, #16
  401d1a:	4770      	bx	lr

00401d1c <__aeabi_d2ulz>:
  401d1c:	b5d0      	push	{r4, r6, r7, lr}
  401d1e:	2200      	movs	r2, #0
  401d20:	4b0e      	ldr	r3, [pc, #56]	; (401d5c <__aeabi_d2ulz+0x40>)
  401d22:	4606      	mov	r6, r0
  401d24:	460f      	mov	r7, r1
  401d26:	f7ff fcf7 	bl	401718 <__aeabi_dmul>
  401d2a:	f000 f98b 	bl	402044 <__aeabi_d2uiz>
  401d2e:	4604      	mov	r4, r0
  401d30:	f7ff fc7c 	bl	40162c <__aeabi_ui2d>
  401d34:	2200      	movs	r2, #0
  401d36:	4b0a      	ldr	r3, [pc, #40]	; (401d60 <__aeabi_d2ulz+0x44>)
  401d38:	f7ff fcee 	bl	401718 <__aeabi_dmul>
  401d3c:	4602      	mov	r2, r0
  401d3e:	460b      	mov	r3, r1
  401d40:	4630      	mov	r0, r6
  401d42:	4639      	mov	r1, r7
  401d44:	f7ff fb34 	bl	4013b0 <__aeabi_dsub>
  401d48:	f000 f97c 	bl	402044 <__aeabi_d2uiz>
  401d4c:	4623      	mov	r3, r4
  401d4e:	2200      	movs	r2, #0
  401d50:	ea42 0200 	orr.w	r2, r2, r0
  401d54:	4610      	mov	r0, r2
  401d56:	4619      	mov	r1, r3
  401d58:	bdd0      	pop	{r4, r6, r7, pc}
  401d5a:	bf00      	nop
  401d5c:	3df00000 	.word	0x3df00000
  401d60:	41f00000 	.word	0x41f00000

00401d64 <__udivmoddi4>:
  401d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401d68:	468c      	mov	ip, r1
  401d6a:	460d      	mov	r5, r1
  401d6c:	4604      	mov	r4, r0
  401d6e:	9e08      	ldr	r6, [sp, #32]
  401d70:	2b00      	cmp	r3, #0
  401d72:	d151      	bne.n	401e18 <__udivmoddi4+0xb4>
  401d74:	428a      	cmp	r2, r1
  401d76:	4617      	mov	r7, r2
  401d78:	d96d      	bls.n	401e56 <__udivmoddi4+0xf2>
  401d7a:	fab2 fe82 	clz	lr, r2
  401d7e:	f1be 0f00 	cmp.w	lr, #0
  401d82:	d00b      	beq.n	401d9c <__udivmoddi4+0x38>
  401d84:	f1ce 0c20 	rsb	ip, lr, #32
  401d88:	fa01 f50e 	lsl.w	r5, r1, lr
  401d8c:	fa20 fc0c 	lsr.w	ip, r0, ip
  401d90:	fa02 f70e 	lsl.w	r7, r2, lr
  401d94:	ea4c 0c05 	orr.w	ip, ip, r5
  401d98:	fa00 f40e 	lsl.w	r4, r0, lr
  401d9c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401da0:	0c25      	lsrs	r5, r4, #16
  401da2:	fbbc f8fa 	udiv	r8, ip, sl
  401da6:	fa1f f987 	uxth.w	r9, r7
  401daa:	fb0a cc18 	mls	ip, sl, r8, ip
  401dae:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401db2:	fb08 f309 	mul.w	r3, r8, r9
  401db6:	42ab      	cmp	r3, r5
  401db8:	d90a      	bls.n	401dd0 <__udivmoddi4+0x6c>
  401dba:	19ed      	adds	r5, r5, r7
  401dbc:	f108 32ff 	add.w	r2, r8, #4294967295
  401dc0:	f080 8123 	bcs.w	40200a <__udivmoddi4+0x2a6>
  401dc4:	42ab      	cmp	r3, r5
  401dc6:	f240 8120 	bls.w	40200a <__udivmoddi4+0x2a6>
  401dca:	f1a8 0802 	sub.w	r8, r8, #2
  401dce:	443d      	add	r5, r7
  401dd0:	1aed      	subs	r5, r5, r3
  401dd2:	b2a4      	uxth	r4, r4
  401dd4:	fbb5 f0fa 	udiv	r0, r5, sl
  401dd8:	fb0a 5510 	mls	r5, sl, r0, r5
  401ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401de0:	fb00 f909 	mul.w	r9, r0, r9
  401de4:	45a1      	cmp	r9, r4
  401de6:	d909      	bls.n	401dfc <__udivmoddi4+0x98>
  401de8:	19e4      	adds	r4, r4, r7
  401dea:	f100 33ff 	add.w	r3, r0, #4294967295
  401dee:	f080 810a 	bcs.w	402006 <__udivmoddi4+0x2a2>
  401df2:	45a1      	cmp	r9, r4
  401df4:	f240 8107 	bls.w	402006 <__udivmoddi4+0x2a2>
  401df8:	3802      	subs	r0, #2
  401dfa:	443c      	add	r4, r7
  401dfc:	eba4 0409 	sub.w	r4, r4, r9
  401e00:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401e04:	2100      	movs	r1, #0
  401e06:	2e00      	cmp	r6, #0
  401e08:	d061      	beq.n	401ece <__udivmoddi4+0x16a>
  401e0a:	fa24 f40e 	lsr.w	r4, r4, lr
  401e0e:	2300      	movs	r3, #0
  401e10:	6034      	str	r4, [r6, #0]
  401e12:	6073      	str	r3, [r6, #4]
  401e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e18:	428b      	cmp	r3, r1
  401e1a:	d907      	bls.n	401e2c <__udivmoddi4+0xc8>
  401e1c:	2e00      	cmp	r6, #0
  401e1e:	d054      	beq.n	401eca <__udivmoddi4+0x166>
  401e20:	2100      	movs	r1, #0
  401e22:	e886 0021 	stmia.w	r6, {r0, r5}
  401e26:	4608      	mov	r0, r1
  401e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e2c:	fab3 f183 	clz	r1, r3
  401e30:	2900      	cmp	r1, #0
  401e32:	f040 808e 	bne.w	401f52 <__udivmoddi4+0x1ee>
  401e36:	42ab      	cmp	r3, r5
  401e38:	d302      	bcc.n	401e40 <__udivmoddi4+0xdc>
  401e3a:	4282      	cmp	r2, r0
  401e3c:	f200 80fa 	bhi.w	402034 <__udivmoddi4+0x2d0>
  401e40:	1a84      	subs	r4, r0, r2
  401e42:	eb65 0503 	sbc.w	r5, r5, r3
  401e46:	2001      	movs	r0, #1
  401e48:	46ac      	mov	ip, r5
  401e4a:	2e00      	cmp	r6, #0
  401e4c:	d03f      	beq.n	401ece <__udivmoddi4+0x16a>
  401e4e:	e886 1010 	stmia.w	r6, {r4, ip}
  401e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e56:	b912      	cbnz	r2, 401e5e <__udivmoddi4+0xfa>
  401e58:	2701      	movs	r7, #1
  401e5a:	fbb7 f7f2 	udiv	r7, r7, r2
  401e5e:	fab7 fe87 	clz	lr, r7
  401e62:	f1be 0f00 	cmp.w	lr, #0
  401e66:	d134      	bne.n	401ed2 <__udivmoddi4+0x16e>
  401e68:	1beb      	subs	r3, r5, r7
  401e6a:	0c3a      	lsrs	r2, r7, #16
  401e6c:	fa1f fc87 	uxth.w	ip, r7
  401e70:	2101      	movs	r1, #1
  401e72:	fbb3 f8f2 	udiv	r8, r3, r2
  401e76:	0c25      	lsrs	r5, r4, #16
  401e78:	fb02 3318 	mls	r3, r2, r8, r3
  401e7c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401e80:	fb0c f308 	mul.w	r3, ip, r8
  401e84:	42ab      	cmp	r3, r5
  401e86:	d907      	bls.n	401e98 <__udivmoddi4+0x134>
  401e88:	19ed      	adds	r5, r5, r7
  401e8a:	f108 30ff 	add.w	r0, r8, #4294967295
  401e8e:	d202      	bcs.n	401e96 <__udivmoddi4+0x132>
  401e90:	42ab      	cmp	r3, r5
  401e92:	f200 80d1 	bhi.w	402038 <__udivmoddi4+0x2d4>
  401e96:	4680      	mov	r8, r0
  401e98:	1aed      	subs	r5, r5, r3
  401e9a:	b2a3      	uxth	r3, r4
  401e9c:	fbb5 f0f2 	udiv	r0, r5, r2
  401ea0:	fb02 5510 	mls	r5, r2, r0, r5
  401ea4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401ea8:	fb0c fc00 	mul.w	ip, ip, r0
  401eac:	45a4      	cmp	ip, r4
  401eae:	d907      	bls.n	401ec0 <__udivmoddi4+0x15c>
  401eb0:	19e4      	adds	r4, r4, r7
  401eb2:	f100 33ff 	add.w	r3, r0, #4294967295
  401eb6:	d202      	bcs.n	401ebe <__udivmoddi4+0x15a>
  401eb8:	45a4      	cmp	ip, r4
  401eba:	f200 80b8 	bhi.w	40202e <__udivmoddi4+0x2ca>
  401ebe:	4618      	mov	r0, r3
  401ec0:	eba4 040c 	sub.w	r4, r4, ip
  401ec4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401ec8:	e79d      	b.n	401e06 <__udivmoddi4+0xa2>
  401eca:	4631      	mov	r1, r6
  401ecc:	4630      	mov	r0, r6
  401ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ed2:	f1ce 0420 	rsb	r4, lr, #32
  401ed6:	fa05 f30e 	lsl.w	r3, r5, lr
  401eda:	fa07 f70e 	lsl.w	r7, r7, lr
  401ede:	fa20 f804 	lsr.w	r8, r0, r4
  401ee2:	0c3a      	lsrs	r2, r7, #16
  401ee4:	fa25 f404 	lsr.w	r4, r5, r4
  401ee8:	ea48 0803 	orr.w	r8, r8, r3
  401eec:	fbb4 f1f2 	udiv	r1, r4, r2
  401ef0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401ef4:	fb02 4411 	mls	r4, r2, r1, r4
  401ef8:	fa1f fc87 	uxth.w	ip, r7
  401efc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401f00:	fb01 f30c 	mul.w	r3, r1, ip
  401f04:	42ab      	cmp	r3, r5
  401f06:	fa00 f40e 	lsl.w	r4, r0, lr
  401f0a:	d909      	bls.n	401f20 <__udivmoddi4+0x1bc>
  401f0c:	19ed      	adds	r5, r5, r7
  401f0e:	f101 30ff 	add.w	r0, r1, #4294967295
  401f12:	f080 808a 	bcs.w	40202a <__udivmoddi4+0x2c6>
  401f16:	42ab      	cmp	r3, r5
  401f18:	f240 8087 	bls.w	40202a <__udivmoddi4+0x2c6>
  401f1c:	3902      	subs	r1, #2
  401f1e:	443d      	add	r5, r7
  401f20:	1aeb      	subs	r3, r5, r3
  401f22:	fa1f f588 	uxth.w	r5, r8
  401f26:	fbb3 f0f2 	udiv	r0, r3, r2
  401f2a:	fb02 3310 	mls	r3, r2, r0, r3
  401f2e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401f32:	fb00 f30c 	mul.w	r3, r0, ip
  401f36:	42ab      	cmp	r3, r5
  401f38:	d907      	bls.n	401f4a <__udivmoddi4+0x1e6>
  401f3a:	19ed      	adds	r5, r5, r7
  401f3c:	f100 38ff 	add.w	r8, r0, #4294967295
  401f40:	d26f      	bcs.n	402022 <__udivmoddi4+0x2be>
  401f42:	42ab      	cmp	r3, r5
  401f44:	d96d      	bls.n	402022 <__udivmoddi4+0x2be>
  401f46:	3802      	subs	r0, #2
  401f48:	443d      	add	r5, r7
  401f4a:	1aeb      	subs	r3, r5, r3
  401f4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401f50:	e78f      	b.n	401e72 <__udivmoddi4+0x10e>
  401f52:	f1c1 0720 	rsb	r7, r1, #32
  401f56:	fa22 f807 	lsr.w	r8, r2, r7
  401f5a:	408b      	lsls	r3, r1
  401f5c:	fa05 f401 	lsl.w	r4, r5, r1
  401f60:	ea48 0303 	orr.w	r3, r8, r3
  401f64:	fa20 fe07 	lsr.w	lr, r0, r7
  401f68:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401f6c:	40fd      	lsrs	r5, r7
  401f6e:	ea4e 0e04 	orr.w	lr, lr, r4
  401f72:	fbb5 f9fc 	udiv	r9, r5, ip
  401f76:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401f7a:	fb0c 5519 	mls	r5, ip, r9, r5
  401f7e:	fa1f f883 	uxth.w	r8, r3
  401f82:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401f86:	fb09 f408 	mul.w	r4, r9, r8
  401f8a:	42ac      	cmp	r4, r5
  401f8c:	fa02 f201 	lsl.w	r2, r2, r1
  401f90:	fa00 fa01 	lsl.w	sl, r0, r1
  401f94:	d908      	bls.n	401fa8 <__udivmoddi4+0x244>
  401f96:	18ed      	adds	r5, r5, r3
  401f98:	f109 30ff 	add.w	r0, r9, #4294967295
  401f9c:	d243      	bcs.n	402026 <__udivmoddi4+0x2c2>
  401f9e:	42ac      	cmp	r4, r5
  401fa0:	d941      	bls.n	402026 <__udivmoddi4+0x2c2>
  401fa2:	f1a9 0902 	sub.w	r9, r9, #2
  401fa6:	441d      	add	r5, r3
  401fa8:	1b2d      	subs	r5, r5, r4
  401faa:	fa1f fe8e 	uxth.w	lr, lr
  401fae:	fbb5 f0fc 	udiv	r0, r5, ip
  401fb2:	fb0c 5510 	mls	r5, ip, r0, r5
  401fb6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401fba:	fb00 f808 	mul.w	r8, r0, r8
  401fbe:	45a0      	cmp	r8, r4
  401fc0:	d907      	bls.n	401fd2 <__udivmoddi4+0x26e>
  401fc2:	18e4      	adds	r4, r4, r3
  401fc4:	f100 35ff 	add.w	r5, r0, #4294967295
  401fc8:	d229      	bcs.n	40201e <__udivmoddi4+0x2ba>
  401fca:	45a0      	cmp	r8, r4
  401fcc:	d927      	bls.n	40201e <__udivmoddi4+0x2ba>
  401fce:	3802      	subs	r0, #2
  401fd0:	441c      	add	r4, r3
  401fd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401fd6:	eba4 0408 	sub.w	r4, r4, r8
  401fda:	fba0 8902 	umull	r8, r9, r0, r2
  401fde:	454c      	cmp	r4, r9
  401fe0:	46c6      	mov	lr, r8
  401fe2:	464d      	mov	r5, r9
  401fe4:	d315      	bcc.n	402012 <__udivmoddi4+0x2ae>
  401fe6:	d012      	beq.n	40200e <__udivmoddi4+0x2aa>
  401fe8:	b156      	cbz	r6, 402000 <__udivmoddi4+0x29c>
  401fea:	ebba 030e 	subs.w	r3, sl, lr
  401fee:	eb64 0405 	sbc.w	r4, r4, r5
  401ff2:	fa04 f707 	lsl.w	r7, r4, r7
  401ff6:	40cb      	lsrs	r3, r1
  401ff8:	431f      	orrs	r7, r3
  401ffa:	40cc      	lsrs	r4, r1
  401ffc:	6037      	str	r7, [r6, #0]
  401ffe:	6074      	str	r4, [r6, #4]
  402000:	2100      	movs	r1, #0
  402002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402006:	4618      	mov	r0, r3
  402008:	e6f8      	b.n	401dfc <__udivmoddi4+0x98>
  40200a:	4690      	mov	r8, r2
  40200c:	e6e0      	b.n	401dd0 <__udivmoddi4+0x6c>
  40200e:	45c2      	cmp	sl, r8
  402010:	d2ea      	bcs.n	401fe8 <__udivmoddi4+0x284>
  402012:	ebb8 0e02 	subs.w	lr, r8, r2
  402016:	eb69 0503 	sbc.w	r5, r9, r3
  40201a:	3801      	subs	r0, #1
  40201c:	e7e4      	b.n	401fe8 <__udivmoddi4+0x284>
  40201e:	4628      	mov	r0, r5
  402020:	e7d7      	b.n	401fd2 <__udivmoddi4+0x26e>
  402022:	4640      	mov	r0, r8
  402024:	e791      	b.n	401f4a <__udivmoddi4+0x1e6>
  402026:	4681      	mov	r9, r0
  402028:	e7be      	b.n	401fa8 <__udivmoddi4+0x244>
  40202a:	4601      	mov	r1, r0
  40202c:	e778      	b.n	401f20 <__udivmoddi4+0x1bc>
  40202e:	3802      	subs	r0, #2
  402030:	443c      	add	r4, r7
  402032:	e745      	b.n	401ec0 <__udivmoddi4+0x15c>
  402034:	4608      	mov	r0, r1
  402036:	e708      	b.n	401e4a <__udivmoddi4+0xe6>
  402038:	f1a8 0802 	sub.w	r8, r8, #2
  40203c:	443d      	add	r5, r7
  40203e:	e72b      	b.n	401e98 <__udivmoddi4+0x134>

00402040 <__aeabi_idiv0>:
  402040:	4770      	bx	lr
  402042:	bf00      	nop

00402044 <__aeabi_d2uiz>:
  402044:	004a      	lsls	r2, r1, #1
  402046:	d211      	bcs.n	40206c <__aeabi_d2uiz+0x28>
  402048:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40204c:	d211      	bcs.n	402072 <__aeabi_d2uiz+0x2e>
  40204e:	d50d      	bpl.n	40206c <__aeabi_d2uiz+0x28>
  402050:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402054:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402058:	d40e      	bmi.n	402078 <__aeabi_d2uiz+0x34>
  40205a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40205e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402062:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402066:	fa23 f002 	lsr.w	r0, r3, r2
  40206a:	4770      	bx	lr
  40206c:	f04f 0000 	mov.w	r0, #0
  402070:	4770      	bx	lr
  402072:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  402076:	d102      	bne.n	40207e <__aeabi_d2uiz+0x3a>
  402078:	f04f 30ff 	mov.w	r0, #4294967295
  40207c:	4770      	bx	lr
  40207e:	f04f 0000 	mov.w	r0, #0
  402082:	4770      	bx	lr

00402084 <__libc_init_array>:
  402084:	b570      	push	{r4, r5, r6, lr}
  402086:	4e0f      	ldr	r6, [pc, #60]	; (4020c4 <__libc_init_array+0x40>)
  402088:	4d0f      	ldr	r5, [pc, #60]	; (4020c8 <__libc_init_array+0x44>)
  40208a:	1b76      	subs	r6, r6, r5
  40208c:	10b6      	asrs	r6, r6, #2
  40208e:	bf18      	it	ne
  402090:	2400      	movne	r4, #0
  402092:	d005      	beq.n	4020a0 <__libc_init_array+0x1c>
  402094:	3401      	adds	r4, #1
  402096:	f855 3b04 	ldr.w	r3, [r5], #4
  40209a:	4798      	blx	r3
  40209c:	42a6      	cmp	r6, r4
  40209e:	d1f9      	bne.n	402094 <__libc_init_array+0x10>
  4020a0:	4e0a      	ldr	r6, [pc, #40]	; (4020cc <__libc_init_array+0x48>)
  4020a2:	4d0b      	ldr	r5, [pc, #44]	; (4020d0 <__libc_init_array+0x4c>)
  4020a4:	1b76      	subs	r6, r6, r5
  4020a6:	f000 f8a7 	bl	4021f8 <_init>
  4020aa:	10b6      	asrs	r6, r6, #2
  4020ac:	bf18      	it	ne
  4020ae:	2400      	movne	r4, #0
  4020b0:	d006      	beq.n	4020c0 <__libc_init_array+0x3c>
  4020b2:	3401      	adds	r4, #1
  4020b4:	f855 3b04 	ldr.w	r3, [r5], #4
  4020b8:	4798      	blx	r3
  4020ba:	42a6      	cmp	r6, r4
  4020bc:	d1f9      	bne.n	4020b2 <__libc_init_array+0x2e>
  4020be:	bd70      	pop	{r4, r5, r6, pc}
  4020c0:	bd70      	pop	{r4, r5, r6, pc}
  4020c2:	bf00      	nop
  4020c4:	00402204 	.word	0x00402204
  4020c8:	00402204 	.word	0x00402204
  4020cc:	0040220c 	.word	0x0040220c
  4020d0:	00402204 	.word	0x00402204

004020d4 <register_fini>:
  4020d4:	4b02      	ldr	r3, [pc, #8]	; (4020e0 <register_fini+0xc>)
  4020d6:	b113      	cbz	r3, 4020de <register_fini+0xa>
  4020d8:	4802      	ldr	r0, [pc, #8]	; (4020e4 <register_fini+0x10>)
  4020da:	f000 b805 	b.w	4020e8 <atexit>
  4020de:	4770      	bx	lr
  4020e0:	00000000 	.word	0x00000000
  4020e4:	004020f5 	.word	0x004020f5

004020e8 <atexit>:
  4020e8:	2300      	movs	r3, #0
  4020ea:	4601      	mov	r1, r0
  4020ec:	461a      	mov	r2, r3
  4020ee:	4618      	mov	r0, r3
  4020f0:	f000 b81e 	b.w	402130 <__register_exitproc>

004020f4 <__libc_fini_array>:
  4020f4:	b538      	push	{r3, r4, r5, lr}
  4020f6:	4c0a      	ldr	r4, [pc, #40]	; (402120 <__libc_fini_array+0x2c>)
  4020f8:	4d0a      	ldr	r5, [pc, #40]	; (402124 <__libc_fini_array+0x30>)
  4020fa:	1b64      	subs	r4, r4, r5
  4020fc:	10a4      	asrs	r4, r4, #2
  4020fe:	d00a      	beq.n	402116 <__libc_fini_array+0x22>
  402100:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402104:	3b01      	subs	r3, #1
  402106:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40210a:	3c01      	subs	r4, #1
  40210c:	f855 3904 	ldr.w	r3, [r5], #-4
  402110:	4798      	blx	r3
  402112:	2c00      	cmp	r4, #0
  402114:	d1f9      	bne.n	40210a <__libc_fini_array+0x16>
  402116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40211a:	f000 b877 	b.w	40220c <_fini>
  40211e:	bf00      	nop
  402120:	0040221c 	.word	0x0040221c
  402124:	00402218 	.word	0x00402218

00402128 <__retarget_lock_acquire_recursive>:
  402128:	4770      	bx	lr
  40212a:	bf00      	nop

0040212c <__retarget_lock_release_recursive>:
  40212c:	4770      	bx	lr
  40212e:	bf00      	nop

00402130 <__register_exitproc>:
  402130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402134:	4d2c      	ldr	r5, [pc, #176]	; (4021e8 <__register_exitproc+0xb8>)
  402136:	4606      	mov	r6, r0
  402138:	6828      	ldr	r0, [r5, #0]
  40213a:	4698      	mov	r8, r3
  40213c:	460f      	mov	r7, r1
  40213e:	4691      	mov	r9, r2
  402140:	f7ff fff2 	bl	402128 <__retarget_lock_acquire_recursive>
  402144:	4b29      	ldr	r3, [pc, #164]	; (4021ec <__register_exitproc+0xbc>)
  402146:	681c      	ldr	r4, [r3, #0]
  402148:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40214c:	2b00      	cmp	r3, #0
  40214e:	d03e      	beq.n	4021ce <__register_exitproc+0x9e>
  402150:	685a      	ldr	r2, [r3, #4]
  402152:	2a1f      	cmp	r2, #31
  402154:	dc1c      	bgt.n	402190 <__register_exitproc+0x60>
  402156:	f102 0e01 	add.w	lr, r2, #1
  40215a:	b176      	cbz	r6, 40217a <__register_exitproc+0x4a>
  40215c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402160:	2401      	movs	r4, #1
  402162:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402166:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40216a:	4094      	lsls	r4, r2
  40216c:	4320      	orrs	r0, r4
  40216e:	2e02      	cmp	r6, #2
  402170:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402174:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402178:	d023      	beq.n	4021c2 <__register_exitproc+0x92>
  40217a:	3202      	adds	r2, #2
  40217c:	f8c3 e004 	str.w	lr, [r3, #4]
  402180:	6828      	ldr	r0, [r5, #0]
  402182:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402186:	f7ff ffd1 	bl	40212c <__retarget_lock_release_recursive>
  40218a:	2000      	movs	r0, #0
  40218c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402190:	4b17      	ldr	r3, [pc, #92]	; (4021f0 <__register_exitproc+0xc0>)
  402192:	b30b      	cbz	r3, 4021d8 <__register_exitproc+0xa8>
  402194:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402198:	f3af 8000 	nop.w
  40219c:	4603      	mov	r3, r0
  40219e:	b1d8      	cbz	r0, 4021d8 <__register_exitproc+0xa8>
  4021a0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4021a4:	6002      	str	r2, [r0, #0]
  4021a6:	2100      	movs	r1, #0
  4021a8:	6041      	str	r1, [r0, #4]
  4021aa:	460a      	mov	r2, r1
  4021ac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4021b0:	f04f 0e01 	mov.w	lr, #1
  4021b4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4021b8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4021bc:	2e00      	cmp	r6, #0
  4021be:	d0dc      	beq.n	40217a <__register_exitproc+0x4a>
  4021c0:	e7cc      	b.n	40215c <__register_exitproc+0x2c>
  4021c2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4021c6:	430c      	orrs	r4, r1
  4021c8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4021cc:	e7d5      	b.n	40217a <__register_exitproc+0x4a>
  4021ce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4021d2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4021d6:	e7bb      	b.n	402150 <__register_exitproc+0x20>
  4021d8:	6828      	ldr	r0, [r5, #0]
  4021da:	f7ff ffa7 	bl	40212c <__retarget_lock_release_recursive>
  4021de:	f04f 30ff 	mov.w	r0, #4294967295
  4021e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4021e6:	bf00      	nop
  4021e8:	20400908 	.word	0x20400908
  4021ec:	004021f4 	.word	0x004021f4
  4021f0:	00000000 	.word	0x00000000

004021f4 <_global_impure_ptr>:
  4021f4:	204004e0                                ..@ 

004021f8 <_init>:
  4021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4021fa:	bf00      	nop
  4021fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4021fe:	bc08      	pop	{r3}
  402200:	469e      	mov	lr, r3
  402202:	4770      	bx	lr

00402204 <__init_array_start>:
  402204:	004020d5 	.word	0x004020d5

00402208 <__frame_dummy_init_array_entry>:
  402208:	00400165                                e.@.

0040220c <_fini>:
  40220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40220e:	bf00      	nop
  402210:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402212:	bc08      	pop	{r3}
  402214:	469e      	mov	lr, r3
  402216:	4770      	bx	lr

00402218 <__fini_array_start>:
  402218:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <mario_theme_notes>:
20400010:	0a4d 0000 0a4d 0000 0000 0000 0a4d 0000     M...M.......M...
20400020:	0000 0000 082d 0000 0a4d 0000 0000 0000     ....-...M.......
20400030:	0c40 0000 0000 0000 0000 0000 0000 0000     @...............
20400040:	0620 0000 0000 0000 0000 0000 0000 0000      ...............
20400050:	082d 0000 0000 0000 0000 0000 0620 0000     -........... ...
	...
20400068:	0527 0000 0000 0000 0000 0000 06e0 0000     '...............
20400078:	0000 0000 07b8 0000 0000 0000 0749 0000     ............I...
20400088:	06e0 0000 0000 0000 0620 0000 0a4d 0000     ........ ...M...
20400098:	0c40 0000 0dc0 0000 0000 0000 0aea 0000     @...............
204000a8:	0c40 0000 0000 0000 0a4d 0000 0000 0000     @.......M.......
204000b8:	082d 0000 092d 0000 07b8 0000 0000 0000     -...-...........
204000c8:	0000 0000 082d 0000 0000 0000 0000 0000     ....-...........
204000d8:	0620 0000 0000 0000 0000 0000 0527 0000      ...........'...
	...
204000f0:	06e0 0000 0000 0000 07b8 0000 0000 0000     ................
20400100:	0749 0000 06e0 0000 0000 0000 0620 0000     I........... ...
20400110:	0a4d 0000 0c40 0000 0dc0 0000 0000 0000     M...@...........
20400120:	0aea 0000 0c40 0000 0000 0000 0a4d 0000     ....@.......M...
20400130:	0000 0000 082d 0000 092d 0000 07b8 0000     ....-...-.......
	...

20400148 <mario_theme_tempo>:
20400148:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400158:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400168:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400178:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400188:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400198:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204001a8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204001b8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204001c8:	0070 0000 0070 0000 0070 0000 0053 0000     p...p...p...S...
204001d8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204001e8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204001f8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400208:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400218:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400228:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400238:	0053 0000 0053 0000 0053 0000 0070 0000     S...S...S...p...
20400248:	0070 0000 0070 0000 0053 0000 0053 0000     p...p...S...S...
20400258:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400268:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400278:	0053 0000 0053 0000                         S...S...

20400280 <underworld_notes>:
20400280:	0106 0000 020b 0000 00dc 0000 01b8 0000     ................
20400290:	00e9 0000 01d2 0000 0000 0000 0000 0000     ................
204002a0:	0106 0000 020b 0000 00dc 0000 01b8 0000     ................
204002b0:	00e9 0000 01d2 0000 0000 0000 0000 0000     ................
204002c0:	00af 0000 015d 0000 0093 0000 0126 0000     ....].......&...
204002d0:	009c 0000 0137 0000 0000 0000 0000 0000     ....7...........
204002e0:	00af 0000 015d 0000 0093 0000 0126 0000     ....].......&...
204002f0:	009c 0000 0137 0000 0000 0000 0000 0000     ....7...........
20400300:	0137 0000 0115 0000 0126 0000 0115 0000     7.......&.......
20400310:	0137 0000 0137 0000 00d0 0000 00c4 0000     7...7...........
20400320:	0115 0000 0106 0000 0172 0000 015d 0000     ........r...]...
20400330:	00a5 0000 01d2 0000 01b8 0000 019f 0000     ................
20400340:	0137 0000 00f7 0000 00e9 0000 00dc 0000     7...............
20400350:	00d0 0000 0000 0000 0000 0000 0000 0000     ................

20400360 <underworld_tempo>:
20400360:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400370:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
20400380:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400390:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
204003a0:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204003b0:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
204003c0:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204003d0:	0053 0000 0053 0000 00a6 0000 00a6 0000     S...S...........
204003e0:	0037 0000 0037 0000 0037 0000 00a6 0000     7...7...7.......
204003f0:	00a6 0000 00a6 0000 00a6 0000 00a6 0000     ................
20400400:	00a6 0000 0037 0000 0037 0000 0037 0000     ....7...7...7...
20400410:	0037 0000 0037 0000 0037 0000 0064 0000     7...7...7...d...
20400420:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
20400430:	0064 0000 014d 0000 014d 0000 014d 0000     d...M...M...M...

20400440 <imperial_march_notes>:
20400440:	01b8 0000 01b8 0000 01b8 0000 015d 0000     ............]...
20400450:	020b 0000 01b8 0000 015d 0000 020b 0000     ........].......
20400460:	01b8 0000 0000 0000 0293 0000 0293 0000     ................
20400470:	0293 0000 02ba 0000 020b 0000 019f 0000     ................
20400480:	015d 0000 020b 0000 01b8 0000 0000 0000     ]...............

20400490 <imperial_march_tempo>:
20400490:	01f4 0000 01f4 0000 01f4 0000 015e 0000     ............^...
204004a0:	0096 0000 01f4 0000 015e 0000 0096 0000     ........^.......
204004b0:	028a 0000 01f4 0000 01f4 0000 01f4 0000     ................
204004c0:	01f4 0000 015e 0000 0096 0000 01f4 0000     ....^...........
204004d0:	015e 0000 0096 0000 028a 0000 01f4 0000     ^...............

204004e0 <impure_data>:
204004e0:	0000 0000 07cc 2040 0834 2040 089c 2040     ......@ 4.@ ..@ 
	...
20400588:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400598:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400908 <__atexit_recursive_mutex>:
20400908:	0998 2040                                   ..@ 
