
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002884  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402884  00402884  00012884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000090c  20400000  0040288c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000b8  2040090c  00403198  0002090c  2**2
                  ALLOC
  4 .stack        00002004  204009c4  00403250  0002090c  2**0
                  ALLOC
  5 .heap         00000200  204029c8  00405254  0002090c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002090c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002093a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b472  00000000  00000000  00020993  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000015a6  00000000  00000000  0002be05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000374a  00000000  00000000  0002d3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000648  00000000  00000000  00030af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b8  00000000  00000000  0003113d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c312  00000000  00000000  000316f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006ba9  00000000  00000000  0004da07  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000896c8  00000000  00000000  000545b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001e0c  00000000  00000000  000ddc78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c8 29 40 20 bd 0e 40 00 6d 0f 40 00 6d 0f 40 00     .)@ ..@.m.@.m.@.
  400010:	6d 0f 40 00 6d 0f 40 00 6d 0f 40 00 00 00 00 00     m.@.m.@.m.@.....
	...
  40002c:	6d 0f 40 00 6d 0f 40 00 00 00 00 00 6d 0f 40 00     m.@.m.@.....m.@.
  40003c:	6d 0f 40 00 6d 0f 40 00 6d 0f 40 00 6d 0f 40 00     m.@.m.@.m.@.m.@.
  40004c:	6d 0f 40 00 6d 0f 40 00 6d 0f 40 00 6d 0f 40 00     m.@.m.@.m.@.m.@.
  40005c:	6d 0f 40 00 6d 0f 40 00 00 00 00 00 75 0a 40 00     m.@.m.@.....u.@.
  40006c:	8d 0a 40 00 a5 0a 40 00 6d 0f 40 00 6d 0f 40 00     ..@...@.m.@.m.@.
  40007c:	6d 0f 40 00 bd 0a 40 00 d5 0a 40 00 6d 0f 40 00     m.@...@...@.m.@.
  40008c:	6d 0f 40 00 6d 0f 40 00 6d 0f 40 00 6d 0f 40 00     m.@.m.@.m.@.m.@.
  40009c:	6d 0f 40 00 6d 0f 40 00 6d 0f 40 00 6d 0f 40 00     m.@.m.@.m.@.m.@.
  4000ac:	6d 0f 40 00 6d 0f 40 00 6d 0f 40 00 6d 0f 40 00     m.@.m.@.m.@.m.@.
  4000bc:	6d 0f 40 00 6d 0f 40 00 6d 0f 40 00 6d 0f 40 00     m.@.m.@.m.@.m.@.
  4000cc:	6d 0f 40 00 00 00 00 00 6d 0f 40 00 00 00 00 00     m.@.....m.@.....
  4000dc:	6d 0f 40 00 6d 0f 40 00 6d 0f 40 00 6d 0f 40 00     m.@.m.@.m.@.m.@.
  4000ec:	6d 0f 40 00 6d 0f 40 00 6d 0f 40 00 6d 0f 40 00     m.@.m.@.m.@.m.@.
  4000fc:	6d 0f 40 00 6d 0f 40 00 6d 0f 40 00 6d 0f 40 00     m.@.m.@.m.@.m.@.
  40010c:	6d 0f 40 00 6d 0f 40 00 00 00 00 00 00 00 00 00     m.@.m.@.........
  40011c:	00 00 00 00 6d 0f 40 00 6d 0f 40 00 6d 0f 40 00     ....m.@.m.@.m.@.
  40012c:	6d 0f 40 00 6d 0f 40 00 00 00 00 00 6d 0f 40 00     m.@.m.@.....m.@.
  40013c:	6d 0f 40 00                                         m.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040090c 	.word	0x2040090c
  40015c:	00000000 	.word	0x00000000
  400160:	0040288c 	.word	0x0040288c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040288c 	.word	0x0040288c
  4001a0:	20400910 	.word	0x20400910
  4001a4:	0040288c 	.word	0x0040288c
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400bed 	.word	0x00400bed
  40022c:	00400c59 	.word	0x00400c59
  400230:	00400cc9 	.word	0x00400cc9

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	00400c25 	.word	0x00400c25
  4002a0:	00400d41 	.word	0x00400d41

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	00400d5d 	.word	0x00400d5d
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	00400d79 	.word	0x00400d79
  400418:	00400d95 	.word	0x00400d95

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a2:	4618      	mov	r0, r3
  4004a4:	bd80      	pop	{r7, pc}
  4004a6:	bf00      	nop
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	004010dd 	.word	0x004010dd
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	00400aed 	.word	0x00400aed
  40051c:	00400b69 	.word	0x00400b69
  400520:	00400f75 	.word	0x00400f75
  400524:	00400499 	.word	0x00400499

00400528 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400528:	b480      	push	{r7}
  40052a:	b085      	sub	sp, #20
  40052c:	af00      	add	r7, sp, #0
  40052e:	60f8      	str	r0, [r7, #12]
  400530:	60b9      	str	r1, [r7, #8]
  400532:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400534:	687b      	ldr	r3, [r7, #4]
  400536:	2b00      	cmp	r3, #0
  400538:	d003      	beq.n	400542 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40053a:	68fb      	ldr	r3, [r7, #12]
  40053c:	68ba      	ldr	r2, [r7, #8]
  40053e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400540:	e002      	b.n	400548 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400542:	68fb      	ldr	r3, [r7, #12]
  400544:	68ba      	ldr	r2, [r7, #8]
  400546:	661a      	str	r2, [r3, #96]	; 0x60
}
  400548:	bf00      	nop
  40054a:	3714      	adds	r7, #20
  40054c:	46bd      	mov	sp, r7
  40054e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400552:	4770      	bx	lr

00400554 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400554:	b480      	push	{r7}
  400556:	b083      	sub	sp, #12
  400558:	af00      	add	r7, sp, #0
  40055a:	6078      	str	r0, [r7, #4]
  40055c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	683a      	ldr	r2, [r7, #0]
  400562:	631a      	str	r2, [r3, #48]	; 0x30
}
  400564:	bf00      	nop
  400566:	370c      	adds	r7, #12
  400568:	46bd      	mov	sp, r7
  40056a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40056e:	4770      	bx	lr

00400570 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400570:	b480      	push	{r7}
  400572:	b083      	sub	sp, #12
  400574:	af00      	add	r7, sp, #0
  400576:	6078      	str	r0, [r7, #4]
  400578:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  40057a:	687b      	ldr	r3, [r7, #4]
  40057c:	683a      	ldr	r2, [r7, #0]
  40057e:	635a      	str	r2, [r3, #52]	; 0x34
}
  400580:	bf00      	nop
  400582:	370c      	adds	r7, #12
  400584:	46bd      	mov	sp, r7
  400586:	f85d 7b04 	ldr.w	r7, [sp], #4
  40058a:	4770      	bx	lr

0040058c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40058c:	b480      	push	{r7}
  40058e:	b087      	sub	sp, #28
  400590:	af00      	add	r7, sp, #0
  400592:	60f8      	str	r0, [r7, #12]
  400594:	60b9      	str	r1, [r7, #8]
  400596:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400598:	68fb      	ldr	r3, [r7, #12]
  40059a:	687a      	ldr	r2, [r7, #4]
  40059c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40059e:	68bb      	ldr	r3, [r7, #8]
  4005a0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4005a4:	d04a      	beq.n	40063c <pio_set_peripheral+0xb0>
  4005a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4005aa:	d808      	bhi.n	4005be <pio_set_peripheral+0x32>
  4005ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4005b0:	d016      	beq.n	4005e0 <pio_set_peripheral+0x54>
  4005b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4005b6:	d02c      	beq.n	400612 <pio_set_peripheral+0x86>
  4005b8:	2b00      	cmp	r3, #0
  4005ba:	d069      	beq.n	400690 <pio_set_peripheral+0x104>
  4005bc:	e064      	b.n	400688 <pio_set_peripheral+0xfc>
  4005be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005c2:	d065      	beq.n	400690 <pio_set_peripheral+0x104>
  4005c4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005c8:	d803      	bhi.n	4005d2 <pio_set_peripheral+0x46>
  4005ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4005ce:	d04a      	beq.n	400666 <pio_set_peripheral+0xda>
  4005d0:	e05a      	b.n	400688 <pio_set_peripheral+0xfc>
  4005d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4005d6:	d05b      	beq.n	400690 <pio_set_peripheral+0x104>
  4005d8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4005dc:	d058      	beq.n	400690 <pio_set_peripheral+0x104>
  4005de:	e053      	b.n	400688 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005e0:	68fb      	ldr	r3, [r7, #12]
  4005e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005e4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005e6:	68fb      	ldr	r3, [r7, #12]
  4005e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005ea:	687b      	ldr	r3, [r7, #4]
  4005ec:	43d9      	mvns	r1, r3
  4005ee:	697b      	ldr	r3, [r7, #20]
  4005f0:	400b      	ands	r3, r1
  4005f2:	401a      	ands	r2, r3
  4005f4:	68fb      	ldr	r3, [r7, #12]
  4005f6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005f8:	68fb      	ldr	r3, [r7, #12]
  4005fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005fc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005fe:	68fb      	ldr	r3, [r7, #12]
  400600:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400602:	687b      	ldr	r3, [r7, #4]
  400604:	43d9      	mvns	r1, r3
  400606:	697b      	ldr	r3, [r7, #20]
  400608:	400b      	ands	r3, r1
  40060a:	401a      	ands	r2, r3
  40060c:	68fb      	ldr	r3, [r7, #12]
  40060e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400610:	e03a      	b.n	400688 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400612:	68fb      	ldr	r3, [r7, #12]
  400614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400616:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400618:	687a      	ldr	r2, [r7, #4]
  40061a:	697b      	ldr	r3, [r7, #20]
  40061c:	431a      	orrs	r2, r3
  40061e:	68fb      	ldr	r3, [r7, #12]
  400620:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400622:	68fb      	ldr	r3, [r7, #12]
  400624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400626:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400628:	68fb      	ldr	r3, [r7, #12]
  40062a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40062c:	687b      	ldr	r3, [r7, #4]
  40062e:	43d9      	mvns	r1, r3
  400630:	697b      	ldr	r3, [r7, #20]
  400632:	400b      	ands	r3, r1
  400634:	401a      	ands	r2, r3
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40063a:	e025      	b.n	400688 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40063c:	68fb      	ldr	r3, [r7, #12]
  40063e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400640:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400642:	68fb      	ldr	r3, [r7, #12]
  400644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400646:	687b      	ldr	r3, [r7, #4]
  400648:	43d9      	mvns	r1, r3
  40064a:	697b      	ldr	r3, [r7, #20]
  40064c:	400b      	ands	r3, r1
  40064e:	401a      	ands	r2, r3
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400654:	68fb      	ldr	r3, [r7, #12]
  400656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400658:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40065a:	687a      	ldr	r2, [r7, #4]
  40065c:	697b      	ldr	r3, [r7, #20]
  40065e:	431a      	orrs	r2, r3
  400660:	68fb      	ldr	r3, [r7, #12]
  400662:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400664:	e010      	b.n	400688 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400666:	68fb      	ldr	r3, [r7, #12]
  400668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40066a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40066c:	687a      	ldr	r2, [r7, #4]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	431a      	orrs	r2, r3
  400672:	68fb      	ldr	r3, [r7, #12]
  400674:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400676:	68fb      	ldr	r3, [r7, #12]
  400678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40067a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40067c:	687a      	ldr	r2, [r7, #4]
  40067e:	697b      	ldr	r3, [r7, #20]
  400680:	431a      	orrs	r2, r3
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400686:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400688:	68fb      	ldr	r3, [r7, #12]
  40068a:	687a      	ldr	r2, [r7, #4]
  40068c:	605a      	str	r2, [r3, #4]
  40068e:	e000      	b.n	400692 <pio_set_peripheral+0x106>
		return;
  400690:	bf00      	nop
}
  400692:	371c      	adds	r7, #28
  400694:	46bd      	mov	sp, r7
  400696:	f85d 7b04 	ldr.w	r7, [sp], #4
  40069a:	4770      	bx	lr

0040069c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40069c:	b580      	push	{r7, lr}
  40069e:	b084      	sub	sp, #16
  4006a0:	af00      	add	r7, sp, #0
  4006a2:	60f8      	str	r0, [r7, #12]
  4006a4:	60b9      	str	r1, [r7, #8]
  4006a6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4006a8:	68b9      	ldr	r1, [r7, #8]
  4006aa:	68f8      	ldr	r0, [r7, #12]
  4006ac:	4b19      	ldr	r3, [pc, #100]	; (400714 <pio_set_input+0x78>)
  4006ae:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4006b0:	687b      	ldr	r3, [r7, #4]
  4006b2:	f003 0301 	and.w	r3, r3, #1
  4006b6:	461a      	mov	r2, r3
  4006b8:	68b9      	ldr	r1, [r7, #8]
  4006ba:	68f8      	ldr	r0, [r7, #12]
  4006bc:	4b16      	ldr	r3, [pc, #88]	; (400718 <pio_set_input+0x7c>)
  4006be:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4006c0:	687b      	ldr	r3, [r7, #4]
  4006c2:	f003 030a 	and.w	r3, r3, #10
  4006c6:	2b00      	cmp	r3, #0
  4006c8:	d003      	beq.n	4006d2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4006ca:	68fb      	ldr	r3, [r7, #12]
  4006cc:	68ba      	ldr	r2, [r7, #8]
  4006ce:	621a      	str	r2, [r3, #32]
  4006d0:	e002      	b.n	4006d8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4006d2:	68fb      	ldr	r3, [r7, #12]
  4006d4:	68ba      	ldr	r2, [r7, #8]
  4006d6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4006d8:	687b      	ldr	r3, [r7, #4]
  4006da:	f003 0302 	and.w	r3, r3, #2
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d004      	beq.n	4006ec <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	68ba      	ldr	r2, [r7, #8]
  4006e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4006ea:	e008      	b.n	4006fe <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4006ec:	687b      	ldr	r3, [r7, #4]
  4006ee:	f003 0308 	and.w	r3, r3, #8
  4006f2:	2b00      	cmp	r3, #0
  4006f4:	d003      	beq.n	4006fe <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4006f6:	68fb      	ldr	r3, [r7, #12]
  4006f8:	68ba      	ldr	r2, [r7, #8]
  4006fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4006fe:	68fb      	ldr	r3, [r7, #12]
  400700:	68ba      	ldr	r2, [r7, #8]
  400702:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400704:	68fb      	ldr	r3, [r7, #12]
  400706:	68ba      	ldr	r2, [r7, #8]
  400708:	601a      	str	r2, [r3, #0]
}
  40070a:	bf00      	nop
  40070c:	3710      	adds	r7, #16
  40070e:	46bd      	mov	sp, r7
  400710:	bd80      	pop	{r7, pc}
  400712:	bf00      	nop
  400714:	004008d5 	.word	0x004008d5
  400718:	00400529 	.word	0x00400529

0040071c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40071c:	b580      	push	{r7, lr}
  40071e:	b084      	sub	sp, #16
  400720:	af00      	add	r7, sp, #0
  400722:	60f8      	str	r0, [r7, #12]
  400724:	60b9      	str	r1, [r7, #8]
  400726:	607a      	str	r2, [r7, #4]
  400728:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40072a:	68b9      	ldr	r1, [r7, #8]
  40072c:	68f8      	ldr	r0, [r7, #12]
  40072e:	4b12      	ldr	r3, [pc, #72]	; (400778 <pio_set_output+0x5c>)
  400730:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400732:	69ba      	ldr	r2, [r7, #24]
  400734:	68b9      	ldr	r1, [r7, #8]
  400736:	68f8      	ldr	r0, [r7, #12]
  400738:	4b10      	ldr	r3, [pc, #64]	; (40077c <pio_set_output+0x60>)
  40073a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40073c:	683b      	ldr	r3, [r7, #0]
  40073e:	2b00      	cmp	r3, #0
  400740:	d003      	beq.n	40074a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400742:	68fb      	ldr	r3, [r7, #12]
  400744:	68ba      	ldr	r2, [r7, #8]
  400746:	651a      	str	r2, [r3, #80]	; 0x50
  400748:	e002      	b.n	400750 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40074a:	68fb      	ldr	r3, [r7, #12]
  40074c:	68ba      	ldr	r2, [r7, #8]
  40074e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400750:	687b      	ldr	r3, [r7, #4]
  400752:	2b00      	cmp	r3, #0
  400754:	d003      	beq.n	40075e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400756:	68fb      	ldr	r3, [r7, #12]
  400758:	68ba      	ldr	r2, [r7, #8]
  40075a:	631a      	str	r2, [r3, #48]	; 0x30
  40075c:	e002      	b.n	400764 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40075e:	68fb      	ldr	r3, [r7, #12]
  400760:	68ba      	ldr	r2, [r7, #8]
  400762:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400764:	68fb      	ldr	r3, [r7, #12]
  400766:	68ba      	ldr	r2, [r7, #8]
  400768:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40076a:	68fb      	ldr	r3, [r7, #12]
  40076c:	68ba      	ldr	r2, [r7, #8]
  40076e:	601a      	str	r2, [r3, #0]
}
  400770:	bf00      	nop
  400772:	3710      	adds	r7, #16
  400774:	46bd      	mov	sp, r7
  400776:	bd80      	pop	{r7, pc}
  400778:	004008d5 	.word	0x004008d5
  40077c:	00400529 	.word	0x00400529

00400780 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  400780:	b590      	push	{r4, r7, lr}
  400782:	b087      	sub	sp, #28
  400784:	af02      	add	r7, sp, #8
  400786:	60f8      	str	r0, [r7, #12]
  400788:	60b9      	str	r1, [r7, #8]
  40078a:	607a      	str	r2, [r7, #4]
  40078c:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  40078e:	68bb      	ldr	r3, [r7, #8]
  400790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400794:	d016      	beq.n	4007c4 <pio_configure+0x44>
  400796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40079a:	d809      	bhi.n	4007b0 <pio_configure+0x30>
  40079c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4007a0:	d010      	beq.n	4007c4 <pio_configure+0x44>
  4007a2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4007a6:	d00d      	beq.n	4007c4 <pio_configure+0x44>
  4007a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4007ac:	d00a      	beq.n	4007c4 <pio_configure+0x44>
  4007ae:	e03d      	b.n	40082c <pio_configure+0xac>
  4007b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4007b4:	d01a      	beq.n	4007ec <pio_configure+0x6c>
  4007b6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4007ba:	d017      	beq.n	4007ec <pio_configure+0x6c>
  4007bc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4007c0:	d00e      	beq.n	4007e0 <pio_configure+0x60>
  4007c2:	e033      	b.n	40082c <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4007c4:	687a      	ldr	r2, [r7, #4]
  4007c6:	68b9      	ldr	r1, [r7, #8]
  4007c8:	68f8      	ldr	r0, [r7, #12]
  4007ca:	4b1c      	ldr	r3, [pc, #112]	; (40083c <pio_configure+0xbc>)
  4007cc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  4007ce:	683b      	ldr	r3, [r7, #0]
  4007d0:	f003 0301 	and.w	r3, r3, #1
  4007d4:	461a      	mov	r2, r3
  4007d6:	6879      	ldr	r1, [r7, #4]
  4007d8:	68f8      	ldr	r0, [r7, #12]
  4007da:	4b19      	ldr	r3, [pc, #100]	; (400840 <pio_configure+0xc0>)
  4007dc:	4798      	blx	r3
		break;
  4007de:	e027      	b.n	400830 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4007e0:	683a      	ldr	r2, [r7, #0]
  4007e2:	6879      	ldr	r1, [r7, #4]
  4007e4:	68f8      	ldr	r0, [r7, #12]
  4007e6:	4b17      	ldr	r3, [pc, #92]	; (400844 <pio_configure+0xc4>)
  4007e8:	4798      	blx	r3
		break;
  4007ea:	e021      	b.n	400830 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4007ec:	68bb      	ldr	r3, [r7, #8]
  4007ee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4007f2:	bf0c      	ite	eq
  4007f4:	2301      	moveq	r3, #1
  4007f6:	2300      	movne	r3, #0
  4007f8:	b2db      	uxtb	r3, r3
  4007fa:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  4007fc:	683b      	ldr	r3, [r7, #0]
  4007fe:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400802:	2b00      	cmp	r3, #0
  400804:	bf14      	ite	ne
  400806:	2301      	movne	r3, #1
  400808:	2300      	moveq	r3, #0
  40080a:	b2db      	uxtb	r3, r3
  40080c:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  40080e:	683b      	ldr	r3, [r7, #0]
  400810:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400814:	2b00      	cmp	r3, #0
  400816:	bf14      	ite	ne
  400818:	2301      	movne	r3, #1
  40081a:	2300      	moveq	r3, #0
  40081c:	b2db      	uxtb	r3, r3
  40081e:	9300      	str	r3, [sp, #0]
  400820:	460b      	mov	r3, r1
  400822:	6879      	ldr	r1, [r7, #4]
  400824:	68f8      	ldr	r0, [r7, #12]
  400826:	4c08      	ldr	r4, [pc, #32]	; (400848 <pio_configure+0xc8>)
  400828:	47a0      	blx	r4
		break;
  40082a:	e001      	b.n	400830 <pio_configure+0xb0>

	default:
		return 0;
  40082c:	2300      	movs	r3, #0
  40082e:	e000      	b.n	400832 <pio_configure+0xb2>
	}

	return 1;
  400830:	2301      	movs	r3, #1
}
  400832:	4618      	mov	r0, r3
  400834:	3714      	adds	r7, #20
  400836:	46bd      	mov	sp, r7
  400838:	bd90      	pop	{r4, r7, pc}
  40083a:	bf00      	nop
  40083c:	0040058d 	.word	0x0040058d
  400840:	00400529 	.word	0x00400529
  400844:	0040069d 	.word	0x0040069d
  400848:	0040071d 	.word	0x0040071d

0040084c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40084c:	b480      	push	{r7}
  40084e:	b085      	sub	sp, #20
  400850:	af00      	add	r7, sp, #0
  400852:	60f8      	str	r0, [r7, #12]
  400854:	60b9      	str	r1, [r7, #8]
  400856:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400858:	687b      	ldr	r3, [r7, #4]
  40085a:	f003 0310 	and.w	r3, r3, #16
  40085e:	2b00      	cmp	r3, #0
  400860:	d020      	beq.n	4008a4 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	68ba      	ldr	r2, [r7, #8]
  400866:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40086a:	687b      	ldr	r3, [r7, #4]
  40086c:	f003 0320 	and.w	r3, r3, #32
  400870:	2b00      	cmp	r3, #0
  400872:	d004      	beq.n	40087e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400874:	68fb      	ldr	r3, [r7, #12]
  400876:	68ba      	ldr	r2, [r7, #8]
  400878:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40087c:	e003      	b.n	400886 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40087e:	68fb      	ldr	r3, [r7, #12]
  400880:	68ba      	ldr	r2, [r7, #8]
  400882:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400886:	687b      	ldr	r3, [r7, #4]
  400888:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40088c:	2b00      	cmp	r3, #0
  40088e:	d004      	beq.n	40089a <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400890:	68fb      	ldr	r3, [r7, #12]
  400892:	68ba      	ldr	r2, [r7, #8]
  400894:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400898:	e008      	b.n	4008ac <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  40089a:	68fb      	ldr	r3, [r7, #12]
  40089c:	68ba      	ldr	r2, [r7, #8]
  40089e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4008a2:	e003      	b.n	4008ac <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  4008a4:	68fb      	ldr	r3, [r7, #12]
  4008a6:	68ba      	ldr	r2, [r7, #8]
  4008a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4008ac:	bf00      	nop
  4008ae:	3714      	adds	r7, #20
  4008b0:	46bd      	mov	sp, r7
  4008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008b6:	4770      	bx	lr

004008b8 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4008b8:	b480      	push	{r7}
  4008ba:	b083      	sub	sp, #12
  4008bc:	af00      	add	r7, sp, #0
  4008be:	6078      	str	r0, [r7, #4]
  4008c0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4008c2:	687b      	ldr	r3, [r7, #4]
  4008c4:	683a      	ldr	r2, [r7, #0]
  4008c6:	641a      	str	r2, [r3, #64]	; 0x40
}
  4008c8:	bf00      	nop
  4008ca:	370c      	adds	r7, #12
  4008cc:	46bd      	mov	sp, r7
  4008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008d2:	4770      	bx	lr

004008d4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4008d4:	b480      	push	{r7}
  4008d6:	b083      	sub	sp, #12
  4008d8:	af00      	add	r7, sp, #0
  4008da:	6078      	str	r0, [r7, #4]
  4008dc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4008de:	687b      	ldr	r3, [r7, #4]
  4008e0:	683a      	ldr	r2, [r7, #0]
  4008e2:	645a      	str	r2, [r3, #68]	; 0x44
}
  4008e4:	bf00      	nop
  4008e6:	370c      	adds	r7, #12
  4008e8:	46bd      	mov	sp, r7
  4008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008ee:	4770      	bx	lr

004008f0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4008f0:	b480      	push	{r7}
  4008f2:	b083      	sub	sp, #12
  4008f4:	af00      	add	r7, sp, #0
  4008f6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4008f8:	687b      	ldr	r3, [r7, #4]
  4008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4008fc:	4618      	mov	r0, r3
  4008fe:	370c      	adds	r7, #12
  400900:	46bd      	mov	sp, r7
  400902:	f85d 7b04 	ldr.w	r7, [sp], #4
  400906:	4770      	bx	lr

00400908 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400908:	b480      	push	{r7}
  40090a:	b083      	sub	sp, #12
  40090c:	af00      	add	r7, sp, #0
  40090e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400910:	687b      	ldr	r3, [r7, #4]
  400912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400914:	4618      	mov	r0, r3
  400916:	370c      	adds	r7, #12
  400918:	46bd      	mov	sp, r7
  40091a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40091e:	4770      	bx	lr

00400920 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400920:	b580      	push	{r7, lr}
  400922:	b084      	sub	sp, #16
  400924:	af00      	add	r7, sp, #0
  400926:	6078      	str	r0, [r7, #4]
  400928:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40092a:	6878      	ldr	r0, [r7, #4]
  40092c:	4b26      	ldr	r3, [pc, #152]	; (4009c8 <pio_handler_process+0xa8>)
  40092e:	4798      	blx	r3
  400930:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400932:	6878      	ldr	r0, [r7, #4]
  400934:	4b25      	ldr	r3, [pc, #148]	; (4009cc <pio_handler_process+0xac>)
  400936:	4798      	blx	r3
  400938:	4602      	mov	r2, r0
  40093a:	68fb      	ldr	r3, [r7, #12]
  40093c:	4013      	ands	r3, r2
  40093e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400940:	68fb      	ldr	r3, [r7, #12]
  400942:	2b00      	cmp	r3, #0
  400944:	d03c      	beq.n	4009c0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400946:	2300      	movs	r3, #0
  400948:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40094a:	e034      	b.n	4009b6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40094c:	4a20      	ldr	r2, [pc, #128]	; (4009d0 <pio_handler_process+0xb0>)
  40094e:	68bb      	ldr	r3, [r7, #8]
  400950:	011b      	lsls	r3, r3, #4
  400952:	4413      	add	r3, r2
  400954:	681a      	ldr	r2, [r3, #0]
  400956:	683b      	ldr	r3, [r7, #0]
  400958:	429a      	cmp	r2, r3
  40095a:	d126      	bne.n	4009aa <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40095c:	4a1c      	ldr	r2, [pc, #112]	; (4009d0 <pio_handler_process+0xb0>)
  40095e:	68bb      	ldr	r3, [r7, #8]
  400960:	011b      	lsls	r3, r3, #4
  400962:	4413      	add	r3, r2
  400964:	3304      	adds	r3, #4
  400966:	681a      	ldr	r2, [r3, #0]
  400968:	68fb      	ldr	r3, [r7, #12]
  40096a:	4013      	ands	r3, r2
  40096c:	2b00      	cmp	r3, #0
  40096e:	d01c      	beq.n	4009aa <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400970:	4a17      	ldr	r2, [pc, #92]	; (4009d0 <pio_handler_process+0xb0>)
  400972:	68bb      	ldr	r3, [r7, #8]
  400974:	011b      	lsls	r3, r3, #4
  400976:	4413      	add	r3, r2
  400978:	330c      	adds	r3, #12
  40097a:	681b      	ldr	r3, [r3, #0]
  40097c:	4914      	ldr	r1, [pc, #80]	; (4009d0 <pio_handler_process+0xb0>)
  40097e:	68ba      	ldr	r2, [r7, #8]
  400980:	0112      	lsls	r2, r2, #4
  400982:	440a      	add	r2, r1
  400984:	6810      	ldr	r0, [r2, #0]
  400986:	4912      	ldr	r1, [pc, #72]	; (4009d0 <pio_handler_process+0xb0>)
  400988:	68ba      	ldr	r2, [r7, #8]
  40098a:	0112      	lsls	r2, r2, #4
  40098c:	440a      	add	r2, r1
  40098e:	3204      	adds	r2, #4
  400990:	6812      	ldr	r2, [r2, #0]
  400992:	4611      	mov	r1, r2
  400994:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400996:	4a0e      	ldr	r2, [pc, #56]	; (4009d0 <pio_handler_process+0xb0>)
  400998:	68bb      	ldr	r3, [r7, #8]
  40099a:	011b      	lsls	r3, r3, #4
  40099c:	4413      	add	r3, r2
  40099e:	3304      	adds	r3, #4
  4009a0:	681b      	ldr	r3, [r3, #0]
  4009a2:	43db      	mvns	r3, r3
  4009a4:	68fa      	ldr	r2, [r7, #12]
  4009a6:	4013      	ands	r3, r2
  4009a8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4009aa:	68bb      	ldr	r3, [r7, #8]
  4009ac:	3301      	adds	r3, #1
  4009ae:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4009b0:	68bb      	ldr	r3, [r7, #8]
  4009b2:	2b06      	cmp	r3, #6
  4009b4:	d803      	bhi.n	4009be <pio_handler_process+0x9e>
		while (status != 0) {
  4009b6:	68fb      	ldr	r3, [r7, #12]
  4009b8:	2b00      	cmp	r3, #0
  4009ba:	d1c7      	bne.n	40094c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4009bc:	e000      	b.n	4009c0 <pio_handler_process+0xa0>
				break;
  4009be:	bf00      	nop
}
  4009c0:	bf00      	nop
  4009c2:	3710      	adds	r7, #16
  4009c4:	46bd      	mov	sp, r7
  4009c6:	bd80      	pop	{r7, pc}
  4009c8:	004008f1 	.word	0x004008f1
  4009cc:	00400909 	.word	0x00400909
  4009d0:	20400928 	.word	0x20400928

004009d4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4009d4:	b580      	push	{r7, lr}
  4009d6:	b086      	sub	sp, #24
  4009d8:	af00      	add	r7, sp, #0
  4009da:	60f8      	str	r0, [r7, #12]
  4009dc:	60b9      	str	r1, [r7, #8]
  4009de:	607a      	str	r2, [r7, #4]
  4009e0:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4009e2:	4b21      	ldr	r3, [pc, #132]	; (400a68 <pio_handler_set+0x94>)
  4009e4:	681b      	ldr	r3, [r3, #0]
  4009e6:	2b06      	cmp	r3, #6
  4009e8:	d901      	bls.n	4009ee <pio_handler_set+0x1a>
		return 1;
  4009ea:	2301      	movs	r3, #1
  4009ec:	e038      	b.n	400a60 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4009ee:	2300      	movs	r3, #0
  4009f0:	75fb      	strb	r3, [r7, #23]
  4009f2:	e011      	b.n	400a18 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  4009f4:	7dfb      	ldrb	r3, [r7, #23]
  4009f6:	011b      	lsls	r3, r3, #4
  4009f8:	4a1c      	ldr	r2, [pc, #112]	; (400a6c <pio_handler_set+0x98>)
  4009fa:	4413      	add	r3, r2
  4009fc:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4009fe:	693b      	ldr	r3, [r7, #16]
  400a00:	681a      	ldr	r2, [r3, #0]
  400a02:	68bb      	ldr	r3, [r7, #8]
  400a04:	429a      	cmp	r2, r3
  400a06:	d104      	bne.n	400a12 <pio_handler_set+0x3e>
  400a08:	693b      	ldr	r3, [r7, #16]
  400a0a:	685a      	ldr	r2, [r3, #4]
  400a0c:	687b      	ldr	r3, [r7, #4]
  400a0e:	429a      	cmp	r2, r3
  400a10:	d008      	beq.n	400a24 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400a12:	7dfb      	ldrb	r3, [r7, #23]
  400a14:	3301      	adds	r3, #1
  400a16:	75fb      	strb	r3, [r7, #23]
  400a18:	7dfa      	ldrb	r2, [r7, #23]
  400a1a:	4b13      	ldr	r3, [pc, #76]	; (400a68 <pio_handler_set+0x94>)
  400a1c:	681b      	ldr	r3, [r3, #0]
  400a1e:	429a      	cmp	r2, r3
  400a20:	d9e8      	bls.n	4009f4 <pio_handler_set+0x20>
  400a22:	e000      	b.n	400a26 <pio_handler_set+0x52>
			break;
  400a24:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400a26:	693b      	ldr	r3, [r7, #16]
  400a28:	68ba      	ldr	r2, [r7, #8]
  400a2a:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400a2c:	693b      	ldr	r3, [r7, #16]
  400a2e:	687a      	ldr	r2, [r7, #4]
  400a30:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400a32:	693b      	ldr	r3, [r7, #16]
  400a34:	683a      	ldr	r2, [r7, #0]
  400a36:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400a38:	693b      	ldr	r3, [r7, #16]
  400a3a:	6a3a      	ldr	r2, [r7, #32]
  400a3c:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400a3e:	7dfa      	ldrb	r2, [r7, #23]
  400a40:	4b09      	ldr	r3, [pc, #36]	; (400a68 <pio_handler_set+0x94>)
  400a42:	681b      	ldr	r3, [r3, #0]
  400a44:	3301      	adds	r3, #1
  400a46:	429a      	cmp	r2, r3
  400a48:	d104      	bne.n	400a54 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400a4a:	4b07      	ldr	r3, [pc, #28]	; (400a68 <pio_handler_set+0x94>)
  400a4c:	681b      	ldr	r3, [r3, #0]
  400a4e:	3301      	adds	r3, #1
  400a50:	4a05      	ldr	r2, [pc, #20]	; (400a68 <pio_handler_set+0x94>)
  400a52:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400a54:	683a      	ldr	r2, [r7, #0]
  400a56:	6879      	ldr	r1, [r7, #4]
  400a58:	68f8      	ldr	r0, [r7, #12]
  400a5a:	4b05      	ldr	r3, [pc, #20]	; (400a70 <pio_handler_set+0x9c>)
  400a5c:	4798      	blx	r3

	return 0;
  400a5e:	2300      	movs	r3, #0
}
  400a60:	4618      	mov	r0, r3
  400a62:	3718      	adds	r7, #24
  400a64:	46bd      	mov	sp, r7
  400a66:	bd80      	pop	{r7, pc}
  400a68:	20400998 	.word	0x20400998
  400a6c:	20400928 	.word	0x20400928
  400a70:	0040084d 	.word	0x0040084d

00400a74 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400a74:	b580      	push	{r7, lr}
  400a76:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400a78:	210a      	movs	r1, #10
  400a7a:	4802      	ldr	r0, [pc, #8]	; (400a84 <PIOA_Handler+0x10>)
  400a7c:	4b02      	ldr	r3, [pc, #8]	; (400a88 <PIOA_Handler+0x14>)
  400a7e:	4798      	blx	r3
}
  400a80:	bf00      	nop
  400a82:	bd80      	pop	{r7, pc}
  400a84:	400e0e00 	.word	0x400e0e00
  400a88:	00400921 	.word	0x00400921

00400a8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400a8c:	b580      	push	{r7, lr}
  400a8e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400a90:	210b      	movs	r1, #11
  400a92:	4802      	ldr	r0, [pc, #8]	; (400a9c <PIOB_Handler+0x10>)
  400a94:	4b02      	ldr	r3, [pc, #8]	; (400aa0 <PIOB_Handler+0x14>)
  400a96:	4798      	blx	r3
}
  400a98:	bf00      	nop
  400a9a:	bd80      	pop	{r7, pc}
  400a9c:	400e1000 	.word	0x400e1000
  400aa0:	00400921 	.word	0x00400921

00400aa4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400aa4:	b580      	push	{r7, lr}
  400aa6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400aa8:	210c      	movs	r1, #12
  400aaa:	4802      	ldr	r0, [pc, #8]	; (400ab4 <PIOC_Handler+0x10>)
  400aac:	4b02      	ldr	r3, [pc, #8]	; (400ab8 <PIOC_Handler+0x14>)
  400aae:	4798      	blx	r3
}
  400ab0:	bf00      	nop
  400ab2:	bd80      	pop	{r7, pc}
  400ab4:	400e1200 	.word	0x400e1200
  400ab8:	00400921 	.word	0x00400921

00400abc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400abc:	b580      	push	{r7, lr}
  400abe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400ac0:	2110      	movs	r1, #16
  400ac2:	4802      	ldr	r0, [pc, #8]	; (400acc <PIOD_Handler+0x10>)
  400ac4:	4b02      	ldr	r3, [pc, #8]	; (400ad0 <PIOD_Handler+0x14>)
  400ac6:	4798      	blx	r3
}
  400ac8:	bf00      	nop
  400aca:	bd80      	pop	{r7, pc}
  400acc:	400e1400 	.word	0x400e1400
  400ad0:	00400921 	.word	0x00400921

00400ad4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ad4:	b580      	push	{r7, lr}
  400ad6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400ad8:	2111      	movs	r1, #17
  400ada:	4802      	ldr	r0, [pc, #8]	; (400ae4 <PIOE_Handler+0x10>)
  400adc:	4b02      	ldr	r3, [pc, #8]	; (400ae8 <PIOE_Handler+0x14>)
  400ade:	4798      	blx	r3
}
  400ae0:	bf00      	nop
  400ae2:	bd80      	pop	{r7, pc}
  400ae4:	400e1600 	.word	0x400e1600
  400ae8:	00400921 	.word	0x00400921

00400aec <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400aec:	b480      	push	{r7}
  400aee:	b083      	sub	sp, #12
  400af0:	af00      	add	r7, sp, #0
  400af2:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400af4:	687b      	ldr	r3, [r7, #4]
  400af6:	3b01      	subs	r3, #1
  400af8:	2b03      	cmp	r3, #3
  400afa:	d81a      	bhi.n	400b32 <pmc_mck_set_division+0x46>
  400afc:	a201      	add	r2, pc, #4	; (adr r2, 400b04 <pmc_mck_set_division+0x18>)
  400afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b02:	bf00      	nop
  400b04:	00400b15 	.word	0x00400b15
  400b08:	00400b1b 	.word	0x00400b1b
  400b0c:	00400b23 	.word	0x00400b23
  400b10:	00400b2b 	.word	0x00400b2b
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b14:	2300      	movs	r3, #0
  400b16:	607b      	str	r3, [r7, #4]
			break;
  400b18:	e00e      	b.n	400b38 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
  400b1e:	607b      	str	r3, [r7, #4]
			break;
  400b20:	e00a      	b.n	400b38 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b22:	f44f 7340 	mov.w	r3, #768	; 0x300
  400b26:	607b      	str	r3, [r7, #4]
			break;
  400b28:	e006      	b.n	400b38 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
  400b2e:	607b      	str	r3, [r7, #4]
			break;
  400b30:	e002      	b.n	400b38 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b32:	2300      	movs	r3, #0
  400b34:	607b      	str	r3, [r7, #4]
			break;
  400b36:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400b38:	490a      	ldr	r1, [pc, #40]	; (400b64 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b3a:	4b0a      	ldr	r3, [pc, #40]	; (400b64 <pmc_mck_set_division+0x78>)
  400b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400b42:	687b      	ldr	r3, [r7, #4]
  400b44:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  400b46:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b48:	bf00      	nop
  400b4a:	4b06      	ldr	r3, [pc, #24]	; (400b64 <pmc_mck_set_division+0x78>)
  400b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b4e:	f003 0308 	and.w	r3, r3, #8
  400b52:	2b00      	cmp	r3, #0
  400b54:	d0f9      	beq.n	400b4a <pmc_mck_set_division+0x5e>
}
  400b56:	bf00      	nop
  400b58:	370c      	adds	r7, #12
  400b5a:	46bd      	mov	sp, r7
  400b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop
  400b64:	400e0600 	.word	0x400e0600

00400b68 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400b68:	b480      	push	{r7}
  400b6a:	b085      	sub	sp, #20
  400b6c:	af00      	add	r7, sp, #0
  400b6e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b70:	491d      	ldr	r1, [pc, #116]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400b72:	4b1d      	ldr	r3, [pc, #116]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400b7a:	687b      	ldr	r3, [r7, #4]
  400b7c:	4313      	orrs	r3, r2
  400b7e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b84:	60fb      	str	r3, [r7, #12]
  400b86:	e007      	b.n	400b98 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b88:	68fb      	ldr	r3, [r7, #12]
  400b8a:	2b00      	cmp	r3, #0
  400b8c:	d101      	bne.n	400b92 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400b8e:	2301      	movs	r3, #1
  400b90:	e023      	b.n	400bda <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400b92:	68fb      	ldr	r3, [r7, #12]
  400b94:	3b01      	subs	r3, #1
  400b96:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b98:	4b13      	ldr	r3, [pc, #76]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b9c:	f003 0308 	and.w	r3, r3, #8
  400ba0:	2b00      	cmp	r3, #0
  400ba2:	d0f1      	beq.n	400b88 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ba4:	4a10      	ldr	r2, [pc, #64]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400ba6:	4b10      	ldr	r3, [pc, #64]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400baa:	f023 0303 	bic.w	r3, r3, #3
  400bae:	f043 0302 	orr.w	r3, r3, #2
  400bb2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bb8:	60fb      	str	r3, [r7, #12]
  400bba:	e007      	b.n	400bcc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bbc:	68fb      	ldr	r3, [r7, #12]
  400bbe:	2b00      	cmp	r3, #0
  400bc0:	d101      	bne.n	400bc6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400bc2:	2301      	movs	r3, #1
  400bc4:	e009      	b.n	400bda <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400bc6:	68fb      	ldr	r3, [r7, #12]
  400bc8:	3b01      	subs	r3, #1
  400bca:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bcc:	4b06      	ldr	r3, [pc, #24]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bd0:	f003 0308 	and.w	r3, r3, #8
  400bd4:	2b00      	cmp	r3, #0
  400bd6:	d0f1      	beq.n	400bbc <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400bd8:	2300      	movs	r3, #0
}
  400bda:	4618      	mov	r0, r3
  400bdc:	3714      	adds	r7, #20
  400bde:	46bd      	mov	sp, r7
  400be0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be4:	4770      	bx	lr
  400be6:	bf00      	nop
  400be8:	400e0600 	.word	0x400e0600

00400bec <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400bec:	b480      	push	{r7}
  400bee:	b083      	sub	sp, #12
  400bf0:	af00      	add	r7, sp, #0
  400bf2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400bf4:	687b      	ldr	r3, [r7, #4]
  400bf6:	2b01      	cmp	r3, #1
  400bf8:	d105      	bne.n	400c06 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400bfa:	4907      	ldr	r1, [pc, #28]	; (400c18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400bfc:	4b06      	ldr	r3, [pc, #24]	; (400c18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400bfe:	689a      	ldr	r2, [r3, #8]
  400c00:	4b06      	ldr	r3, [pc, #24]	; (400c1c <pmc_switch_sclk_to_32kxtal+0x30>)
  400c02:	4313      	orrs	r3, r2
  400c04:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400c06:	4b04      	ldr	r3, [pc, #16]	; (400c18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400c08:	4a05      	ldr	r2, [pc, #20]	; (400c20 <pmc_switch_sclk_to_32kxtal+0x34>)
  400c0a:	601a      	str	r2, [r3, #0]
}
  400c0c:	bf00      	nop
  400c0e:	370c      	adds	r7, #12
  400c10:	46bd      	mov	sp, r7
  400c12:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c16:	4770      	bx	lr
  400c18:	400e1810 	.word	0x400e1810
  400c1c:	a5100000 	.word	0xa5100000
  400c20:	a5000008 	.word	0xa5000008

00400c24 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400c24:	b480      	push	{r7}
  400c26:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400c28:	4b09      	ldr	r3, [pc, #36]	; (400c50 <pmc_osc_is_ready_32kxtal+0x2c>)
  400c2a:	695b      	ldr	r3, [r3, #20]
  400c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400c30:	2b00      	cmp	r3, #0
  400c32:	d007      	beq.n	400c44 <pmc_osc_is_ready_32kxtal+0x20>
  400c34:	4b07      	ldr	r3, [pc, #28]	; (400c54 <pmc_osc_is_ready_32kxtal+0x30>)
  400c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400c3c:	2b00      	cmp	r3, #0
  400c3e:	d001      	beq.n	400c44 <pmc_osc_is_ready_32kxtal+0x20>
  400c40:	2301      	movs	r3, #1
  400c42:	e000      	b.n	400c46 <pmc_osc_is_ready_32kxtal+0x22>
  400c44:	2300      	movs	r3, #0
}
  400c46:	4618      	mov	r0, r3
  400c48:	46bd      	mov	sp, r7
  400c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c4e:	4770      	bx	lr
  400c50:	400e1810 	.word	0x400e1810
  400c54:	400e0600 	.word	0x400e0600

00400c58 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400c58:	b480      	push	{r7}
  400c5a:	b083      	sub	sp, #12
  400c5c:	af00      	add	r7, sp, #0
  400c5e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400c60:	4915      	ldr	r1, [pc, #84]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c62:	4b15      	ldr	r3, [pc, #84]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c64:	6a1a      	ldr	r2, [r3, #32]
  400c66:	4b15      	ldr	r3, [pc, #84]	; (400cbc <pmc_switch_mainck_to_fastrc+0x64>)
  400c68:	4313      	orrs	r3, r2
  400c6a:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400c6c:	bf00      	nop
  400c6e:	4b12      	ldr	r3, [pc, #72]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400c76:	2b00      	cmp	r3, #0
  400c78:	d0f9      	beq.n	400c6e <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400c7a:	490f      	ldr	r1, [pc, #60]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c7c:	4b0e      	ldr	r3, [pc, #56]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c7e:	6a1a      	ldr	r2, [r3, #32]
  400c80:	4b0f      	ldr	r3, [pc, #60]	; (400cc0 <pmc_switch_mainck_to_fastrc+0x68>)
  400c82:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400c84:	687a      	ldr	r2, [r7, #4]
  400c86:	4313      	orrs	r3, r2
  400c88:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400c8c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400c8e:	bf00      	nop
  400c90:	4b09      	ldr	r3, [pc, #36]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400c98:	2b00      	cmp	r3, #0
  400c9a:	d0f9      	beq.n	400c90 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400c9c:	4906      	ldr	r1, [pc, #24]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c9e:	4b06      	ldr	r3, [pc, #24]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400ca0:	6a1a      	ldr	r2, [r3, #32]
  400ca2:	4b08      	ldr	r3, [pc, #32]	; (400cc4 <pmc_switch_mainck_to_fastrc+0x6c>)
  400ca4:	4013      	ands	r3, r2
  400ca6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400caa:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400cac:	bf00      	nop
  400cae:	370c      	adds	r7, #12
  400cb0:	46bd      	mov	sp, r7
  400cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cb6:	4770      	bx	lr
  400cb8:	400e0600 	.word	0x400e0600
  400cbc:	00370008 	.word	0x00370008
  400cc0:	ffc8ff8f 	.word	0xffc8ff8f
  400cc4:	fec8ffff 	.word	0xfec8ffff

00400cc8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400cc8:	b480      	push	{r7}
  400cca:	b083      	sub	sp, #12
  400ccc:	af00      	add	r7, sp, #0
  400cce:	6078      	str	r0, [r7, #4]
  400cd0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400cd2:	687b      	ldr	r3, [r7, #4]
  400cd4:	2b00      	cmp	r3, #0
  400cd6:	d008      	beq.n	400cea <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400cd8:	4913      	ldr	r1, [pc, #76]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400cda:	4b13      	ldr	r3, [pc, #76]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400cdc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400cde:	4a13      	ldr	r2, [pc, #76]	; (400d2c <pmc_switch_mainck_to_xtal+0x64>)
  400ce0:	401a      	ands	r2, r3
  400ce2:	4b13      	ldr	r3, [pc, #76]	; (400d30 <pmc_switch_mainck_to_xtal+0x68>)
  400ce4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400ce6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400ce8:	e018      	b.n	400d1c <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400cea:	490f      	ldr	r1, [pc, #60]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400cec:	4b0e      	ldr	r3, [pc, #56]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400cee:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400cf0:	4b10      	ldr	r3, [pc, #64]	; (400d34 <pmc_switch_mainck_to_xtal+0x6c>)
  400cf2:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400cf4:	683a      	ldr	r2, [r7, #0]
  400cf6:	0212      	lsls	r2, r2, #8
  400cf8:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400cfa:	431a      	orrs	r2, r3
  400cfc:	4b0e      	ldr	r3, [pc, #56]	; (400d38 <pmc_switch_mainck_to_xtal+0x70>)
  400cfe:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d00:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d02:	bf00      	nop
  400d04:	4b08      	ldr	r3, [pc, #32]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d08:	f003 0301 	and.w	r3, r3, #1
  400d0c:	2b00      	cmp	r3, #0
  400d0e:	d0f9      	beq.n	400d04 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d10:	4905      	ldr	r1, [pc, #20]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400d12:	4b05      	ldr	r3, [pc, #20]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400d14:	6a1a      	ldr	r2, [r3, #32]
  400d16:	4b09      	ldr	r3, [pc, #36]	; (400d3c <pmc_switch_mainck_to_xtal+0x74>)
  400d18:	4313      	orrs	r3, r2
  400d1a:	620b      	str	r3, [r1, #32]
}
  400d1c:	bf00      	nop
  400d1e:	370c      	adds	r7, #12
  400d20:	46bd      	mov	sp, r7
  400d22:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d26:	4770      	bx	lr
  400d28:	400e0600 	.word	0x400e0600
  400d2c:	fec8fffc 	.word	0xfec8fffc
  400d30:	01370002 	.word	0x01370002
  400d34:	ffc8fffc 	.word	0xffc8fffc
  400d38:	00370001 	.word	0x00370001
  400d3c:	01370000 	.word	0x01370000

00400d40 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400d40:	b480      	push	{r7}
  400d42:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400d44:	4b04      	ldr	r3, [pc, #16]	; (400d58 <pmc_osc_is_ready_mainck+0x18>)
  400d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400d4c:	4618      	mov	r0, r3
  400d4e:	46bd      	mov	sp, r7
  400d50:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d54:	4770      	bx	lr
  400d56:	bf00      	nop
  400d58:	400e0600 	.word	0x400e0600

00400d5c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400d5c:	b480      	push	{r7}
  400d5e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400d60:	4b04      	ldr	r3, [pc, #16]	; (400d74 <pmc_disable_pllack+0x18>)
  400d62:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d66:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400d68:	bf00      	nop
  400d6a:	46bd      	mov	sp, r7
  400d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d70:	4770      	bx	lr
  400d72:	bf00      	nop
  400d74:	400e0600 	.word	0x400e0600

00400d78 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400d78:	b480      	push	{r7}
  400d7a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400d7c:	4b04      	ldr	r3, [pc, #16]	; (400d90 <pmc_is_locked_pllack+0x18>)
  400d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d80:	f003 0302 	and.w	r3, r3, #2
}
  400d84:	4618      	mov	r0, r3
  400d86:	46bd      	mov	sp, r7
  400d88:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d8c:	4770      	bx	lr
  400d8e:	bf00      	nop
  400d90:	400e0600 	.word	0x400e0600

00400d94 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400d94:	b480      	push	{r7}
  400d96:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400d98:	4b04      	ldr	r3, [pc, #16]	; (400dac <pmc_is_locked_upll+0x18>)
  400d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400da0:	4618      	mov	r0, r3
  400da2:	46bd      	mov	sp, r7
  400da4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400da8:	4770      	bx	lr
  400daa:	bf00      	nop
  400dac:	400e0600 	.word	0x400e0600

00400db0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400db0:	b480      	push	{r7}
  400db2:	b083      	sub	sp, #12
  400db4:	af00      	add	r7, sp, #0
  400db6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400db8:	687b      	ldr	r3, [r7, #4]
  400dba:	2b3f      	cmp	r3, #63	; 0x3f
  400dbc:	d901      	bls.n	400dc2 <pmc_enable_periph_clk+0x12>
		return 1;
  400dbe:	2301      	movs	r3, #1
  400dc0:	e02f      	b.n	400e22 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400dc2:	687b      	ldr	r3, [r7, #4]
  400dc4:	2b1f      	cmp	r3, #31
  400dc6:	d813      	bhi.n	400df0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400dc8:	4b19      	ldr	r3, [pc, #100]	; (400e30 <pmc_enable_periph_clk+0x80>)
  400dca:	699a      	ldr	r2, [r3, #24]
  400dcc:	2101      	movs	r1, #1
  400dce:	687b      	ldr	r3, [r7, #4]
  400dd0:	fa01 f303 	lsl.w	r3, r1, r3
  400dd4:	401a      	ands	r2, r3
  400dd6:	2101      	movs	r1, #1
  400dd8:	687b      	ldr	r3, [r7, #4]
  400dda:	fa01 f303 	lsl.w	r3, r1, r3
  400dde:	429a      	cmp	r2, r3
  400de0:	d01e      	beq.n	400e20 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400de2:	4a13      	ldr	r2, [pc, #76]	; (400e30 <pmc_enable_periph_clk+0x80>)
  400de4:	2101      	movs	r1, #1
  400de6:	687b      	ldr	r3, [r7, #4]
  400de8:	fa01 f303 	lsl.w	r3, r1, r3
  400dec:	6113      	str	r3, [r2, #16]
  400dee:	e017      	b.n	400e20 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400df0:	687b      	ldr	r3, [r7, #4]
  400df2:	3b20      	subs	r3, #32
  400df4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400df6:	4b0e      	ldr	r3, [pc, #56]	; (400e30 <pmc_enable_periph_clk+0x80>)
  400df8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400dfc:	2101      	movs	r1, #1
  400dfe:	687b      	ldr	r3, [r7, #4]
  400e00:	fa01 f303 	lsl.w	r3, r1, r3
  400e04:	401a      	ands	r2, r3
  400e06:	2101      	movs	r1, #1
  400e08:	687b      	ldr	r3, [r7, #4]
  400e0a:	fa01 f303 	lsl.w	r3, r1, r3
  400e0e:	429a      	cmp	r2, r3
  400e10:	d006      	beq.n	400e20 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e12:	4a07      	ldr	r2, [pc, #28]	; (400e30 <pmc_enable_periph_clk+0x80>)
  400e14:	2101      	movs	r1, #1
  400e16:	687b      	ldr	r3, [r7, #4]
  400e18:	fa01 f303 	lsl.w	r3, r1, r3
  400e1c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400e20:	2300      	movs	r3, #0
}
  400e22:	4618      	mov	r0, r3
  400e24:	370c      	adds	r7, #12
  400e26:	46bd      	mov	sp, r7
  400e28:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e2c:	4770      	bx	lr
  400e2e:	bf00      	nop
  400e30:	400e0600 	.word	0x400e0600

00400e34 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400e34:	b480      	push	{r7}
  400e36:	b083      	sub	sp, #12
  400e38:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e3a:	f3ef 8310 	mrs	r3, PRIMASK
  400e3e:	607b      	str	r3, [r7, #4]
  return(result);
  400e40:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e42:	2b00      	cmp	r3, #0
  400e44:	bf0c      	ite	eq
  400e46:	2301      	moveq	r3, #1
  400e48:	2300      	movne	r3, #0
  400e4a:	b2db      	uxtb	r3, r3
  400e4c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400e4e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400e50:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e54:	4b04      	ldr	r3, [pc, #16]	; (400e68 <cpu_irq_save+0x34>)
  400e56:	2200      	movs	r2, #0
  400e58:	701a      	strb	r2, [r3, #0]
	return flags;
  400e5a:	683b      	ldr	r3, [r7, #0]
}
  400e5c:	4618      	mov	r0, r3
  400e5e:	370c      	adds	r7, #12
  400e60:	46bd      	mov	sp, r7
  400e62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e66:	4770      	bx	lr
  400e68:	2040000a 	.word	0x2040000a

00400e6c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400e6c:	b480      	push	{r7}
  400e6e:	b083      	sub	sp, #12
  400e70:	af00      	add	r7, sp, #0
  400e72:	6078      	str	r0, [r7, #4]
	return (flags);
  400e74:	687b      	ldr	r3, [r7, #4]
  400e76:	2b00      	cmp	r3, #0
  400e78:	bf14      	ite	ne
  400e7a:	2301      	movne	r3, #1
  400e7c:	2300      	moveq	r3, #0
  400e7e:	b2db      	uxtb	r3, r3
}
  400e80:	4618      	mov	r0, r3
  400e82:	370c      	adds	r7, #12
  400e84:	46bd      	mov	sp, r7
  400e86:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e8a:	4770      	bx	lr

00400e8c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400e8c:	b580      	push	{r7, lr}
  400e8e:	b082      	sub	sp, #8
  400e90:	af00      	add	r7, sp, #0
  400e92:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400e94:	6878      	ldr	r0, [r7, #4]
  400e96:	4b07      	ldr	r3, [pc, #28]	; (400eb4 <cpu_irq_restore+0x28>)
  400e98:	4798      	blx	r3
  400e9a:	4603      	mov	r3, r0
  400e9c:	2b00      	cmp	r3, #0
  400e9e:	d005      	beq.n	400eac <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400ea0:	4b05      	ldr	r3, [pc, #20]	; (400eb8 <cpu_irq_restore+0x2c>)
  400ea2:	2201      	movs	r2, #1
  400ea4:	701a      	strb	r2, [r3, #0]
  400ea6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400eaa:	b662      	cpsie	i
}
  400eac:	bf00      	nop
  400eae:	3708      	adds	r7, #8
  400eb0:	46bd      	mov	sp, r7
  400eb2:	bd80      	pop	{r7, pc}
  400eb4:	00400e6d 	.word	0x00400e6d
  400eb8:	2040000a 	.word	0x2040000a

00400ebc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400ebc:	b580      	push	{r7, lr}
  400ebe:	b084      	sub	sp, #16
  400ec0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  400ec2:	4b1e      	ldr	r3, [pc, #120]	; (400f3c <Reset_Handler+0x80>)
  400ec4:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  400ec6:	4b1e      	ldr	r3, [pc, #120]	; (400f40 <Reset_Handler+0x84>)
  400ec8:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  400eca:	68fa      	ldr	r2, [r7, #12]
  400ecc:	68bb      	ldr	r3, [r7, #8]
  400ece:	429a      	cmp	r2, r3
  400ed0:	d00c      	beq.n	400eec <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  400ed2:	e007      	b.n	400ee4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  400ed4:	68bb      	ldr	r3, [r7, #8]
  400ed6:	1d1a      	adds	r2, r3, #4
  400ed8:	60ba      	str	r2, [r7, #8]
  400eda:	68fa      	ldr	r2, [r7, #12]
  400edc:	1d11      	adds	r1, r2, #4
  400ede:	60f9      	str	r1, [r7, #12]
  400ee0:	6812      	ldr	r2, [r2, #0]
  400ee2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  400ee4:	68bb      	ldr	r3, [r7, #8]
  400ee6:	4a17      	ldr	r2, [pc, #92]	; (400f44 <Reset_Handler+0x88>)
  400ee8:	4293      	cmp	r3, r2
  400eea:	d3f3      	bcc.n	400ed4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400eec:	4b16      	ldr	r3, [pc, #88]	; (400f48 <Reset_Handler+0x8c>)
  400eee:	60bb      	str	r3, [r7, #8]
  400ef0:	e004      	b.n	400efc <Reset_Handler+0x40>
                *pDest++ = 0;
  400ef2:	68bb      	ldr	r3, [r7, #8]
  400ef4:	1d1a      	adds	r2, r3, #4
  400ef6:	60ba      	str	r2, [r7, #8]
  400ef8:	2200      	movs	r2, #0
  400efa:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  400efc:	68bb      	ldr	r3, [r7, #8]
  400efe:	4a13      	ldr	r2, [pc, #76]	; (400f4c <Reset_Handler+0x90>)
  400f00:	4293      	cmp	r3, r2
  400f02:	d3f6      	bcc.n	400ef2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  400f04:	4b12      	ldr	r3, [pc, #72]	; (400f50 <Reset_Handler+0x94>)
  400f06:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400f08:	4a12      	ldr	r2, [pc, #72]	; (400f54 <Reset_Handler+0x98>)
  400f0a:	68fb      	ldr	r3, [r7, #12]
  400f0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400f10:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  400f12:	4b11      	ldr	r3, [pc, #68]	; (400f58 <Reset_Handler+0x9c>)
  400f14:	4798      	blx	r3
  400f16:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  400f18:	4a10      	ldr	r2, [pc, #64]	; (400f5c <Reset_Handler+0xa0>)
  400f1a:	4b10      	ldr	r3, [pc, #64]	; (400f5c <Reset_Handler+0xa0>)
  400f1c:	681b      	ldr	r3, [r3, #0]
  400f1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400f22:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400f24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f28:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  400f2c:	6878      	ldr	r0, [r7, #4]
  400f2e:	4b0c      	ldr	r3, [pc, #48]	; (400f60 <Reset_Handler+0xa4>)
  400f30:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  400f32:	4b0c      	ldr	r3, [pc, #48]	; (400f64 <Reset_Handler+0xa8>)
  400f34:	4798      	blx	r3

        /* Branch to main function */
        main();
  400f36:	4b0c      	ldr	r3, [pc, #48]	; (400f68 <Reset_Handler+0xac>)
  400f38:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400f3a:	e7fe      	b.n	400f3a <Reset_Handler+0x7e>
  400f3c:	0040288c 	.word	0x0040288c
  400f40:	20400000 	.word	0x20400000
  400f44:	2040090c 	.word	0x2040090c
  400f48:	2040090c 	.word	0x2040090c
  400f4c:	204009c4 	.word	0x204009c4
  400f50:	00400000 	.word	0x00400000
  400f54:	e000ed00 	.word	0xe000ed00
  400f58:	00400e35 	.word	0x00400e35
  400f5c:	e000ed88 	.word	0xe000ed88
  400f60:	00400e8d 	.word	0x00400e8d
  400f64:	004026ed 	.word	0x004026ed
  400f68:	004018d9 	.word	0x004018d9

00400f6c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400f6c:	b480      	push	{r7}
  400f6e:	af00      	add	r7, sp, #0
        while (1) {
  400f70:	e7fe      	b.n	400f70 <Dummy_Handler+0x4>
	...

00400f74 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  400f74:	b480      	push	{r7}
  400f76:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400f78:	4b52      	ldr	r3, [pc, #328]	; (4010c4 <SystemCoreClockUpdate+0x150>)
  400f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f7c:	f003 0303 	and.w	r3, r3, #3
  400f80:	2b01      	cmp	r3, #1
  400f82:	d014      	beq.n	400fae <SystemCoreClockUpdate+0x3a>
  400f84:	2b01      	cmp	r3, #1
  400f86:	d302      	bcc.n	400f8e <SystemCoreClockUpdate+0x1a>
  400f88:	2b02      	cmp	r3, #2
  400f8a:	d038      	beq.n	400ffe <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  400f8c:	e07a      	b.n	401084 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400f8e:	4b4e      	ldr	r3, [pc, #312]	; (4010c8 <SystemCoreClockUpdate+0x154>)
  400f90:	695b      	ldr	r3, [r3, #20]
  400f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400f96:	2b00      	cmp	r3, #0
  400f98:	d004      	beq.n	400fa4 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400f9a:	4b4c      	ldr	r3, [pc, #304]	; (4010cc <SystemCoreClockUpdate+0x158>)
  400f9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400fa0:	601a      	str	r2, [r3, #0]
    break;
  400fa2:	e06f      	b.n	401084 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400fa4:	4b49      	ldr	r3, [pc, #292]	; (4010cc <SystemCoreClockUpdate+0x158>)
  400fa6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  400faa:	601a      	str	r2, [r3, #0]
    break;
  400fac:	e06a      	b.n	401084 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400fae:	4b45      	ldr	r3, [pc, #276]	; (4010c4 <SystemCoreClockUpdate+0x150>)
  400fb0:	6a1b      	ldr	r3, [r3, #32]
  400fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400fb6:	2b00      	cmp	r3, #0
  400fb8:	d003      	beq.n	400fc2 <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400fba:	4b44      	ldr	r3, [pc, #272]	; (4010cc <SystemCoreClockUpdate+0x158>)
  400fbc:	4a44      	ldr	r2, [pc, #272]	; (4010d0 <SystemCoreClockUpdate+0x15c>)
  400fbe:	601a      	str	r2, [r3, #0]
    break;
  400fc0:	e060      	b.n	401084 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400fc2:	4b42      	ldr	r3, [pc, #264]	; (4010cc <SystemCoreClockUpdate+0x158>)
  400fc4:	4a43      	ldr	r2, [pc, #268]	; (4010d4 <SystemCoreClockUpdate+0x160>)
  400fc6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400fc8:	4b3e      	ldr	r3, [pc, #248]	; (4010c4 <SystemCoreClockUpdate+0x150>)
  400fca:	6a1b      	ldr	r3, [r3, #32]
  400fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400fd0:	2b10      	cmp	r3, #16
  400fd2:	d004      	beq.n	400fde <SystemCoreClockUpdate+0x6a>
  400fd4:	2b20      	cmp	r3, #32
  400fd6:	d008      	beq.n	400fea <SystemCoreClockUpdate+0x76>
  400fd8:	2b00      	cmp	r3, #0
  400fda:	d00e      	beq.n	400ffa <SystemCoreClockUpdate+0x86>
          break;
  400fdc:	e00e      	b.n	400ffc <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  400fde:	4b3b      	ldr	r3, [pc, #236]	; (4010cc <SystemCoreClockUpdate+0x158>)
  400fe0:	681b      	ldr	r3, [r3, #0]
  400fe2:	005b      	lsls	r3, r3, #1
  400fe4:	4a39      	ldr	r2, [pc, #228]	; (4010cc <SystemCoreClockUpdate+0x158>)
  400fe6:	6013      	str	r3, [r2, #0]
          break;
  400fe8:	e008      	b.n	400ffc <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  400fea:	4b38      	ldr	r3, [pc, #224]	; (4010cc <SystemCoreClockUpdate+0x158>)
  400fec:	681a      	ldr	r2, [r3, #0]
  400fee:	4613      	mov	r3, r2
  400ff0:	005b      	lsls	r3, r3, #1
  400ff2:	4413      	add	r3, r2
  400ff4:	4a35      	ldr	r2, [pc, #212]	; (4010cc <SystemCoreClockUpdate+0x158>)
  400ff6:	6013      	str	r3, [r2, #0]
          break;
  400ff8:	e000      	b.n	400ffc <SystemCoreClockUpdate+0x88>
          break;
  400ffa:	bf00      	nop
    break;
  400ffc:	e042      	b.n	401084 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ffe:	4b31      	ldr	r3, [pc, #196]	; (4010c4 <SystemCoreClockUpdate+0x150>)
  401000:	6a1b      	ldr	r3, [r3, #32]
  401002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401006:	2b00      	cmp	r3, #0
  401008:	d003      	beq.n	401012 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40100a:	4b30      	ldr	r3, [pc, #192]	; (4010cc <SystemCoreClockUpdate+0x158>)
  40100c:	4a30      	ldr	r2, [pc, #192]	; (4010d0 <SystemCoreClockUpdate+0x15c>)
  40100e:	601a      	str	r2, [r3, #0]
  401010:	e01c      	b.n	40104c <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401012:	4b2e      	ldr	r3, [pc, #184]	; (4010cc <SystemCoreClockUpdate+0x158>)
  401014:	4a2f      	ldr	r2, [pc, #188]	; (4010d4 <SystemCoreClockUpdate+0x160>)
  401016:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401018:	4b2a      	ldr	r3, [pc, #168]	; (4010c4 <SystemCoreClockUpdate+0x150>)
  40101a:	6a1b      	ldr	r3, [r3, #32]
  40101c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401020:	2b10      	cmp	r3, #16
  401022:	d004      	beq.n	40102e <SystemCoreClockUpdate+0xba>
  401024:	2b20      	cmp	r3, #32
  401026:	d008      	beq.n	40103a <SystemCoreClockUpdate+0xc6>
  401028:	2b00      	cmp	r3, #0
  40102a:	d00e      	beq.n	40104a <SystemCoreClockUpdate+0xd6>
          break;
  40102c:	e00e      	b.n	40104c <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  40102e:	4b27      	ldr	r3, [pc, #156]	; (4010cc <SystemCoreClockUpdate+0x158>)
  401030:	681b      	ldr	r3, [r3, #0]
  401032:	005b      	lsls	r3, r3, #1
  401034:	4a25      	ldr	r2, [pc, #148]	; (4010cc <SystemCoreClockUpdate+0x158>)
  401036:	6013      	str	r3, [r2, #0]
          break;
  401038:	e008      	b.n	40104c <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  40103a:	4b24      	ldr	r3, [pc, #144]	; (4010cc <SystemCoreClockUpdate+0x158>)
  40103c:	681a      	ldr	r2, [r3, #0]
  40103e:	4613      	mov	r3, r2
  401040:	005b      	lsls	r3, r3, #1
  401042:	4413      	add	r3, r2
  401044:	4a21      	ldr	r2, [pc, #132]	; (4010cc <SystemCoreClockUpdate+0x158>)
  401046:	6013      	str	r3, [r2, #0]
          break;
  401048:	e000      	b.n	40104c <SystemCoreClockUpdate+0xd8>
          break;
  40104a:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40104c:	4b1d      	ldr	r3, [pc, #116]	; (4010c4 <SystemCoreClockUpdate+0x150>)
  40104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401050:	f003 0303 	and.w	r3, r3, #3
  401054:	2b02      	cmp	r3, #2
  401056:	d114      	bne.n	401082 <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401058:	4b1a      	ldr	r3, [pc, #104]	; (4010c4 <SystemCoreClockUpdate+0x150>)
  40105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40105c:	0c1b      	lsrs	r3, r3, #16
  40105e:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401062:	3301      	adds	r3, #1
  401064:	4a19      	ldr	r2, [pc, #100]	; (4010cc <SystemCoreClockUpdate+0x158>)
  401066:	6812      	ldr	r2, [r2, #0]
  401068:	fb02 f303 	mul.w	r3, r2, r3
  40106c:	4a17      	ldr	r2, [pc, #92]	; (4010cc <SystemCoreClockUpdate+0x158>)
  40106e:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401070:	4b14      	ldr	r3, [pc, #80]	; (4010c4 <SystemCoreClockUpdate+0x150>)
  401072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401074:	b2db      	uxtb	r3, r3
  401076:	4a15      	ldr	r2, [pc, #84]	; (4010cc <SystemCoreClockUpdate+0x158>)
  401078:	6812      	ldr	r2, [r2, #0]
  40107a:	fbb2 f3f3 	udiv	r3, r2, r3
  40107e:	4a13      	ldr	r2, [pc, #76]	; (4010cc <SystemCoreClockUpdate+0x158>)
  401080:	6013      	str	r3, [r2, #0]
    break;
  401082:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401084:	4b0f      	ldr	r3, [pc, #60]	; (4010c4 <SystemCoreClockUpdate+0x150>)
  401086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401088:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40108c:	2b70      	cmp	r3, #112	; 0x70
  40108e:	d108      	bne.n	4010a2 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401090:	4b0e      	ldr	r3, [pc, #56]	; (4010cc <SystemCoreClockUpdate+0x158>)
  401092:	681b      	ldr	r3, [r3, #0]
  401094:	4a10      	ldr	r2, [pc, #64]	; (4010d8 <SystemCoreClockUpdate+0x164>)
  401096:	fba2 2303 	umull	r2, r3, r2, r3
  40109a:	085b      	lsrs	r3, r3, #1
  40109c:	4a0b      	ldr	r2, [pc, #44]	; (4010cc <SystemCoreClockUpdate+0x158>)
  40109e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  4010a0:	e00a      	b.n	4010b8 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4010a2:	4b08      	ldr	r3, [pc, #32]	; (4010c4 <SystemCoreClockUpdate+0x150>)
  4010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010a6:	091b      	lsrs	r3, r3, #4
  4010a8:	f003 0307 	and.w	r3, r3, #7
  4010ac:	4a07      	ldr	r2, [pc, #28]	; (4010cc <SystemCoreClockUpdate+0x158>)
  4010ae:	6812      	ldr	r2, [r2, #0]
  4010b0:	fa22 f303 	lsr.w	r3, r2, r3
  4010b4:	4a05      	ldr	r2, [pc, #20]	; (4010cc <SystemCoreClockUpdate+0x158>)
  4010b6:	6013      	str	r3, [r2, #0]
}
  4010b8:	bf00      	nop
  4010ba:	46bd      	mov	sp, r7
  4010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010c0:	4770      	bx	lr
  4010c2:	bf00      	nop
  4010c4:	400e0600 	.word	0x400e0600
  4010c8:	400e1810 	.word	0x400e1810
  4010cc:	2040000c 	.word	0x2040000c
  4010d0:	00b71b00 	.word	0x00b71b00
  4010d4:	003d0900 	.word	0x003d0900
  4010d8:	aaaaaaab 	.word	0xaaaaaaab

004010dc <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4010dc:	b480      	push	{r7}
  4010de:	b083      	sub	sp, #12
  4010e0:	af00      	add	r7, sp, #0
  4010e2:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4010e4:	687b      	ldr	r3, [r7, #4]
  4010e6:	4a19      	ldr	r2, [pc, #100]	; (40114c <system_init_flash+0x70>)
  4010e8:	4293      	cmp	r3, r2
  4010ea:	d804      	bhi.n	4010f6 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4010ec:	4b18      	ldr	r3, [pc, #96]	; (401150 <system_init_flash+0x74>)
  4010ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4010f2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4010f4:	e023      	b.n	40113e <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  4010f6:	687b      	ldr	r3, [r7, #4]
  4010f8:	4a16      	ldr	r2, [pc, #88]	; (401154 <system_init_flash+0x78>)
  4010fa:	4293      	cmp	r3, r2
  4010fc:	d803      	bhi.n	401106 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4010fe:	4b14      	ldr	r3, [pc, #80]	; (401150 <system_init_flash+0x74>)
  401100:	4a15      	ldr	r2, [pc, #84]	; (401158 <system_init_flash+0x7c>)
  401102:	601a      	str	r2, [r3, #0]
}
  401104:	e01b      	b.n	40113e <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  401106:	687b      	ldr	r3, [r7, #4]
  401108:	4a14      	ldr	r2, [pc, #80]	; (40115c <system_init_flash+0x80>)
  40110a:	4293      	cmp	r3, r2
  40110c:	d803      	bhi.n	401116 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40110e:	4b10      	ldr	r3, [pc, #64]	; (401150 <system_init_flash+0x74>)
  401110:	4a13      	ldr	r2, [pc, #76]	; (401160 <system_init_flash+0x84>)
  401112:	601a      	str	r2, [r3, #0]
}
  401114:	e013      	b.n	40113e <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401116:	687b      	ldr	r3, [r7, #4]
  401118:	4a12      	ldr	r2, [pc, #72]	; (401164 <system_init_flash+0x88>)
  40111a:	4293      	cmp	r3, r2
  40111c:	d803      	bhi.n	401126 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40111e:	4b0c      	ldr	r3, [pc, #48]	; (401150 <system_init_flash+0x74>)
  401120:	4a11      	ldr	r2, [pc, #68]	; (401168 <system_init_flash+0x8c>)
  401122:	601a      	str	r2, [r3, #0]
}
  401124:	e00b      	b.n	40113e <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401126:	687b      	ldr	r3, [r7, #4]
  401128:	4a10      	ldr	r2, [pc, #64]	; (40116c <system_init_flash+0x90>)
  40112a:	4293      	cmp	r3, r2
  40112c:	d804      	bhi.n	401138 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40112e:	4b08      	ldr	r3, [pc, #32]	; (401150 <system_init_flash+0x74>)
  401130:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401134:	601a      	str	r2, [r3, #0]
}
  401136:	e002      	b.n	40113e <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401138:	4b05      	ldr	r3, [pc, #20]	; (401150 <system_init_flash+0x74>)
  40113a:	4a0d      	ldr	r2, [pc, #52]	; (401170 <system_init_flash+0x94>)
  40113c:	601a      	str	r2, [r3, #0]
}
  40113e:	bf00      	nop
  401140:	370c      	adds	r7, #12
  401142:	46bd      	mov	sp, r7
  401144:	f85d 7b04 	ldr.w	r7, [sp], #4
  401148:	4770      	bx	lr
  40114a:	bf00      	nop
  40114c:	01312cff 	.word	0x01312cff
  401150:	400e0c00 	.word	0x400e0c00
  401154:	026259ff 	.word	0x026259ff
  401158:	04000100 	.word	0x04000100
  40115c:	039386ff 	.word	0x039386ff
  401160:	04000200 	.word	0x04000200
  401164:	04c4b3ff 	.word	0x04c4b3ff
  401168:	04000300 	.word	0x04000300
  40116c:	05f5e0ff 	.word	0x05f5e0ff
  401170:	04000500 	.word	0x04000500

00401174 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401174:	b480      	push	{r7}
  401176:	b083      	sub	sp, #12
  401178:	af00      	add	r7, sp, #0
  40117a:	4603      	mov	r3, r0
  40117c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40117e:	4909      	ldr	r1, [pc, #36]	; (4011a4 <NVIC_EnableIRQ+0x30>)
  401180:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401184:	095b      	lsrs	r3, r3, #5
  401186:	79fa      	ldrb	r2, [r7, #7]
  401188:	f002 021f 	and.w	r2, r2, #31
  40118c:	2001      	movs	r0, #1
  40118e:	fa00 f202 	lsl.w	r2, r0, r2
  401192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401196:	bf00      	nop
  401198:	370c      	adds	r7, #12
  40119a:	46bd      	mov	sp, r7
  40119c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011a0:	4770      	bx	lr
  4011a2:	bf00      	nop
  4011a4:	e000e100 	.word	0xe000e100

004011a8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4011a8:	b480      	push	{r7}
  4011aa:	b083      	sub	sp, #12
  4011ac:	af00      	add	r7, sp, #0
  4011ae:	4603      	mov	r3, r0
  4011b0:	6039      	str	r1, [r7, #0]
  4011b2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4011b8:	2b00      	cmp	r3, #0
  4011ba:	da0b      	bge.n	4011d4 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4011bc:	490d      	ldr	r1, [pc, #52]	; (4011f4 <NVIC_SetPriority+0x4c>)
  4011be:	79fb      	ldrb	r3, [r7, #7]
  4011c0:	f003 030f 	and.w	r3, r3, #15
  4011c4:	3b04      	subs	r3, #4
  4011c6:	683a      	ldr	r2, [r7, #0]
  4011c8:	b2d2      	uxtb	r2, r2
  4011ca:	0152      	lsls	r2, r2, #5
  4011cc:	b2d2      	uxtb	r2, r2
  4011ce:	440b      	add	r3, r1
  4011d0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  4011d2:	e009      	b.n	4011e8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4011d4:	4908      	ldr	r1, [pc, #32]	; (4011f8 <NVIC_SetPriority+0x50>)
  4011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4011da:	683a      	ldr	r2, [r7, #0]
  4011dc:	b2d2      	uxtb	r2, r2
  4011de:	0152      	lsls	r2, r2, #5
  4011e0:	b2d2      	uxtb	r2, r2
  4011e2:	440b      	add	r3, r1
  4011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4011e8:	bf00      	nop
  4011ea:	370c      	adds	r7, #12
  4011ec:	46bd      	mov	sp, r7
  4011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011f2:	4770      	bx	lr
  4011f4:	e000ed00 	.word	0xe000ed00
  4011f8:	e000e100 	.word	0xe000e100

004011fc <osc_get_rate>:
{
  4011fc:	b480      	push	{r7}
  4011fe:	b083      	sub	sp, #12
  401200:	af00      	add	r7, sp, #0
  401202:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401204:	687b      	ldr	r3, [r7, #4]
  401206:	2b07      	cmp	r3, #7
  401208:	d825      	bhi.n	401256 <osc_get_rate+0x5a>
  40120a:	a201      	add	r2, pc, #4	; (adr r2, 401210 <osc_get_rate+0x14>)
  40120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401210:	00401231 	.word	0x00401231
  401214:	00401237 	.word	0x00401237
  401218:	0040123d 	.word	0x0040123d
  40121c:	00401243 	.word	0x00401243
  401220:	00401247 	.word	0x00401247
  401224:	0040124b 	.word	0x0040124b
  401228:	0040124f 	.word	0x0040124f
  40122c:	00401253 	.word	0x00401253
		return OSC_SLCK_32K_RC_HZ;
  401230:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401234:	e010      	b.n	401258 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40123a:	e00d      	b.n	401258 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40123c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401240:	e00a      	b.n	401258 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401242:	4b08      	ldr	r3, [pc, #32]	; (401264 <osc_get_rate+0x68>)
  401244:	e008      	b.n	401258 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401246:	4b08      	ldr	r3, [pc, #32]	; (401268 <osc_get_rate+0x6c>)
  401248:	e006      	b.n	401258 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40124a:	4b08      	ldr	r3, [pc, #32]	; (40126c <osc_get_rate+0x70>)
  40124c:	e004      	b.n	401258 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40124e:	4b07      	ldr	r3, [pc, #28]	; (40126c <osc_get_rate+0x70>)
  401250:	e002      	b.n	401258 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401252:	4b06      	ldr	r3, [pc, #24]	; (40126c <osc_get_rate+0x70>)
  401254:	e000      	b.n	401258 <osc_get_rate+0x5c>
	return 0;
  401256:	2300      	movs	r3, #0
}
  401258:	4618      	mov	r0, r3
  40125a:	370c      	adds	r7, #12
  40125c:	46bd      	mov	sp, r7
  40125e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401262:	4770      	bx	lr
  401264:	003d0900 	.word	0x003d0900
  401268:	007a1200 	.word	0x007a1200
  40126c:	00b71b00 	.word	0x00b71b00

00401270 <sysclk_get_main_hz>:
{
  401270:	b580      	push	{r7, lr}
  401272:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401274:	2006      	movs	r0, #6
  401276:	4b05      	ldr	r3, [pc, #20]	; (40128c <sysclk_get_main_hz+0x1c>)
  401278:	4798      	blx	r3
  40127a:	4602      	mov	r2, r0
  40127c:	4613      	mov	r3, r2
  40127e:	009b      	lsls	r3, r3, #2
  401280:	4413      	add	r3, r2
  401282:	009a      	lsls	r2, r3, #2
  401284:	4413      	add	r3, r2
}
  401286:	4618      	mov	r0, r3
  401288:	bd80      	pop	{r7, pc}
  40128a:	bf00      	nop
  40128c:	004011fd 	.word	0x004011fd

00401290 <sysclk_get_cpu_hz>:
{
  401290:	b580      	push	{r7, lr}
  401292:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401294:	4b02      	ldr	r3, [pc, #8]	; (4012a0 <sysclk_get_cpu_hz+0x10>)
  401296:	4798      	blx	r3
  401298:	4603      	mov	r3, r0
}
  40129a:	4618      	mov	r0, r3
  40129c:	bd80      	pop	{r7, pc}
  40129e:	bf00      	nop
  4012a0:	00401271 	.word	0x00401271

004012a4 <but_callBack>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void but_callBack(void){
  4012a4:	b480      	push	{r7}
  4012a6:	af00      	add	r7, sp, #0
	pause = !pause;
  4012a8:	4b07      	ldr	r3, [pc, #28]	; (4012c8 <but_callBack+0x24>)
  4012aa:	781b      	ldrb	r3, [r3, #0]
  4012ac:	b2db      	uxtb	r3, r3
  4012ae:	2b00      	cmp	r3, #0
  4012b0:	bf0c      	ite	eq
  4012b2:	2301      	moveq	r3, #1
  4012b4:	2300      	movne	r3, #0
  4012b6:	b2db      	uxtb	r3, r3
  4012b8:	461a      	mov	r2, r3
  4012ba:	4b03      	ldr	r3, [pc, #12]	; (4012c8 <but_callBack+0x24>)
  4012bc:	701a      	strb	r2, [r3, #0]
}
  4012be:	bf00      	nop
  4012c0:	46bd      	mov	sp, r7
  4012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012c6:	4770      	bx	lr
  4012c8:	2040099c 	.word	0x2040099c

004012cc <but1_callBack>:
void but1_callBack(void){
  4012cc:	b480      	push	{r7}
  4012ce:	af00      	add	r7, sp, #0
	but1_flag = 1;
  4012d0:	4b03      	ldr	r3, [pc, #12]	; (4012e0 <but1_callBack+0x14>)
  4012d2:	2201      	movs	r2, #1
  4012d4:	701a      	strb	r2, [r3, #0]
}
  4012d6:	bf00      	nop
  4012d8:	46bd      	mov	sp, r7
  4012da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012de:	4770      	bx	lr
  4012e0:	2040099d 	.word	0x2040099d

004012e4 <but2_callBack>:
void but2_callBack(void){
  4012e4:	b480      	push	{r7}
  4012e6:	af00      	add	r7, sp, #0
	but2_flag = 1;
  4012e8:	4b03      	ldr	r3, [pc, #12]	; (4012f8 <but2_callBack+0x14>)
  4012ea:	2201      	movs	r2, #1
  4012ec:	701a      	strb	r2, [r3, #0]
}
  4012ee:	bf00      	nop
  4012f0:	46bd      	mov	sp, r7
  4012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012f6:	4770      	bx	lr
  4012f8:	2040099f 	.word	0x2040099f

004012fc <but3_callBack>:
void but3_callBack(void){
  4012fc:	b480      	push	{r7}
  4012fe:	af00      	add	r7, sp, #0
	but3_flag = 1;
  401300:	4b03      	ldr	r3, [pc, #12]	; (401310 <but3_callBack+0x14>)
  401302:	2201      	movs	r2, #1
  401304:	701a      	strb	r2, [r3, #0]
}
  401306:	bf00      	nop
  401308:	46bd      	mov	sp, r7
  40130a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40130e:	4770      	bx	lr
  401310:	2040099e 	.word	0x2040099e

00401314 <init>:
// Função de inicialização do uC e config correta dos perifericos e pinos
void init(void)
{
  401314:	b590      	push	{r4, r7, lr}
  401316:	b083      	sub	sp, #12
  401318:	af02      	add	r7, sp, #8
	//inicializa board clock
	sysclk_init();
  40131a:	4b68      	ldr	r3, [pc, #416]	; (4014bc <init+0x1a8>)
  40131c:	4798      	blx	r3
	
	//desativa WatchDog Timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  40131e:	4b68      	ldr	r3, [pc, #416]	; (4014c0 <init+0x1ac>)
  401320:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401324:	605a      	str	r2, [r3, #4]
	
	//BUZZER
	pmc_enable_periph_clk(BUZ_PIO_ID); //inicializa pio do buzzer
  401326:	200c      	movs	r0, #12
  401328:	4b66      	ldr	r3, [pc, #408]	; (4014c4 <init+0x1b0>)
  40132a:	4798      	blx	r3
	pio_set_output(BUZ_PIO, BUZ_PIO_IDX_MASK, 0, 0,0 );
  40132c:	2300      	movs	r3, #0
  40132e:	9300      	str	r3, [sp, #0]
  401330:	2300      	movs	r3, #0
  401332:	2200      	movs	r2, #0
  401334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401338:	4863      	ldr	r0, [pc, #396]	; (4014c8 <init+0x1b4>)
  40133a:	4c64      	ldr	r4, [pc, #400]	; (4014cc <init+0x1b8>)
  40133c:	47a0      	blx	r4
	
	//Ativa o PIO na qual o LED foi conectado
	// para que possamos controlar o LED
	pmc_enable_periph_clk(LED_PIO_ID);
  40133e:	200c      	movs	r0, #12
  401340:	4b60      	ldr	r3, [pc, #384]	; (4014c4 <init+0x1b0>)
  401342:	4798      	blx	r3
	pmc_enable_periph_clk(LED1_PIO_ID);
  401344:	200a      	movs	r0, #10
  401346:	4b5f      	ldr	r3, [pc, #380]	; (4014c4 <init+0x1b0>)
  401348:	4798      	blx	r3
	pmc_enable_periph_clk(LED2_PIO_ID);
  40134a:	200c      	movs	r0, #12
  40134c:	4b5d      	ldr	r3, [pc, #372]	; (4014c4 <init+0x1b0>)
  40134e:	4798      	blx	r3
	pmc_enable_periph_clk(LED3_PIO_ID);
  401350:	200b      	movs	r0, #11
  401352:	4b5c      	ldr	r3, [pc, #368]	; (4014c4 <init+0x1b0>)
  401354:	4798      	blx	r3
	
	//Inicializa o PC8 como saida
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 0, 0, 0);
  401356:	2300      	movs	r3, #0
  401358:	9300      	str	r3, [sp, #0]
  40135a:	2300      	movs	r3, #0
  40135c:	2200      	movs	r2, #0
  40135e:	f44f 7180 	mov.w	r1, #256	; 0x100
  401362:	4859      	ldr	r0, [pc, #356]	; (4014c8 <init+0x1b4>)
  401364:	4c59      	ldr	r4, [pc, #356]	; (4014cc <init+0x1b8>)
  401366:	47a0      	blx	r4
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, 0, 0, 0);
  401368:	2300      	movs	r3, #0
  40136a:	9300      	str	r3, [sp, #0]
  40136c:	2300      	movs	r3, #0
  40136e:	2200      	movs	r2, #0
  401370:	2101      	movs	r1, #1
  401372:	4857      	ldr	r0, [pc, #348]	; (4014d0 <init+0x1bc>)
  401374:	4c55      	ldr	r4, [pc, #340]	; (4014cc <init+0x1b8>)
  401376:	47a0      	blx	r4
	pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, 0, 0, 0);
  401378:	2300      	movs	r3, #0
  40137a:	9300      	str	r3, [sp, #0]
  40137c:	2300      	movs	r3, #0
  40137e:	2200      	movs	r2, #0
  401380:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401384:	4850      	ldr	r0, [pc, #320]	; (4014c8 <init+0x1b4>)
  401386:	4c51      	ldr	r4, [pc, #324]	; (4014cc <init+0x1b8>)
  401388:	47a0      	blx	r4
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, 0, 0, 0);
  40138a:	2300      	movs	r3, #0
  40138c:	9300      	str	r3, [sp, #0]
  40138e:	2300      	movs	r3, #0
  401390:	2200      	movs	r2, #0
  401392:	2104      	movs	r1, #4
  401394:	484f      	ldr	r0, [pc, #316]	; (4014d4 <init+0x1c0>)
  401396:	4c4d      	ldr	r4, [pc, #308]	; (4014cc <init+0x1b8>)
  401398:	47a0      	blx	r4
	
	// Inicializa PIO do botao
	pmc_enable_periph_clk(BUT_PIO_ID);
  40139a:	200a      	movs	r0, #10
  40139c:	4b49      	ldr	r3, [pc, #292]	; (4014c4 <init+0x1b0>)
  40139e:	4798      	blx	r3
	pmc_enable_periph_clk(BUT1_PIO_ID);
  4013a0:	2010      	movs	r0, #16
  4013a2:	4b48      	ldr	r3, [pc, #288]	; (4014c4 <init+0x1b0>)
  4013a4:	4798      	blx	r3
	pmc_enable_periph_clk(BUT2_PIO_ID);
  4013a6:	200c      	movs	r0, #12
  4013a8:	4b46      	ldr	r3, [pc, #280]	; (4014c4 <init+0x1b0>)
  4013aa:	4798      	blx	r3
	pmc_enable_periph_clk(BUT3_PIO_ID);
  4013ac:	200a      	movs	r0, #10
  4013ae:	4b45      	ldr	r3, [pc, #276]	; (4014c4 <init+0x1b0>)
  4013b0:	4798      	blx	r3
	
	// configura pino ligado ao botão como entrada com um pull-up.
	pio_configure(BUT_PIO, PIO_INPUT, BUT_PIO_IDX_MASK, PIO_PULLUP);
  4013b2:	2301      	movs	r3, #1
  4013b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4013b8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4013bc:	4844      	ldr	r0, [pc, #272]	; (4014d0 <init+0x1bc>)
  4013be:	4c46      	ldr	r4, [pc, #280]	; (4014d8 <init+0x1c4>)
  4013c0:	47a0      	blx	r4
//	pio_set_input(BUT_PIO, BUT_PIO_IDX_MASK, PIO_DEFAULT);
	pio_set_input(BUT1_PIO, BUT1_PIO_IDX_MASK, PIO_PULLUP); //??? PIO DEFAULT?
  4013c2:	2201      	movs	r2, #1
  4013c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013c8:	4844      	ldr	r0, [pc, #272]	; (4014dc <init+0x1c8>)
  4013ca:	4b45      	ldr	r3, [pc, #276]	; (4014e0 <init+0x1cc>)
  4013cc:	4798      	blx	r3
	pio_set_input(BUT2_PIO, BUT2_PIO_IDX_MASK, PIO_PULLUP);
  4013ce:	2201      	movs	r2, #1
  4013d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4013d4:	483c      	ldr	r0, [pc, #240]	; (4014c8 <init+0x1b4>)
  4013d6:	4b42      	ldr	r3, [pc, #264]	; (4014e0 <init+0x1cc>)
  4013d8:	4798      	blx	r3
	pio_set_input(BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_PULLUP);
  4013da:	2201      	movs	r2, #1
  4013dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4013e0:	200a      	movs	r0, #10
  4013e2:	4b3f      	ldr	r3, [pc, #252]	; (4014e0 <init+0x1cc>)
  4013e4:	4798      	blx	r3
	
	//?
	// Configura interrupção no pino referente ao botao e associa
	// função de callback caso uma interrupção for gerada
	// a função de callback é a: but_callback()
	pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIO_IDX_MASK, PIO_IT_RISE_EDGE, but_callBack);
  4013e6:	4b3f      	ldr	r3, [pc, #252]	; (4014e4 <init+0x1d0>)
  4013e8:	9300      	str	r3, [sp, #0]
  4013ea:	2370      	movs	r3, #112	; 0x70
  4013ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4013f0:	210a      	movs	r1, #10
  4013f2:	4837      	ldr	r0, [pc, #220]	; (4014d0 <init+0x1bc>)
  4013f4:	4c3c      	ldr	r4, [pc, #240]	; (4014e8 <init+0x1d4>)
  4013f6:	47a0      	blx	r4
	pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but1_callBack);
  4013f8:	4b3c      	ldr	r3, [pc, #240]	; (4014ec <init+0x1d8>)
  4013fa:	9300      	str	r3, [sp, #0]
  4013fc:	2350      	movs	r3, #80	; 0x50
  4013fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401402:	2110      	movs	r1, #16
  401404:	4835      	ldr	r0, [pc, #212]	; (4014dc <init+0x1c8>)
  401406:	4c38      	ldr	r4, [pc, #224]	; (4014e8 <init+0x1d4>)
  401408:	47a0      	blx	r4
	pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but2_callBack);
  40140a:	4b39      	ldr	r3, [pc, #228]	; (4014f0 <init+0x1dc>)
  40140c:	9300      	str	r3, [sp, #0]
  40140e:	2350      	movs	r3, #80	; 0x50
  401410:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401414:	210c      	movs	r1, #12
  401416:	482c      	ldr	r0, [pc, #176]	; (4014c8 <init+0x1b4>)
  401418:	4c33      	ldr	r4, [pc, #204]	; (4014e8 <init+0x1d4>)
  40141a:	47a0      	blx	r4
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but3_callBack);
  40141c:	4b35      	ldr	r3, [pc, #212]	; (4014f4 <init+0x1e0>)
  40141e:	9300      	str	r3, [sp, #0]
  401420:	2350      	movs	r3, #80	; 0x50
  401422:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401426:	210a      	movs	r1, #10
  401428:	4829      	ldr	r0, [pc, #164]	; (4014d0 <init+0x1bc>)
  40142a:	4c2f      	ldr	r4, [pc, #188]	; (4014e8 <init+0x1d4>)
  40142c:	47a0      	blx	r4


	
	//Ativar o pull-up
	//pio_pull_up(BUT_PIO, BUT_PIO_IDX_MASK, 1);
	pio_pull_up(BUT1_PIO, BUT1_PIO_IDX_MASK, 1);
  40142e:	2201      	movs	r2, #1
  401430:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401434:	4829      	ldr	r0, [pc, #164]	; (4014dc <init+0x1c8>)
  401436:	4b30      	ldr	r3, [pc, #192]	; (4014f8 <init+0x1e4>)
  401438:	4798      	blx	r3
	pio_pull_up(BUT2_PIO, BUT2_PIO_IDX_MASK, 1);
  40143a:	2201      	movs	r2, #1
  40143c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401440:	4821      	ldr	r0, [pc, #132]	; (4014c8 <init+0x1b4>)
  401442:	4b2d      	ldr	r3, [pc, #180]	; (4014f8 <init+0x1e4>)
  401444:	4798      	blx	r3
	pio_pull_up(BUT3_PIO, BUT3_PIO_IDX_MASK, 1);
  401446:	2201      	movs	r2, #1
  401448:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40144c:	4820      	ldr	r0, [pc, #128]	; (4014d0 <init+0x1bc>)
  40144e:	4b2a      	ldr	r3, [pc, #168]	; (4014f8 <init+0x1e4>)
  401450:	4798      	blx	r3
	
	//?
	// Ativa interrupção
	pio_enable_interrupt(BUT_PIO, BUT_PIO_IDX_MASK);
  401452:	f44f 6100 	mov.w	r1, #2048	; 0x800
  401456:	481e      	ldr	r0, [pc, #120]	; (4014d0 <init+0x1bc>)
  401458:	4b28      	ldr	r3, [pc, #160]	; (4014fc <init+0x1e8>)
  40145a:	4798      	blx	r3
	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  40145c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401460:	481e      	ldr	r0, [pc, #120]	; (4014dc <init+0x1c8>)
  401462:	4b26      	ldr	r3, [pc, #152]	; (4014fc <init+0x1e8>)
  401464:	4798      	blx	r3
	pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  401466:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40146a:	4817      	ldr	r0, [pc, #92]	; (4014c8 <init+0x1b4>)
  40146c:	4b23      	ldr	r3, [pc, #140]	; (4014fc <init+0x1e8>)
  40146e:	4798      	blx	r3
	pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  401470:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401474:	4816      	ldr	r0, [pc, #88]	; (4014d0 <init+0x1bc>)
  401476:	4b21      	ldr	r3, [pc, #132]	; (4014fc <init+0x1e8>)
  401478:	4798      	blx	r3

	
	// Configura NVIC para receber interrupcoes do PIO do botao
	// com prioridade 4 (quanto mais próximo de 0 maior)
	NVIC_EnableIRQ(BUT_PIO_ID);
  40147a:	200a      	movs	r0, #10
  40147c:	4b20      	ldr	r3, [pc, #128]	; (401500 <init+0x1ec>)
  40147e:	4798      	blx	r3
	NVIC_EnableIRQ(BUT1_PIO_ID);
  401480:	2010      	movs	r0, #16
  401482:	4b1f      	ldr	r3, [pc, #124]	; (401500 <init+0x1ec>)
  401484:	4798      	blx	r3
	NVIC_EnableIRQ(BUT2_PIO_ID);
  401486:	200c      	movs	r0, #12
  401488:	4b1d      	ldr	r3, [pc, #116]	; (401500 <init+0x1ec>)
  40148a:	4798      	blx	r3
	NVIC_EnableIRQ(BUT3_PIO_ID);
  40148c:	200a      	movs	r0, #10
  40148e:	4b1c      	ldr	r3, [pc, #112]	; (401500 <init+0x1ec>)
  401490:	4798      	blx	r3

	NVIC_SetPriority(BUT_PIO_ID, 3); // Prioridade 4
  401492:	2103      	movs	r1, #3
  401494:	200a      	movs	r0, #10
  401496:	4b1b      	ldr	r3, [pc, #108]	; (401504 <init+0x1f0>)
  401498:	4798      	blx	r3
	NVIC_SetPriority(BUT1_PIO_ID, 4); 
  40149a:	2104      	movs	r1, #4
  40149c:	2010      	movs	r0, #16
  40149e:	4b19      	ldr	r3, [pc, #100]	; (401504 <init+0x1f0>)
  4014a0:	4798      	blx	r3
	NVIC_SetPriority(BUT2_PIO_ID, 4);
  4014a2:	2104      	movs	r1, #4
  4014a4:	200c      	movs	r0, #12
  4014a6:	4b17      	ldr	r3, [pc, #92]	; (401504 <init+0x1f0>)
  4014a8:	4798      	blx	r3
	NVIC_SetPriority(BUT3_PIO_ID, 4);
  4014aa:	2104      	movs	r1, #4
  4014ac:	200a      	movs	r0, #10
  4014ae:	4b15      	ldr	r3, [pc, #84]	; (401504 <init+0x1f0>)
  4014b0:	4798      	blx	r3
	
	
}
  4014b2:	bf00      	nop
  4014b4:	3704      	adds	r7, #4
  4014b6:	46bd      	mov	sp, r7
  4014b8:	bd90      	pop	{r4, r7, pc}
  4014ba:	bf00      	nop
  4014bc:	004004ad 	.word	0x004004ad
  4014c0:	400e1850 	.word	0x400e1850
  4014c4:	00400db1 	.word	0x00400db1
  4014c8:	400e1200 	.word	0x400e1200
  4014cc:	0040071d 	.word	0x0040071d
  4014d0:	400e0e00 	.word	0x400e0e00
  4014d4:	400e1000 	.word	0x400e1000
  4014d8:	00400781 	.word	0x00400781
  4014dc:	400e1400 	.word	0x400e1400
  4014e0:	0040069d 	.word	0x0040069d
  4014e4:	004012a5 	.word	0x004012a5
  4014e8:	004009d5 	.word	0x004009d5
  4014ec:	004012cd 	.word	0x004012cd
  4014f0:	004012e5 	.word	0x004012e5
  4014f4:	004012fd 	.word	0x004012fd
  4014f8:	00400529 	.word	0x00400529
  4014fc:	004008b9 	.word	0x004008b9
  401500:	00401175 	.word	0x00401175
  401504:	004011a9 	.word	0x004011a9

00401508 <playMusic>:
//so ter uma volatile char pros tres call back
//cada funcao retorna um valor diferente
//fazer case switch
//se o id da musica for diferente do volatile char (apertou musica difernte)
//dar break na musica e roda a funcao com o arg da musica
void playMusic(musica music){
  401508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40150c:	b089      	sub	sp, #36	; 0x24
  40150e:	af00      	add	r7, sp, #0
  401510:	1d3b      	adds	r3, r7, #4
  401512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//ver se o botao flag = 1 -> pausa
	for (int i=0 ;  i< music.size ; i++){
  401516:	2300      	movs	r3, #0
  401518:	61fb      	str	r3, [r7, #28]
  40151a:	e1c5      	b.n	4018a8 <playMusic+0x3a0>

		//se a nota for 0, toca o 0 (silencio) pelo tempo
		if (music.notes[i] == 0 ){
  40151c:	687a      	ldr	r2, [r7, #4]
  40151e:	69fb      	ldr	r3, [r7, #28]
  401520:	009b      	lsls	r3, r3, #2
  401522:	4413      	add	r3, r2
  401524:	681b      	ldr	r3, [r3, #0]
  401526:	2b00      	cmp	r3, #0
  401528:	d150      	bne.n	4015cc <playMusic+0xc4>
			delay_ms(music.times[i]);
  40152a:	68ba      	ldr	r2, [r7, #8]
  40152c:	69fb      	ldr	r3, [r7, #28]
  40152e:	009b      	lsls	r3, r3, #2
  401530:	4413      	add	r3, r2
  401532:	681b      	ldr	r3, [r3, #0]
  401534:	2b00      	cmp	r3, #0
  401536:	d02b      	beq.n	401590 <playMusic+0x88>
  401538:	68ba      	ldr	r2, [r7, #8]
  40153a:	69fb      	ldr	r3, [r7, #28]
  40153c:	009b      	lsls	r3, r3, #2
  40153e:	4413      	add	r3, r2
  401540:	681b      	ldr	r3, [r3, #0]
  401542:	469a      	mov	sl, r3
  401544:	ea4f 7bea 	mov.w	fp, sl, asr #31
  401548:	4b92      	ldr	r3, [pc, #584]	; (401794 <playMusic+0x28c>)
  40154a:	4798      	blx	r3
  40154c:	4603      	mov	r3, r0
  40154e:	f04f 0400 	mov.w	r4, #0
  401552:	fb03 f10b 	mul.w	r1, r3, fp
  401556:	fb0a f204 	mul.w	r2, sl, r4
  40155a:	440a      	add	r2, r1
  40155c:	fbaa 3403 	umull	r3, r4, sl, r3
  401560:	4422      	add	r2, r4
  401562:	4614      	mov	r4, r2
  401564:	f241 712b 	movw	r1, #5931	; 0x172b
  401568:	f04f 0200 	mov.w	r2, #0
  40156c:	eb13 0a01 	adds.w	sl, r3, r1
  401570:	eb44 0b02 	adc.w	fp, r4, r2
  401574:	4650      	mov	r0, sl
  401576:	4659      	mov	r1, fp
  401578:	4c87      	ldr	r4, [pc, #540]	; (401798 <playMusic+0x290>)
  40157a:	f241 722c 	movw	r2, #5932	; 0x172c
  40157e:	f04f 0300 	mov.w	r3, #0
  401582:	47a0      	blx	r4
  401584:	4603      	mov	r3, r0
  401586:	460c      	mov	r4, r1
  401588:	4618      	mov	r0, r3
  40158a:	4b84      	ldr	r3, [pc, #528]	; (40179c <playMusic+0x294>)
  40158c:	4798      	blx	r3
  40158e:	e017      	b.n	4015c0 <playMusic+0xb8>
  401590:	4b80      	ldr	r3, [pc, #512]	; (401794 <playMusic+0x28c>)
  401592:	4798      	blx	r3
  401594:	4603      	mov	r3, r0
  401596:	f04f 0400 	mov.w	r4, #0
  40159a:	4981      	ldr	r1, [pc, #516]	; (4017a0 <playMusic+0x298>)
  40159c:	f04f 0200 	mov.w	r2, #0
  4015a0:	eb13 0a01 	adds.w	sl, r3, r1
  4015a4:	eb44 0b02 	adc.w	fp, r4, r2
  4015a8:	4650      	mov	r0, sl
  4015aa:	4659      	mov	r1, fp
  4015ac:	4c7a      	ldr	r4, [pc, #488]	; (401798 <playMusic+0x290>)
  4015ae:	4a7d      	ldr	r2, [pc, #500]	; (4017a4 <playMusic+0x29c>)
  4015b0:	f04f 0300 	mov.w	r3, #0
  4015b4:	47a0      	blx	r4
  4015b6:	4603      	mov	r3, r0
  4015b8:	460c      	mov	r4, r1
  4015ba:	4618      	mov	r0, r3
  4015bc:	4b77      	ldr	r3, [pc, #476]	; (40179c <playMusic+0x294>)
  4015be:	4798      	blx	r3
			pio_set(LED_PIO, LED_PIO_IDX_MASK); //desliga
  4015c0:	f44f 7180 	mov.w	r1, #256	; 0x100
  4015c4:	4878      	ldr	r0, [pc, #480]	; (4017a8 <playMusic+0x2a0>)
  4015c6:	4b79      	ldr	r3, [pc, #484]	; (4017ac <playMusic+0x2a4>)
  4015c8:	4798      	blx	r3
  4015ca:	e13d      	b.n	401848 <playMusic+0x340>
		}
		//nota diferente de 0
		else {
			float t_delay = 1000.0 /(int)(music.notes[i])	;
  4015cc:	687a      	ldr	r2, [r7, #4]
  4015ce:	69fb      	ldr	r3, [r7, #28]
  4015d0:	009b      	lsls	r3, r3, #2
  4015d2:	4413      	add	r3, r2
  4015d4:	681a      	ldr	r2, [r3, #0]
  4015d6:	4b76      	ldr	r3, [pc, #472]	; (4017b0 <playMusic+0x2a8>)
  4015d8:	4610      	mov	r0, r2
  4015da:	4798      	blx	r3
  4015dc:	4602      	mov	r2, r0
  4015de:	460b      	mov	r3, r1
  4015e0:	4c74      	ldr	r4, [pc, #464]	; (4017b4 <playMusic+0x2ac>)
  4015e2:	f04f 0000 	mov.w	r0, #0
  4015e6:	4974      	ldr	r1, [pc, #464]	; (4017b8 <playMusic+0x2b0>)
  4015e8:	47a0      	blx	r4
  4015ea:	4603      	mov	r3, r0
  4015ec:	460c      	mov	r4, r1
  4015ee:	4619      	mov	r1, r3
  4015f0:	4622      	mov	r2, r4
  4015f2:	4b72      	ldr	r3, [pc, #456]	; (4017bc <playMusic+0x2b4>)
  4015f4:	4608      	mov	r0, r1
  4015f6:	4611      	mov	r1, r2
  4015f8:	4798      	blx	r3
  4015fa:	4603      	mov	r3, r0
  4015fc:	617b      	str	r3, [r7, #20]
			pio_clear(LED_PIO, LED_PIO_IDX_MASK);    // Coloca 0 no pino do LED (liga)
  4015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
  401602:	4869      	ldr	r0, [pc, #420]	; (4017a8 <playMusic+0x2a0>)
  401604:	4b6e      	ldr	r3, [pc, #440]	; (4017c0 <playMusic+0x2b8>)
  401606:	4798      	blx	r3
			for (long j=0 ; j < (music.times[i]/t_delay); j++){
  401608:	2300      	movs	r3, #0
  40160a:	61bb      	str	r3, [r7, #24]
  40160c:	e104      	b.n	401818 <playMusic+0x310>
				if (pause){
  40160e:	4b6d      	ldr	r3, [pc, #436]	; (4017c4 <playMusic+0x2bc>)
  401610:	781b      	ldrb	r3, [r3, #0]
  401612:	b2db      	uxtb	r3, r3
  401614:	2b00      	cmp	r3, #0
  401616:	d008      	beq.n	40162a <playMusic+0x122>
					pio_set(LED_PIO, LED_PIO_IDX_MASK);//desliga
  401618:	f44f 7180 	mov.w	r1, #256	; 0x100
  40161c:	4862      	ldr	r0, [pc, #392]	; (4017a8 <playMusic+0x2a0>)
  40161e:	4b63      	ldr	r3, [pc, #396]	; (4017ac <playMusic+0x2a4>)
  401620:	4798      	blx	r3
					j--;
  401622:	69bb      	ldr	r3, [r7, #24]
  401624:	3b01      	subs	r3, #1
  401626:	61bb      	str	r3, [r7, #24]
  401628:	e0ee      	b.n	401808 <playMusic+0x300>
				} 
				else {
					//if (music.times[i]!= 0){
						pio_set(BUZ_PIO, BUZ_PIO_IDX_MASK);
  40162a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40162e:	485e      	ldr	r0, [pc, #376]	; (4017a8 <playMusic+0x2a0>)
  401630:	4b5e      	ldr	r3, [pc, #376]	; (4017ac <playMusic+0x2a4>)
  401632:	4798      	blx	r3
						delay_us(t_delay*1000.0);
  401634:	4b64      	ldr	r3, [pc, #400]	; (4017c8 <playMusic+0x2c0>)
  401636:	6978      	ldr	r0, [r7, #20]
  401638:	4798      	blx	r3
  40163a:	4c64      	ldr	r4, [pc, #400]	; (4017cc <playMusic+0x2c4>)
  40163c:	f04f 0200 	mov.w	r2, #0
  401640:	4b5d      	ldr	r3, [pc, #372]	; (4017b8 <playMusic+0x2b0>)
  401642:	47a0      	blx	r4
  401644:	4603      	mov	r3, r0
  401646:	460c      	mov	r4, r1
  401648:	4618      	mov	r0, r3
  40164a:	4621      	mov	r1, r4
  40164c:	4c60      	ldr	r4, [pc, #384]	; (4017d0 <playMusic+0x2c8>)
  40164e:	f04f 0200 	mov.w	r2, #0
  401652:	f04f 0300 	mov.w	r3, #0
  401656:	47a0      	blx	r4
  401658:	4603      	mov	r3, r0
  40165a:	2b00      	cmp	r3, #0
  40165c:	d133      	bne.n	4016c6 <playMusic+0x1be>
  40165e:	4b5a      	ldr	r3, [pc, #360]	; (4017c8 <playMusic+0x2c0>)
  401660:	6978      	ldr	r0, [r7, #20]
  401662:	4798      	blx	r3
  401664:	4c59      	ldr	r4, [pc, #356]	; (4017cc <playMusic+0x2c4>)
  401666:	f04f 0200 	mov.w	r2, #0
  40166a:	4b53      	ldr	r3, [pc, #332]	; (4017b8 <playMusic+0x2b0>)
  40166c:	47a0      	blx	r4
  40166e:	4603      	mov	r3, r0
  401670:	460c      	mov	r4, r1
  401672:	4619      	mov	r1, r3
  401674:	4622      	mov	r2, r4
  401676:	4b57      	ldr	r3, [pc, #348]	; (4017d4 <playMusic+0x2cc>)
  401678:	4608      	mov	r0, r1
  40167a:	4611      	mov	r1, r2
  40167c:	4798      	blx	r3
  40167e:	4682      	mov	sl, r0
  401680:	468b      	mov	fp, r1
  401682:	4b44      	ldr	r3, [pc, #272]	; (401794 <playMusic+0x28c>)
  401684:	4798      	blx	r3
  401686:	4603      	mov	r3, r0
  401688:	f04f 0400 	mov.w	r4, #0
  40168c:	fb03 f10b 	mul.w	r1, r3, fp
  401690:	fb0a f204 	mul.w	r2, sl, r4
  401694:	440a      	add	r2, r1
  401696:	fbaa 3403 	umull	r3, r4, sl, r3
  40169a:	4422      	add	r2, r4
  40169c:	4614      	mov	r4, r2
  40169e:	4940      	ldr	r1, [pc, #256]	; (4017a0 <playMusic+0x298>)
  4016a0:	f04f 0200 	mov.w	r2, #0
  4016a4:	eb13 0a01 	adds.w	sl, r3, r1
  4016a8:	eb44 0b02 	adc.w	fp, r4, r2
  4016ac:	4650      	mov	r0, sl
  4016ae:	4659      	mov	r1, fp
  4016b0:	4c39      	ldr	r4, [pc, #228]	; (401798 <playMusic+0x290>)
  4016b2:	4a3c      	ldr	r2, [pc, #240]	; (4017a4 <playMusic+0x29c>)
  4016b4:	f04f 0300 	mov.w	r3, #0
  4016b8:	47a0      	blx	r4
  4016ba:	4603      	mov	r3, r0
  4016bc:	460c      	mov	r4, r1
  4016be:	4618      	mov	r0, r3
  4016c0:	4b36      	ldr	r3, [pc, #216]	; (40179c <playMusic+0x294>)
  4016c2:	4798      	blx	r3
  4016c4:	e017      	b.n	4016f6 <playMusic+0x1ee>
  4016c6:	4b33      	ldr	r3, [pc, #204]	; (401794 <playMusic+0x28c>)
  4016c8:	4798      	blx	r3
  4016ca:	4603      	mov	r3, r0
  4016cc:	f04f 0400 	mov.w	r4, #0
  4016d0:	4933      	ldr	r1, [pc, #204]	; (4017a0 <playMusic+0x298>)
  4016d2:	f04f 0200 	mov.w	r2, #0
  4016d6:	eb13 0a01 	adds.w	sl, r3, r1
  4016da:	eb44 0b02 	adc.w	fp, r4, r2
  4016de:	4650      	mov	r0, sl
  4016e0:	4659      	mov	r1, fp
  4016e2:	4c2d      	ldr	r4, [pc, #180]	; (401798 <playMusic+0x290>)
  4016e4:	4a2f      	ldr	r2, [pc, #188]	; (4017a4 <playMusic+0x29c>)
  4016e6:	f04f 0300 	mov.w	r3, #0
  4016ea:	47a0      	blx	r4
  4016ec:	4603      	mov	r3, r0
  4016ee:	460c      	mov	r4, r1
  4016f0:	4618      	mov	r0, r3
  4016f2:	4b2a      	ldr	r3, [pc, #168]	; (40179c <playMusic+0x294>)
  4016f4:	4798      	blx	r3
						pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);
  4016f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4016fa:	482b      	ldr	r0, [pc, #172]	; (4017a8 <playMusic+0x2a0>)
  4016fc:	4b30      	ldr	r3, [pc, #192]	; (4017c0 <playMusic+0x2b8>)
  4016fe:	4798      	blx	r3
						delay_us(t_delay*1000.0);
  401700:	4b31      	ldr	r3, [pc, #196]	; (4017c8 <playMusic+0x2c0>)
  401702:	6978      	ldr	r0, [r7, #20]
  401704:	4798      	blx	r3
  401706:	4c31      	ldr	r4, [pc, #196]	; (4017cc <playMusic+0x2c4>)
  401708:	f04f 0200 	mov.w	r2, #0
  40170c:	4b2a      	ldr	r3, [pc, #168]	; (4017b8 <playMusic+0x2b0>)
  40170e:	47a0      	blx	r4
  401710:	4603      	mov	r3, r0
  401712:	460c      	mov	r4, r1
  401714:	4618      	mov	r0, r3
  401716:	4621      	mov	r1, r4
  401718:	4c2d      	ldr	r4, [pc, #180]	; (4017d0 <playMusic+0x2c8>)
  40171a:	f04f 0200 	mov.w	r2, #0
  40171e:	f04f 0300 	mov.w	r3, #0
  401722:	47a0      	blx	r4
  401724:	4603      	mov	r3, r0
  401726:	2b00      	cmp	r3, #0
  401728:	d156      	bne.n	4017d8 <playMusic+0x2d0>
  40172a:	4b27      	ldr	r3, [pc, #156]	; (4017c8 <playMusic+0x2c0>)
  40172c:	6978      	ldr	r0, [r7, #20]
  40172e:	4798      	blx	r3
  401730:	4c26      	ldr	r4, [pc, #152]	; (4017cc <playMusic+0x2c4>)
  401732:	f04f 0200 	mov.w	r2, #0
  401736:	4b20      	ldr	r3, [pc, #128]	; (4017b8 <playMusic+0x2b0>)
  401738:	47a0      	blx	r4
  40173a:	4603      	mov	r3, r0
  40173c:	460c      	mov	r4, r1
  40173e:	4619      	mov	r1, r3
  401740:	4622      	mov	r2, r4
  401742:	4b24      	ldr	r3, [pc, #144]	; (4017d4 <playMusic+0x2cc>)
  401744:	4608      	mov	r0, r1
  401746:	4611      	mov	r1, r2
  401748:	4798      	blx	r3
  40174a:	4682      	mov	sl, r0
  40174c:	468b      	mov	fp, r1
  40174e:	4b11      	ldr	r3, [pc, #68]	; (401794 <playMusic+0x28c>)
  401750:	4798      	blx	r3
  401752:	4603      	mov	r3, r0
  401754:	f04f 0400 	mov.w	r4, #0
  401758:	fb03 f10b 	mul.w	r1, r3, fp
  40175c:	fb0a f204 	mul.w	r2, sl, r4
  401760:	440a      	add	r2, r1
  401762:	fbaa 3403 	umull	r3, r4, sl, r3
  401766:	4422      	add	r2, r4
  401768:	4614      	mov	r4, r2
  40176a:	490d      	ldr	r1, [pc, #52]	; (4017a0 <playMusic+0x298>)
  40176c:	f04f 0200 	mov.w	r2, #0
  401770:	eb13 0a01 	adds.w	sl, r3, r1
  401774:	eb44 0b02 	adc.w	fp, r4, r2
  401778:	4650      	mov	r0, sl
  40177a:	4659      	mov	r1, fp
  40177c:	4c06      	ldr	r4, [pc, #24]	; (401798 <playMusic+0x290>)
  40177e:	4a09      	ldr	r2, [pc, #36]	; (4017a4 <playMusic+0x29c>)
  401780:	f04f 0300 	mov.w	r3, #0
  401784:	47a0      	blx	r4
  401786:	4603      	mov	r3, r0
  401788:	460c      	mov	r4, r1
  40178a:	4618      	mov	r0, r3
  40178c:	4b03      	ldr	r3, [pc, #12]	; (40179c <playMusic+0x294>)
  40178e:	4798      	blx	r3
  401790:	e03a      	b.n	401808 <playMusic+0x300>
  401792:	bf00      	nop
  401794:	00401291 	.word	0x00401291
  401798:	00402355 	.word	0x00402355
  40179c:	20400001 	.word	0x20400001
  4017a0:	005a83df 	.word	0x005a83df
  4017a4:	005a83e0 	.word	0x005a83e0
  4017a8:	400e1200 	.word	0x400e1200
  4017ac:	00400555 	.word	0x00400555
  4017b0:	00401cb5 	.word	0x00401cb5
  4017b4:	00401fd5 	.word	0x00401fd5
  4017b8:	408f4000 	.word	0x408f4000
  4017bc:	004022b5 	.word	0x004022b5
  4017c0:	00400571 	.word	0x00400571
  4017c4:	2040099c 	.word	0x2040099c
  4017c8:	00401cd9 	.word	0x00401cd9
  4017cc:	00401d81 	.word	0x00401d81
  4017d0:	00402251 	.word	0x00402251
  4017d4:	00402385 	.word	0x00402385
  4017d8:	4b38      	ldr	r3, [pc, #224]	; (4018bc <playMusic+0x3b4>)
  4017da:	4798      	blx	r3
  4017dc:	4603      	mov	r3, r0
  4017de:	f04f 0400 	mov.w	r4, #0
  4017e2:	4937      	ldr	r1, [pc, #220]	; (4018c0 <playMusic+0x3b8>)
  4017e4:	f04f 0200 	mov.w	r2, #0
  4017e8:	eb13 0a01 	adds.w	sl, r3, r1
  4017ec:	eb44 0b02 	adc.w	fp, r4, r2
  4017f0:	4650      	mov	r0, sl
  4017f2:	4659      	mov	r1, fp
  4017f4:	4c33      	ldr	r4, [pc, #204]	; (4018c4 <playMusic+0x3bc>)
  4017f6:	4a34      	ldr	r2, [pc, #208]	; (4018c8 <playMusic+0x3c0>)
  4017f8:	f04f 0300 	mov.w	r3, #0
  4017fc:	47a0      	blx	r4
  4017fe:	4603      	mov	r3, r0
  401800:	460c      	mov	r4, r1
  401802:	4618      	mov	r0, r3
  401804:	4b31      	ldr	r3, [pc, #196]	; (4018cc <playMusic+0x3c4>)
  401806:	4798      	blx	r3
					//}
				}	
				pio_set(LED_PIO, LED_PIO_IDX_MASK); 
  401808:	f44f 7180 	mov.w	r1, #256	; 0x100
  40180c:	4830      	ldr	r0, [pc, #192]	; (4018d0 <playMusic+0x3c8>)
  40180e:	4b31      	ldr	r3, [pc, #196]	; (4018d4 <playMusic+0x3cc>)
  401810:	4798      	blx	r3
			for (long j=0 ; j < (music.times[i]/t_delay); j++){
  401812:	69bb      	ldr	r3, [r7, #24]
  401814:	3301      	adds	r3, #1
  401816:	61bb      	str	r3, [r7, #24]
  401818:	69bb      	ldr	r3, [r7, #24]
  40181a:	ee07 3a90 	vmov	s15, r3
  40181e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  401822:	68ba      	ldr	r2, [r7, #8]
  401824:	69fb      	ldr	r3, [r7, #28]
  401826:	009b      	lsls	r3, r3, #2
  401828:	4413      	add	r3, r2
  40182a:	681b      	ldr	r3, [r3, #0]
  40182c:	ee07 3a90 	vmov	s15, r3
  401830:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
  401834:	edd7 6a05 	vldr	s13, [r7, #20]
  401838:	eec6 7a26 	vdiv.f32	s15, s12, s13
  40183c:	eeb4 7ae7 	vcmpe.f32	s14, s15
  401840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401844:	f53f aee3 	bmi.w	40160e <playMusic+0x106>
			}
		}
		
		//pio_set(LED_PIO, LED_PIO_IDX_MASK);      // Coloca 1 no pino LED (desliga)
		delay_us(75); //para dar um pause entre cada nota
  401848:	4b1c      	ldr	r3, [pc, #112]	; (4018bc <playMusic+0x3b4>)
  40184a:	4798      	blx	r3
  40184c:	4603      	mov	r3, r0
  40184e:	4619      	mov	r1, r3
  401850:	f04f 0200 	mov.w	r2, #0
  401854:	460b      	mov	r3, r1
  401856:	4614      	mov	r4, r2
  401858:	ea4f 0984 	mov.w	r9, r4, lsl #2
  40185c:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  401860:	ea4f 0883 	mov.w	r8, r3, lsl #2
  401864:	4643      	mov	r3, r8
  401866:	464c      	mov	r4, r9
  401868:	185b      	adds	r3, r3, r1
  40186a:	eb44 0402 	adc.w	r4, r4, r2
  40186e:	0126      	lsls	r6, r4, #4
  401870:	ea46 7613 	orr.w	r6, r6, r3, lsr #28
  401874:	011d      	lsls	r5, r3, #4
  401876:	1aeb      	subs	r3, r5, r3
  401878:	eb66 0404 	sbc.w	r4, r6, r4
  40187c:	4910      	ldr	r1, [pc, #64]	; (4018c0 <playMusic+0x3b8>)
  40187e:	f04f 0200 	mov.w	r2, #0
  401882:	eb13 0a01 	adds.w	sl, r3, r1
  401886:	eb44 0b02 	adc.w	fp, r4, r2
  40188a:	4650      	mov	r0, sl
  40188c:	4659      	mov	r1, fp
  40188e:	4c0d      	ldr	r4, [pc, #52]	; (4018c4 <playMusic+0x3bc>)
  401890:	4a0d      	ldr	r2, [pc, #52]	; (4018c8 <playMusic+0x3c0>)
  401892:	f04f 0300 	mov.w	r3, #0
  401896:	47a0      	blx	r4
  401898:	4603      	mov	r3, r0
  40189a:	460c      	mov	r4, r1
  40189c:	4618      	mov	r0, r3
  40189e:	4b0b      	ldr	r3, [pc, #44]	; (4018cc <playMusic+0x3c4>)
  4018a0:	4798      	blx	r3
	for (int i=0 ;  i< music.size ; i++){
  4018a2:	69fb      	ldr	r3, [r7, #28]
  4018a4:	3301      	adds	r3, #1
  4018a6:	61fb      	str	r3, [r7, #28]
  4018a8:	68fa      	ldr	r2, [r7, #12]
  4018aa:	69fb      	ldr	r3, [r7, #28]
  4018ac:	429a      	cmp	r2, r3
  4018ae:	f73f ae35 	bgt.w	40151c <playMusic+0x14>
	}// fim primeiro for
	
}
  4018b2:	bf00      	nop
  4018b4:	3724      	adds	r7, #36	; 0x24
  4018b6:	46bd      	mov	sp, r7
  4018b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018bc:	00401291 	.word	0x00401291
  4018c0:	005a83df 	.word	0x005a83df
  4018c4:	00402355 	.word	0x00402355
  4018c8:	005a83e0 	.word	0x005a83e0
  4018cc:	20400001 	.word	0x20400001
  4018d0:	400e1200 	.word	0x400e1200
  4018d4:	00400555 	.word	0x00400555

004018d8 <main>:

// Funcao principal chamada na inicalizacao do uC.
int main(void)
{
  4018d8:	b580      	push	{r7, lr}
  4018da:	b08a      	sub	sp, #40	; 0x28
  4018dc:	af00      	add	r7, sp, #0
	// inicializa sistema e IOs
	init();
  4018de:	4b3b      	ldr	r3, [pc, #236]	; (4019cc <main+0xf4>)
  4018e0:	4798      	blx	r3
	but1_flag = 0;
  4018e2:	4b3b      	ldr	r3, [pc, #236]	; (4019d0 <main+0xf8>)
  4018e4:	2200      	movs	r2, #0
  4018e6:	701a      	strb	r2, [r3, #0]
	but2_flag = 0;
  4018e8:	4b3a      	ldr	r3, [pc, #232]	; (4019d4 <main+0xfc>)
  4018ea:	2200      	movs	r2, #0
  4018ec:	701a      	strb	r2, [r3, #0]
	but3_flag = 0;
  4018ee:	4b3a      	ldr	r3, [pc, #232]	; (4019d8 <main+0x100>)
  4018f0:	2200      	movs	r2, #0
  4018f2:	701a      	strb	r2, [r3, #0]
	pause = 0;
  4018f4:	4b39      	ldr	r3, [pc, #228]	; (4019dc <main+0x104>)
  4018f6:	2200      	movs	r2, #0
  4018f8:	701a      	strb	r2, [r3, #0]

	musica mario;
	mario.notes = &mario_theme_notes;
  4018fa:	4b39      	ldr	r3, [pc, #228]	; (4019e0 <main+0x108>)
  4018fc:	61fb      	str	r3, [r7, #28]
	mario.times = &mario_theme_tempo;
  4018fe:	4b39      	ldr	r3, [pc, #228]	; (4019e4 <main+0x10c>)
  401900:	623b      	str	r3, [r7, #32]
	mario.size = sizeof(mario_theme_tempo) / sizeof(int);
  401902:	234e      	movs	r3, #78	; 0x4e
  401904:	627b      	str	r3, [r7, #36]	; 0x24

	musica imperialmarch;
	imperialmarch.notes = &imperial_march_notes;
  401906:	4b38      	ldr	r3, [pc, #224]	; (4019e8 <main+0x110>)
  401908:	613b      	str	r3, [r7, #16]
	imperialmarch.times = &imperial_march_tempo;
  40190a:	4b38      	ldr	r3, [pc, #224]	; (4019ec <main+0x114>)
  40190c:	617b      	str	r3, [r7, #20]
	imperialmarch.size = sizeof(imperial_march_tempo) / sizeof(int);
  40190e:	2314      	movs	r3, #20
  401910:	61bb      	str	r3, [r7, #24]

	musica underworld;
	underworld.notes = &underworld_notes;
  401912:	4b37      	ldr	r3, [pc, #220]	; (4019f0 <main+0x118>)
  401914:	607b      	str	r3, [r7, #4]
	underworld.times = &underworld_tempo;
  401916:	4b37      	ldr	r3, [pc, #220]	; (4019f4 <main+0x11c>)
  401918:	60bb      	str	r3, [r7, #8]
	underworld.size = sizeof(underworld_tempo) / sizeof(int);
  40191a:	2338      	movs	r3, #56	; 0x38
  40191c:	60fb      	str	r3, [r7, #12]

	//por padrao os leds estao ligados
	pio_set(LED_PIO, LED_PIO_IDX_MASK);//desliga
  40191e:	f44f 7180 	mov.w	r1, #256	; 0x100
  401922:	4835      	ldr	r0, [pc, #212]	; (4019f8 <main+0x120>)
  401924:	4b35      	ldr	r3, [pc, #212]	; (4019fc <main+0x124>)
  401926:	4798      	blx	r3
	pio_set(LED1_PIO, LED1_PIO_IDX_MASK); 
  401928:	2101      	movs	r1, #1
  40192a:	4835      	ldr	r0, [pc, #212]	; (401a00 <main+0x128>)
  40192c:	4b33      	ldr	r3, [pc, #204]	; (4019fc <main+0x124>)
  40192e:	4798      	blx	r3
	pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  401930:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401934:	4830      	ldr	r0, [pc, #192]	; (4019f8 <main+0x120>)
  401936:	4b31      	ldr	r3, [pc, #196]	; (4019fc <main+0x124>)
  401938:	4798      	blx	r3
	pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  40193a:	2104      	movs	r1, #4
  40193c:	4831      	ldr	r0, [pc, #196]	; (401a04 <main+0x12c>)
  40193e:	4b2f      	ldr	r3, [pc, #188]	; (4019fc <main+0x124>)
  401940:	4798      	blx	r3
    // gfx_mono_draw_string("Choose 1, 2 or 3", 50,16, &sysfont);

	// super loop
	// aplicacoes embarcadas não devem sair do while(1).
	while(1){		
	if (but1_flag){
  401942:	4b23      	ldr	r3, [pc, #140]	; (4019d0 <main+0xf8>)
  401944:	781b      	ldrb	r3, [r3, #0]
  401946:	b2db      	uxtb	r3, r3
  401948:	2b00      	cmp	r3, #0
  40194a:	d010      	beq.n	40196e <main+0x96>
		pio_clear(LED1_PIO, LED1_PIO_IDX_MASK); //liga led
  40194c:	2101      	movs	r1, #1
  40194e:	482c      	ldr	r0, [pc, #176]	; (401a00 <main+0x128>)
  401950:	4b2d      	ldr	r3, [pc, #180]	; (401a08 <main+0x130>)
  401952:	4798      	blx	r3
		playMusic(mario);
  401954:	f107 031c 	add.w	r3, r7, #28
  401958:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40195c:	4b2b      	ldr	r3, [pc, #172]	; (401a0c <main+0x134>)
  40195e:	4798      	blx	r3
		pio_set(LED1_PIO, LED1_PIO_IDX_MASK); //desliga led
  401960:	2101      	movs	r1, #1
  401962:	4827      	ldr	r0, [pc, #156]	; (401a00 <main+0x128>)
  401964:	4b25      	ldr	r3, [pc, #148]	; (4019fc <main+0x124>)
  401966:	4798      	blx	r3
		but1_flag = 0;
  401968:	4b19      	ldr	r3, [pc, #100]	; (4019d0 <main+0xf8>)
  40196a:	2200      	movs	r2, #0
  40196c:	701a      	strb	r2, [r3, #0]
	}
	if (but2_flag){
  40196e:	4b19      	ldr	r3, [pc, #100]	; (4019d4 <main+0xfc>)
  401970:	781b      	ldrb	r3, [r3, #0]
  401972:	b2db      	uxtb	r3, r3
  401974:	2b00      	cmp	r3, #0
  401976:	d012      	beq.n	40199e <main+0xc6>
		pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  401978:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40197c:	481e      	ldr	r0, [pc, #120]	; (4019f8 <main+0x120>)
  40197e:	4b22      	ldr	r3, [pc, #136]	; (401a08 <main+0x130>)
  401980:	4798      	blx	r3
	 	playMusic(imperialmarch);
  401982:	f107 0310 	add.w	r3, r7, #16
  401986:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40198a:	4b20      	ldr	r3, [pc, #128]	; (401a0c <main+0x134>)
  40198c:	4798      	blx	r3
	 	pio_set(LED2_PIO, LED2_PIO_IDX_MASK);		
  40198e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401992:	4819      	ldr	r0, [pc, #100]	; (4019f8 <main+0x120>)
  401994:	4b19      	ldr	r3, [pc, #100]	; (4019fc <main+0x124>)
  401996:	4798      	blx	r3
		but2_flag = 0;
  401998:	4b0e      	ldr	r3, [pc, #56]	; (4019d4 <main+0xfc>)
  40199a:	2200      	movs	r2, #0
  40199c:	701a      	strb	r2, [r3, #0]
	}
	if (but3_flag){
  40199e:	4b0e      	ldr	r3, [pc, #56]	; (4019d8 <main+0x100>)
  4019a0:	781b      	ldrb	r3, [r3, #0]
  4019a2:	b2db      	uxtb	r3, r3
  4019a4:	2b00      	cmp	r3, #0
  4019a6:	d0cc      	beq.n	401942 <main+0x6a>
		pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  4019a8:	2104      	movs	r1, #4
  4019aa:	4816      	ldr	r0, [pc, #88]	; (401a04 <main+0x12c>)
  4019ac:	4b16      	ldr	r3, [pc, #88]	; (401a08 <main+0x130>)
  4019ae:	4798      	blx	r3
	 	playMusic(underworld);
  4019b0:	1d3b      	adds	r3, r7, #4
  4019b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  4019b6:	4b15      	ldr	r3, [pc, #84]	; (401a0c <main+0x134>)
  4019b8:	4798      	blx	r3
	 	pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  4019ba:	2104      	movs	r1, #4
  4019bc:	4811      	ldr	r0, [pc, #68]	; (401a04 <main+0x12c>)
  4019be:	4b0f      	ldr	r3, [pc, #60]	; (4019fc <main+0x124>)
  4019c0:	4798      	blx	r3
		but3_flag = 0;
  4019c2:	4b05      	ldr	r3, [pc, #20]	; (4019d8 <main+0x100>)
  4019c4:	2200      	movs	r2, #0
  4019c6:	701a      	strb	r2, [r3, #0]
	if (but1_flag){
  4019c8:	e7bb      	b.n	401942 <main+0x6a>
  4019ca:	bf00      	nop
  4019cc:	00401315 	.word	0x00401315
  4019d0:	2040099d 	.word	0x2040099d
  4019d4:	2040099f 	.word	0x2040099f
  4019d8:	2040099e 	.word	0x2040099e
  4019dc:	2040099c 	.word	0x2040099c
  4019e0:	20400010 	.word	0x20400010
  4019e4:	20400148 	.word	0x20400148
  4019e8:	20400440 	.word	0x20400440
  4019ec:	20400490 	.word	0x20400490
  4019f0:	20400280 	.word	0x20400280
  4019f4:	20400360 	.word	0x20400360
  4019f8:	400e1200 	.word	0x400e1200
  4019fc:	00400555 	.word	0x00400555
  401a00:	400e0e00 	.word	0x400e0e00
  401a04:	400e1000 	.word	0x400e1000
  401a08:	00400571 	.word	0x00400571
  401a0c:	00401509 	.word	0x00401509

00401a10 <__aeabi_drsub>:
  401a10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401a14:	e002      	b.n	401a1c <__adddf3>
  401a16:	bf00      	nop

00401a18 <__aeabi_dsub>:
  401a18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401a1c <__adddf3>:
  401a1c:	b530      	push	{r4, r5, lr}
  401a1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401a22:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401a26:	ea94 0f05 	teq	r4, r5
  401a2a:	bf08      	it	eq
  401a2c:	ea90 0f02 	teqeq	r0, r2
  401a30:	bf1f      	itttt	ne
  401a32:	ea54 0c00 	orrsne.w	ip, r4, r0
  401a36:	ea55 0c02 	orrsne.w	ip, r5, r2
  401a3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401a3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401a42:	f000 80e2 	beq.w	401c0a <__adddf3+0x1ee>
  401a46:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401a4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401a4e:	bfb8      	it	lt
  401a50:	426d      	neglt	r5, r5
  401a52:	dd0c      	ble.n	401a6e <__adddf3+0x52>
  401a54:	442c      	add	r4, r5
  401a56:	ea80 0202 	eor.w	r2, r0, r2
  401a5a:	ea81 0303 	eor.w	r3, r1, r3
  401a5e:	ea82 0000 	eor.w	r0, r2, r0
  401a62:	ea83 0101 	eor.w	r1, r3, r1
  401a66:	ea80 0202 	eor.w	r2, r0, r2
  401a6a:	ea81 0303 	eor.w	r3, r1, r3
  401a6e:	2d36      	cmp	r5, #54	; 0x36
  401a70:	bf88      	it	hi
  401a72:	bd30      	pophi	{r4, r5, pc}
  401a74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401a78:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401a7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401a80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401a84:	d002      	beq.n	401a8c <__adddf3+0x70>
  401a86:	4240      	negs	r0, r0
  401a88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401a8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401a90:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401a94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401a98:	d002      	beq.n	401aa0 <__adddf3+0x84>
  401a9a:	4252      	negs	r2, r2
  401a9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401aa0:	ea94 0f05 	teq	r4, r5
  401aa4:	f000 80a7 	beq.w	401bf6 <__adddf3+0x1da>
  401aa8:	f1a4 0401 	sub.w	r4, r4, #1
  401aac:	f1d5 0e20 	rsbs	lr, r5, #32
  401ab0:	db0d      	blt.n	401ace <__adddf3+0xb2>
  401ab2:	fa02 fc0e 	lsl.w	ip, r2, lr
  401ab6:	fa22 f205 	lsr.w	r2, r2, r5
  401aba:	1880      	adds	r0, r0, r2
  401abc:	f141 0100 	adc.w	r1, r1, #0
  401ac0:	fa03 f20e 	lsl.w	r2, r3, lr
  401ac4:	1880      	adds	r0, r0, r2
  401ac6:	fa43 f305 	asr.w	r3, r3, r5
  401aca:	4159      	adcs	r1, r3
  401acc:	e00e      	b.n	401aec <__adddf3+0xd0>
  401ace:	f1a5 0520 	sub.w	r5, r5, #32
  401ad2:	f10e 0e20 	add.w	lr, lr, #32
  401ad6:	2a01      	cmp	r2, #1
  401ad8:	fa03 fc0e 	lsl.w	ip, r3, lr
  401adc:	bf28      	it	cs
  401ade:	f04c 0c02 	orrcs.w	ip, ip, #2
  401ae2:	fa43 f305 	asr.w	r3, r3, r5
  401ae6:	18c0      	adds	r0, r0, r3
  401ae8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401aec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401af0:	d507      	bpl.n	401b02 <__adddf3+0xe6>
  401af2:	f04f 0e00 	mov.w	lr, #0
  401af6:	f1dc 0c00 	rsbs	ip, ip, #0
  401afa:	eb7e 0000 	sbcs.w	r0, lr, r0
  401afe:	eb6e 0101 	sbc.w	r1, lr, r1
  401b02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401b06:	d31b      	bcc.n	401b40 <__adddf3+0x124>
  401b08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401b0c:	d30c      	bcc.n	401b28 <__adddf3+0x10c>
  401b0e:	0849      	lsrs	r1, r1, #1
  401b10:	ea5f 0030 	movs.w	r0, r0, rrx
  401b14:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401b18:	f104 0401 	add.w	r4, r4, #1
  401b1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401b20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401b24:	f080 809a 	bcs.w	401c5c <__adddf3+0x240>
  401b28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401b2c:	bf08      	it	eq
  401b2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401b32:	f150 0000 	adcs.w	r0, r0, #0
  401b36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401b3a:	ea41 0105 	orr.w	r1, r1, r5
  401b3e:	bd30      	pop	{r4, r5, pc}
  401b40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401b44:	4140      	adcs	r0, r0
  401b46:	eb41 0101 	adc.w	r1, r1, r1
  401b4a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401b4e:	f1a4 0401 	sub.w	r4, r4, #1
  401b52:	d1e9      	bne.n	401b28 <__adddf3+0x10c>
  401b54:	f091 0f00 	teq	r1, #0
  401b58:	bf04      	itt	eq
  401b5a:	4601      	moveq	r1, r0
  401b5c:	2000      	moveq	r0, #0
  401b5e:	fab1 f381 	clz	r3, r1
  401b62:	bf08      	it	eq
  401b64:	3320      	addeq	r3, #32
  401b66:	f1a3 030b 	sub.w	r3, r3, #11
  401b6a:	f1b3 0220 	subs.w	r2, r3, #32
  401b6e:	da0c      	bge.n	401b8a <__adddf3+0x16e>
  401b70:	320c      	adds	r2, #12
  401b72:	dd08      	ble.n	401b86 <__adddf3+0x16a>
  401b74:	f102 0c14 	add.w	ip, r2, #20
  401b78:	f1c2 020c 	rsb	r2, r2, #12
  401b7c:	fa01 f00c 	lsl.w	r0, r1, ip
  401b80:	fa21 f102 	lsr.w	r1, r1, r2
  401b84:	e00c      	b.n	401ba0 <__adddf3+0x184>
  401b86:	f102 0214 	add.w	r2, r2, #20
  401b8a:	bfd8      	it	le
  401b8c:	f1c2 0c20 	rsble	ip, r2, #32
  401b90:	fa01 f102 	lsl.w	r1, r1, r2
  401b94:	fa20 fc0c 	lsr.w	ip, r0, ip
  401b98:	bfdc      	itt	le
  401b9a:	ea41 010c 	orrle.w	r1, r1, ip
  401b9e:	4090      	lslle	r0, r2
  401ba0:	1ae4      	subs	r4, r4, r3
  401ba2:	bfa2      	ittt	ge
  401ba4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401ba8:	4329      	orrge	r1, r5
  401baa:	bd30      	popge	{r4, r5, pc}
  401bac:	ea6f 0404 	mvn.w	r4, r4
  401bb0:	3c1f      	subs	r4, #31
  401bb2:	da1c      	bge.n	401bee <__adddf3+0x1d2>
  401bb4:	340c      	adds	r4, #12
  401bb6:	dc0e      	bgt.n	401bd6 <__adddf3+0x1ba>
  401bb8:	f104 0414 	add.w	r4, r4, #20
  401bbc:	f1c4 0220 	rsb	r2, r4, #32
  401bc0:	fa20 f004 	lsr.w	r0, r0, r4
  401bc4:	fa01 f302 	lsl.w	r3, r1, r2
  401bc8:	ea40 0003 	orr.w	r0, r0, r3
  401bcc:	fa21 f304 	lsr.w	r3, r1, r4
  401bd0:	ea45 0103 	orr.w	r1, r5, r3
  401bd4:	bd30      	pop	{r4, r5, pc}
  401bd6:	f1c4 040c 	rsb	r4, r4, #12
  401bda:	f1c4 0220 	rsb	r2, r4, #32
  401bde:	fa20 f002 	lsr.w	r0, r0, r2
  401be2:	fa01 f304 	lsl.w	r3, r1, r4
  401be6:	ea40 0003 	orr.w	r0, r0, r3
  401bea:	4629      	mov	r1, r5
  401bec:	bd30      	pop	{r4, r5, pc}
  401bee:	fa21 f004 	lsr.w	r0, r1, r4
  401bf2:	4629      	mov	r1, r5
  401bf4:	bd30      	pop	{r4, r5, pc}
  401bf6:	f094 0f00 	teq	r4, #0
  401bfa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401bfe:	bf06      	itte	eq
  401c00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401c04:	3401      	addeq	r4, #1
  401c06:	3d01      	subne	r5, #1
  401c08:	e74e      	b.n	401aa8 <__adddf3+0x8c>
  401c0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401c0e:	bf18      	it	ne
  401c10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401c14:	d029      	beq.n	401c6a <__adddf3+0x24e>
  401c16:	ea94 0f05 	teq	r4, r5
  401c1a:	bf08      	it	eq
  401c1c:	ea90 0f02 	teqeq	r0, r2
  401c20:	d005      	beq.n	401c2e <__adddf3+0x212>
  401c22:	ea54 0c00 	orrs.w	ip, r4, r0
  401c26:	bf04      	itt	eq
  401c28:	4619      	moveq	r1, r3
  401c2a:	4610      	moveq	r0, r2
  401c2c:	bd30      	pop	{r4, r5, pc}
  401c2e:	ea91 0f03 	teq	r1, r3
  401c32:	bf1e      	ittt	ne
  401c34:	2100      	movne	r1, #0
  401c36:	2000      	movne	r0, #0
  401c38:	bd30      	popne	{r4, r5, pc}
  401c3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401c3e:	d105      	bne.n	401c4c <__adddf3+0x230>
  401c40:	0040      	lsls	r0, r0, #1
  401c42:	4149      	adcs	r1, r1
  401c44:	bf28      	it	cs
  401c46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401c4a:	bd30      	pop	{r4, r5, pc}
  401c4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401c50:	bf3c      	itt	cc
  401c52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401c56:	bd30      	popcc	{r4, r5, pc}
  401c58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401c5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401c60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401c64:	f04f 0000 	mov.w	r0, #0
  401c68:	bd30      	pop	{r4, r5, pc}
  401c6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401c6e:	bf1a      	itte	ne
  401c70:	4619      	movne	r1, r3
  401c72:	4610      	movne	r0, r2
  401c74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401c78:	bf1c      	itt	ne
  401c7a:	460b      	movne	r3, r1
  401c7c:	4602      	movne	r2, r0
  401c7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401c82:	bf06      	itte	eq
  401c84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401c88:	ea91 0f03 	teqeq	r1, r3
  401c8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401c90:	bd30      	pop	{r4, r5, pc}
  401c92:	bf00      	nop

00401c94 <__aeabi_ui2d>:
  401c94:	f090 0f00 	teq	r0, #0
  401c98:	bf04      	itt	eq
  401c9a:	2100      	moveq	r1, #0
  401c9c:	4770      	bxeq	lr
  401c9e:	b530      	push	{r4, r5, lr}
  401ca0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401ca4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401ca8:	f04f 0500 	mov.w	r5, #0
  401cac:	f04f 0100 	mov.w	r1, #0
  401cb0:	e750      	b.n	401b54 <__adddf3+0x138>
  401cb2:	bf00      	nop

00401cb4 <__aeabi_i2d>:
  401cb4:	f090 0f00 	teq	r0, #0
  401cb8:	bf04      	itt	eq
  401cba:	2100      	moveq	r1, #0
  401cbc:	4770      	bxeq	lr
  401cbe:	b530      	push	{r4, r5, lr}
  401cc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401cc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401cc8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401ccc:	bf48      	it	mi
  401cce:	4240      	negmi	r0, r0
  401cd0:	f04f 0100 	mov.w	r1, #0
  401cd4:	e73e      	b.n	401b54 <__adddf3+0x138>
  401cd6:	bf00      	nop

00401cd8 <__aeabi_f2d>:
  401cd8:	0042      	lsls	r2, r0, #1
  401cda:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401cde:	ea4f 0131 	mov.w	r1, r1, rrx
  401ce2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401ce6:	bf1f      	itttt	ne
  401ce8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401cec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401cf0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401cf4:	4770      	bxne	lr
  401cf6:	f092 0f00 	teq	r2, #0
  401cfa:	bf14      	ite	ne
  401cfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401d00:	4770      	bxeq	lr
  401d02:	b530      	push	{r4, r5, lr}
  401d04:	f44f 7460 	mov.w	r4, #896	; 0x380
  401d08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401d0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401d10:	e720      	b.n	401b54 <__adddf3+0x138>
  401d12:	bf00      	nop

00401d14 <__aeabi_ul2d>:
  401d14:	ea50 0201 	orrs.w	r2, r0, r1
  401d18:	bf08      	it	eq
  401d1a:	4770      	bxeq	lr
  401d1c:	b530      	push	{r4, r5, lr}
  401d1e:	f04f 0500 	mov.w	r5, #0
  401d22:	e00a      	b.n	401d3a <__aeabi_l2d+0x16>

00401d24 <__aeabi_l2d>:
  401d24:	ea50 0201 	orrs.w	r2, r0, r1
  401d28:	bf08      	it	eq
  401d2a:	4770      	bxeq	lr
  401d2c:	b530      	push	{r4, r5, lr}
  401d2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401d32:	d502      	bpl.n	401d3a <__aeabi_l2d+0x16>
  401d34:	4240      	negs	r0, r0
  401d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401d3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401d3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401d42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401d46:	f43f aedc 	beq.w	401b02 <__adddf3+0xe6>
  401d4a:	f04f 0203 	mov.w	r2, #3
  401d4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401d52:	bf18      	it	ne
  401d54:	3203      	addne	r2, #3
  401d56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401d5a:	bf18      	it	ne
  401d5c:	3203      	addne	r2, #3
  401d5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401d62:	f1c2 0320 	rsb	r3, r2, #32
  401d66:	fa00 fc03 	lsl.w	ip, r0, r3
  401d6a:	fa20 f002 	lsr.w	r0, r0, r2
  401d6e:	fa01 fe03 	lsl.w	lr, r1, r3
  401d72:	ea40 000e 	orr.w	r0, r0, lr
  401d76:	fa21 f102 	lsr.w	r1, r1, r2
  401d7a:	4414      	add	r4, r2
  401d7c:	e6c1      	b.n	401b02 <__adddf3+0xe6>
  401d7e:	bf00      	nop

00401d80 <__aeabi_dmul>:
  401d80:	b570      	push	{r4, r5, r6, lr}
  401d82:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401d86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401d8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401d8e:	bf1d      	ittte	ne
  401d90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401d94:	ea94 0f0c 	teqne	r4, ip
  401d98:	ea95 0f0c 	teqne	r5, ip
  401d9c:	f000 f8de 	bleq	401f5c <__aeabi_dmul+0x1dc>
  401da0:	442c      	add	r4, r5
  401da2:	ea81 0603 	eor.w	r6, r1, r3
  401da6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401daa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401dae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401db2:	bf18      	it	ne
  401db4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401db8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401dc0:	d038      	beq.n	401e34 <__aeabi_dmul+0xb4>
  401dc2:	fba0 ce02 	umull	ip, lr, r0, r2
  401dc6:	f04f 0500 	mov.w	r5, #0
  401dca:	fbe1 e502 	umlal	lr, r5, r1, r2
  401dce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401dd2:	fbe0 e503 	umlal	lr, r5, r0, r3
  401dd6:	f04f 0600 	mov.w	r6, #0
  401dda:	fbe1 5603 	umlal	r5, r6, r1, r3
  401dde:	f09c 0f00 	teq	ip, #0
  401de2:	bf18      	it	ne
  401de4:	f04e 0e01 	orrne.w	lr, lr, #1
  401de8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401dec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401df0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401df4:	d204      	bcs.n	401e00 <__aeabi_dmul+0x80>
  401df6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401dfa:	416d      	adcs	r5, r5
  401dfc:	eb46 0606 	adc.w	r6, r6, r6
  401e00:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  401e04:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401e08:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  401e0c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401e10:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  401e14:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401e18:	bf88      	it	hi
  401e1a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401e1e:	d81e      	bhi.n	401e5e <__aeabi_dmul+0xde>
  401e20:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  401e24:	bf08      	it	eq
  401e26:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401e2a:	f150 0000 	adcs.w	r0, r0, #0
  401e2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401e32:	bd70      	pop	{r4, r5, r6, pc}
  401e34:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401e38:	ea46 0101 	orr.w	r1, r6, r1
  401e3c:	ea40 0002 	orr.w	r0, r0, r2
  401e40:	ea81 0103 	eor.w	r1, r1, r3
  401e44:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401e48:	bfc2      	ittt	gt
  401e4a:	ebd4 050c 	rsbsgt	r5, r4, ip
  401e4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401e52:	bd70      	popgt	{r4, r5, r6, pc}
  401e54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401e58:	f04f 0e00 	mov.w	lr, #0
  401e5c:	3c01      	subs	r4, #1
  401e5e:	f300 80ab 	bgt.w	401fb8 <__aeabi_dmul+0x238>
  401e62:	f114 0f36 	cmn.w	r4, #54	; 0x36
  401e66:	bfde      	ittt	le
  401e68:	2000      	movle	r0, #0
  401e6a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401e6e:	bd70      	pople	{r4, r5, r6, pc}
  401e70:	f1c4 0400 	rsb	r4, r4, #0
  401e74:	3c20      	subs	r4, #32
  401e76:	da35      	bge.n	401ee4 <__aeabi_dmul+0x164>
  401e78:	340c      	adds	r4, #12
  401e7a:	dc1b      	bgt.n	401eb4 <__aeabi_dmul+0x134>
  401e7c:	f104 0414 	add.w	r4, r4, #20
  401e80:	f1c4 0520 	rsb	r5, r4, #32
  401e84:	fa00 f305 	lsl.w	r3, r0, r5
  401e88:	fa20 f004 	lsr.w	r0, r0, r4
  401e8c:	fa01 f205 	lsl.w	r2, r1, r5
  401e90:	ea40 0002 	orr.w	r0, r0, r2
  401e94:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401e98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401e9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401ea0:	fa21 f604 	lsr.w	r6, r1, r4
  401ea4:	eb42 0106 	adc.w	r1, r2, r6
  401ea8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401eac:	bf08      	it	eq
  401eae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401eb2:	bd70      	pop	{r4, r5, r6, pc}
  401eb4:	f1c4 040c 	rsb	r4, r4, #12
  401eb8:	f1c4 0520 	rsb	r5, r4, #32
  401ebc:	fa00 f304 	lsl.w	r3, r0, r4
  401ec0:	fa20 f005 	lsr.w	r0, r0, r5
  401ec4:	fa01 f204 	lsl.w	r2, r1, r4
  401ec8:	ea40 0002 	orr.w	r0, r0, r2
  401ecc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401ed0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401ed4:	f141 0100 	adc.w	r1, r1, #0
  401ed8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401edc:	bf08      	it	eq
  401ede:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401ee2:	bd70      	pop	{r4, r5, r6, pc}
  401ee4:	f1c4 0520 	rsb	r5, r4, #32
  401ee8:	fa00 f205 	lsl.w	r2, r0, r5
  401eec:	ea4e 0e02 	orr.w	lr, lr, r2
  401ef0:	fa20 f304 	lsr.w	r3, r0, r4
  401ef4:	fa01 f205 	lsl.w	r2, r1, r5
  401ef8:	ea43 0302 	orr.w	r3, r3, r2
  401efc:	fa21 f004 	lsr.w	r0, r1, r4
  401f00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401f04:	fa21 f204 	lsr.w	r2, r1, r4
  401f08:	ea20 0002 	bic.w	r0, r0, r2
  401f0c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  401f10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401f14:	bf08      	it	eq
  401f16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401f1a:	bd70      	pop	{r4, r5, r6, pc}
  401f1c:	f094 0f00 	teq	r4, #0
  401f20:	d10f      	bne.n	401f42 <__aeabi_dmul+0x1c2>
  401f22:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  401f26:	0040      	lsls	r0, r0, #1
  401f28:	eb41 0101 	adc.w	r1, r1, r1
  401f2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401f30:	bf08      	it	eq
  401f32:	3c01      	subeq	r4, #1
  401f34:	d0f7      	beq.n	401f26 <__aeabi_dmul+0x1a6>
  401f36:	ea41 0106 	orr.w	r1, r1, r6
  401f3a:	f095 0f00 	teq	r5, #0
  401f3e:	bf18      	it	ne
  401f40:	4770      	bxne	lr
  401f42:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  401f46:	0052      	lsls	r2, r2, #1
  401f48:	eb43 0303 	adc.w	r3, r3, r3
  401f4c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401f50:	bf08      	it	eq
  401f52:	3d01      	subeq	r5, #1
  401f54:	d0f7      	beq.n	401f46 <__aeabi_dmul+0x1c6>
  401f56:	ea43 0306 	orr.w	r3, r3, r6
  401f5a:	4770      	bx	lr
  401f5c:	ea94 0f0c 	teq	r4, ip
  401f60:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401f64:	bf18      	it	ne
  401f66:	ea95 0f0c 	teqne	r5, ip
  401f6a:	d00c      	beq.n	401f86 <__aeabi_dmul+0x206>
  401f6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401f70:	bf18      	it	ne
  401f72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401f76:	d1d1      	bne.n	401f1c <__aeabi_dmul+0x19c>
  401f78:	ea81 0103 	eor.w	r1, r1, r3
  401f7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401f80:	f04f 0000 	mov.w	r0, #0
  401f84:	bd70      	pop	{r4, r5, r6, pc}
  401f86:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401f8a:	bf06      	itte	eq
  401f8c:	4610      	moveq	r0, r2
  401f8e:	4619      	moveq	r1, r3
  401f90:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401f94:	d019      	beq.n	401fca <__aeabi_dmul+0x24a>
  401f96:	ea94 0f0c 	teq	r4, ip
  401f9a:	d102      	bne.n	401fa2 <__aeabi_dmul+0x222>
  401f9c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401fa0:	d113      	bne.n	401fca <__aeabi_dmul+0x24a>
  401fa2:	ea95 0f0c 	teq	r5, ip
  401fa6:	d105      	bne.n	401fb4 <__aeabi_dmul+0x234>
  401fa8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401fac:	bf1c      	itt	ne
  401fae:	4610      	movne	r0, r2
  401fb0:	4619      	movne	r1, r3
  401fb2:	d10a      	bne.n	401fca <__aeabi_dmul+0x24a>
  401fb4:	ea81 0103 	eor.w	r1, r1, r3
  401fb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401fbc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401fc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401fc4:	f04f 0000 	mov.w	r0, #0
  401fc8:	bd70      	pop	{r4, r5, r6, pc}
  401fca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401fce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401fd2:	bd70      	pop	{r4, r5, r6, pc}

00401fd4 <__aeabi_ddiv>:
  401fd4:	b570      	push	{r4, r5, r6, lr}
  401fd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401fda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401fde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401fe2:	bf1d      	ittte	ne
  401fe4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401fe8:	ea94 0f0c 	teqne	r4, ip
  401fec:	ea95 0f0c 	teqne	r5, ip
  401ff0:	f000 f8a7 	bleq	402142 <__aeabi_ddiv+0x16e>
  401ff4:	eba4 0405 	sub.w	r4, r4, r5
  401ff8:	ea81 0e03 	eor.w	lr, r1, r3
  401ffc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402000:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402004:	f000 8088 	beq.w	402118 <__aeabi_ddiv+0x144>
  402008:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40200c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402010:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402014:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402018:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40201c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402020:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402024:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402028:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40202c:	429d      	cmp	r5, r3
  40202e:	bf08      	it	eq
  402030:	4296      	cmpeq	r6, r2
  402032:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402036:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40203a:	d202      	bcs.n	402042 <__aeabi_ddiv+0x6e>
  40203c:	085b      	lsrs	r3, r3, #1
  40203e:	ea4f 0232 	mov.w	r2, r2, rrx
  402042:	1ab6      	subs	r6, r6, r2
  402044:	eb65 0503 	sbc.w	r5, r5, r3
  402048:	085b      	lsrs	r3, r3, #1
  40204a:	ea4f 0232 	mov.w	r2, r2, rrx
  40204e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402052:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402056:	ebb6 0e02 	subs.w	lr, r6, r2
  40205a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40205e:	bf22      	ittt	cs
  402060:	1ab6      	subcs	r6, r6, r2
  402062:	4675      	movcs	r5, lr
  402064:	ea40 000c 	orrcs.w	r0, r0, ip
  402068:	085b      	lsrs	r3, r3, #1
  40206a:	ea4f 0232 	mov.w	r2, r2, rrx
  40206e:	ebb6 0e02 	subs.w	lr, r6, r2
  402072:	eb75 0e03 	sbcs.w	lr, r5, r3
  402076:	bf22      	ittt	cs
  402078:	1ab6      	subcs	r6, r6, r2
  40207a:	4675      	movcs	r5, lr
  40207c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402080:	085b      	lsrs	r3, r3, #1
  402082:	ea4f 0232 	mov.w	r2, r2, rrx
  402086:	ebb6 0e02 	subs.w	lr, r6, r2
  40208a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40208e:	bf22      	ittt	cs
  402090:	1ab6      	subcs	r6, r6, r2
  402092:	4675      	movcs	r5, lr
  402094:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402098:	085b      	lsrs	r3, r3, #1
  40209a:	ea4f 0232 	mov.w	r2, r2, rrx
  40209e:	ebb6 0e02 	subs.w	lr, r6, r2
  4020a2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4020a6:	bf22      	ittt	cs
  4020a8:	1ab6      	subcs	r6, r6, r2
  4020aa:	4675      	movcs	r5, lr
  4020ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4020b0:	ea55 0e06 	orrs.w	lr, r5, r6
  4020b4:	d018      	beq.n	4020e8 <__aeabi_ddiv+0x114>
  4020b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4020ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4020be:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4020c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4020c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4020ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4020ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4020d2:	d1c0      	bne.n	402056 <__aeabi_ddiv+0x82>
  4020d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4020d8:	d10b      	bne.n	4020f2 <__aeabi_ddiv+0x11e>
  4020da:	ea41 0100 	orr.w	r1, r1, r0
  4020de:	f04f 0000 	mov.w	r0, #0
  4020e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4020e6:	e7b6      	b.n	402056 <__aeabi_ddiv+0x82>
  4020e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4020ec:	bf04      	itt	eq
  4020ee:	4301      	orreq	r1, r0
  4020f0:	2000      	moveq	r0, #0
  4020f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4020f6:	bf88      	it	hi
  4020f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4020fc:	f63f aeaf 	bhi.w	401e5e <__aeabi_dmul+0xde>
  402100:	ebb5 0c03 	subs.w	ip, r5, r3
  402104:	bf04      	itt	eq
  402106:	ebb6 0c02 	subseq.w	ip, r6, r2
  40210a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40210e:	f150 0000 	adcs.w	r0, r0, #0
  402112:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402116:	bd70      	pop	{r4, r5, r6, pc}
  402118:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40211c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402120:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402124:	bfc2      	ittt	gt
  402126:	ebd4 050c 	rsbsgt	r5, r4, ip
  40212a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40212e:	bd70      	popgt	{r4, r5, r6, pc}
  402130:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402134:	f04f 0e00 	mov.w	lr, #0
  402138:	3c01      	subs	r4, #1
  40213a:	e690      	b.n	401e5e <__aeabi_dmul+0xde>
  40213c:	ea45 0e06 	orr.w	lr, r5, r6
  402140:	e68d      	b.n	401e5e <__aeabi_dmul+0xde>
  402142:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402146:	ea94 0f0c 	teq	r4, ip
  40214a:	bf08      	it	eq
  40214c:	ea95 0f0c 	teqeq	r5, ip
  402150:	f43f af3b 	beq.w	401fca <__aeabi_dmul+0x24a>
  402154:	ea94 0f0c 	teq	r4, ip
  402158:	d10a      	bne.n	402170 <__aeabi_ddiv+0x19c>
  40215a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40215e:	f47f af34 	bne.w	401fca <__aeabi_dmul+0x24a>
  402162:	ea95 0f0c 	teq	r5, ip
  402166:	f47f af25 	bne.w	401fb4 <__aeabi_dmul+0x234>
  40216a:	4610      	mov	r0, r2
  40216c:	4619      	mov	r1, r3
  40216e:	e72c      	b.n	401fca <__aeabi_dmul+0x24a>
  402170:	ea95 0f0c 	teq	r5, ip
  402174:	d106      	bne.n	402184 <__aeabi_ddiv+0x1b0>
  402176:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40217a:	f43f aefd 	beq.w	401f78 <__aeabi_dmul+0x1f8>
  40217e:	4610      	mov	r0, r2
  402180:	4619      	mov	r1, r3
  402182:	e722      	b.n	401fca <__aeabi_dmul+0x24a>
  402184:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402188:	bf18      	it	ne
  40218a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40218e:	f47f aec5 	bne.w	401f1c <__aeabi_dmul+0x19c>
  402192:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402196:	f47f af0d 	bne.w	401fb4 <__aeabi_dmul+0x234>
  40219a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40219e:	f47f aeeb 	bne.w	401f78 <__aeabi_dmul+0x1f8>
  4021a2:	e712      	b.n	401fca <__aeabi_dmul+0x24a>

004021a4 <__gedf2>:
  4021a4:	f04f 3cff 	mov.w	ip, #4294967295
  4021a8:	e006      	b.n	4021b8 <__cmpdf2+0x4>
  4021aa:	bf00      	nop

004021ac <__ledf2>:
  4021ac:	f04f 0c01 	mov.w	ip, #1
  4021b0:	e002      	b.n	4021b8 <__cmpdf2+0x4>
  4021b2:	bf00      	nop

004021b4 <__cmpdf2>:
  4021b4:	f04f 0c01 	mov.w	ip, #1
  4021b8:	f84d cd04 	str.w	ip, [sp, #-4]!
  4021bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4021c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4021c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4021c8:	bf18      	it	ne
  4021ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4021ce:	d01b      	beq.n	402208 <__cmpdf2+0x54>
  4021d0:	b001      	add	sp, #4
  4021d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4021d6:	bf0c      	ite	eq
  4021d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4021dc:	ea91 0f03 	teqne	r1, r3
  4021e0:	bf02      	ittt	eq
  4021e2:	ea90 0f02 	teqeq	r0, r2
  4021e6:	2000      	moveq	r0, #0
  4021e8:	4770      	bxeq	lr
  4021ea:	f110 0f00 	cmn.w	r0, #0
  4021ee:	ea91 0f03 	teq	r1, r3
  4021f2:	bf58      	it	pl
  4021f4:	4299      	cmppl	r1, r3
  4021f6:	bf08      	it	eq
  4021f8:	4290      	cmpeq	r0, r2
  4021fa:	bf2c      	ite	cs
  4021fc:	17d8      	asrcs	r0, r3, #31
  4021fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  402202:	f040 0001 	orr.w	r0, r0, #1
  402206:	4770      	bx	lr
  402208:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40220c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402210:	d102      	bne.n	402218 <__cmpdf2+0x64>
  402212:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  402216:	d107      	bne.n	402228 <__cmpdf2+0x74>
  402218:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40221c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402220:	d1d6      	bne.n	4021d0 <__cmpdf2+0x1c>
  402222:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  402226:	d0d3      	beq.n	4021d0 <__cmpdf2+0x1c>
  402228:	f85d 0b04 	ldr.w	r0, [sp], #4
  40222c:	4770      	bx	lr
  40222e:	bf00      	nop

00402230 <__aeabi_cdrcmple>:
  402230:	4684      	mov	ip, r0
  402232:	4610      	mov	r0, r2
  402234:	4662      	mov	r2, ip
  402236:	468c      	mov	ip, r1
  402238:	4619      	mov	r1, r3
  40223a:	4663      	mov	r3, ip
  40223c:	e000      	b.n	402240 <__aeabi_cdcmpeq>
  40223e:	bf00      	nop

00402240 <__aeabi_cdcmpeq>:
  402240:	b501      	push	{r0, lr}
  402242:	f7ff ffb7 	bl	4021b4 <__cmpdf2>
  402246:	2800      	cmp	r0, #0
  402248:	bf48      	it	mi
  40224a:	f110 0f00 	cmnmi.w	r0, #0
  40224e:	bd01      	pop	{r0, pc}

00402250 <__aeabi_dcmpeq>:
  402250:	f84d ed08 	str.w	lr, [sp, #-8]!
  402254:	f7ff fff4 	bl	402240 <__aeabi_cdcmpeq>
  402258:	bf0c      	ite	eq
  40225a:	2001      	moveq	r0, #1
  40225c:	2000      	movne	r0, #0
  40225e:	f85d fb08 	ldr.w	pc, [sp], #8
  402262:	bf00      	nop

00402264 <__aeabi_dcmplt>:
  402264:	f84d ed08 	str.w	lr, [sp, #-8]!
  402268:	f7ff ffea 	bl	402240 <__aeabi_cdcmpeq>
  40226c:	bf34      	ite	cc
  40226e:	2001      	movcc	r0, #1
  402270:	2000      	movcs	r0, #0
  402272:	f85d fb08 	ldr.w	pc, [sp], #8
  402276:	bf00      	nop

00402278 <__aeabi_dcmple>:
  402278:	f84d ed08 	str.w	lr, [sp, #-8]!
  40227c:	f7ff ffe0 	bl	402240 <__aeabi_cdcmpeq>
  402280:	bf94      	ite	ls
  402282:	2001      	movls	r0, #1
  402284:	2000      	movhi	r0, #0
  402286:	f85d fb08 	ldr.w	pc, [sp], #8
  40228a:	bf00      	nop

0040228c <__aeabi_dcmpge>:
  40228c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402290:	f7ff ffce 	bl	402230 <__aeabi_cdrcmple>
  402294:	bf94      	ite	ls
  402296:	2001      	movls	r0, #1
  402298:	2000      	movhi	r0, #0
  40229a:	f85d fb08 	ldr.w	pc, [sp], #8
  40229e:	bf00      	nop

004022a0 <__aeabi_dcmpgt>:
  4022a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4022a4:	f7ff ffc4 	bl	402230 <__aeabi_cdrcmple>
  4022a8:	bf34      	ite	cc
  4022aa:	2001      	movcc	r0, #1
  4022ac:	2000      	movcs	r0, #0
  4022ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4022b2:	bf00      	nop

004022b4 <__aeabi_d2f>:
  4022b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4022b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4022bc:	bf24      	itt	cs
  4022be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4022c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4022c6:	d90d      	bls.n	4022e4 <__aeabi_d2f+0x30>
  4022c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4022cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4022d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4022d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4022d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4022dc:	bf08      	it	eq
  4022de:	f020 0001 	biceq.w	r0, r0, #1
  4022e2:	4770      	bx	lr
  4022e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4022e8:	d121      	bne.n	40232e <__aeabi_d2f+0x7a>
  4022ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4022ee:	bfbc      	itt	lt
  4022f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4022f4:	4770      	bxlt	lr
  4022f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4022fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4022fe:	f1c2 0218 	rsb	r2, r2, #24
  402302:	f1c2 0c20 	rsb	ip, r2, #32
  402306:	fa10 f30c 	lsls.w	r3, r0, ip
  40230a:	fa20 f002 	lsr.w	r0, r0, r2
  40230e:	bf18      	it	ne
  402310:	f040 0001 	orrne.w	r0, r0, #1
  402314:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402318:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40231c:	fa03 fc0c 	lsl.w	ip, r3, ip
  402320:	ea40 000c 	orr.w	r0, r0, ip
  402324:	fa23 f302 	lsr.w	r3, r3, r2
  402328:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40232c:	e7cc      	b.n	4022c8 <__aeabi_d2f+0x14>
  40232e:	ea7f 5362 	mvns.w	r3, r2, asr #21
  402332:	d107      	bne.n	402344 <__aeabi_d2f+0x90>
  402334:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  402338:	bf1e      	ittt	ne
  40233a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40233e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  402342:	4770      	bxne	lr
  402344:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  402348:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40234c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402350:	4770      	bx	lr
  402352:	bf00      	nop

00402354 <__aeabi_uldivmod>:
  402354:	b953      	cbnz	r3, 40236c <__aeabi_uldivmod+0x18>
  402356:	b94a      	cbnz	r2, 40236c <__aeabi_uldivmod+0x18>
  402358:	2900      	cmp	r1, #0
  40235a:	bf08      	it	eq
  40235c:	2800      	cmpeq	r0, #0
  40235e:	bf1c      	itt	ne
  402360:	f04f 31ff 	movne.w	r1, #4294967295
  402364:	f04f 30ff 	movne.w	r0, #4294967295
  402368:	f000 b99e 	b.w	4026a8 <__aeabi_idiv0>
  40236c:	f1ad 0c08 	sub.w	ip, sp, #8
  402370:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402374:	f000 f82a 	bl	4023cc <__udivmoddi4>
  402378:	f8dd e004 	ldr.w	lr, [sp, #4]
  40237c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402380:	b004      	add	sp, #16
  402382:	4770      	bx	lr

00402384 <__aeabi_d2ulz>:
  402384:	b5d0      	push	{r4, r6, r7, lr}
  402386:	2200      	movs	r2, #0
  402388:	4b0e      	ldr	r3, [pc, #56]	; (4023c4 <__aeabi_d2ulz+0x40>)
  40238a:	4606      	mov	r6, r0
  40238c:	460f      	mov	r7, r1
  40238e:	f7ff fcf7 	bl	401d80 <__aeabi_dmul>
  402392:	f000 f98b 	bl	4026ac <__aeabi_d2uiz>
  402396:	4604      	mov	r4, r0
  402398:	f7ff fc7c 	bl	401c94 <__aeabi_ui2d>
  40239c:	2200      	movs	r2, #0
  40239e:	4b0a      	ldr	r3, [pc, #40]	; (4023c8 <__aeabi_d2ulz+0x44>)
  4023a0:	f7ff fcee 	bl	401d80 <__aeabi_dmul>
  4023a4:	4602      	mov	r2, r0
  4023a6:	460b      	mov	r3, r1
  4023a8:	4630      	mov	r0, r6
  4023aa:	4639      	mov	r1, r7
  4023ac:	f7ff fb34 	bl	401a18 <__aeabi_dsub>
  4023b0:	f000 f97c 	bl	4026ac <__aeabi_d2uiz>
  4023b4:	4623      	mov	r3, r4
  4023b6:	2200      	movs	r2, #0
  4023b8:	ea42 0200 	orr.w	r2, r2, r0
  4023bc:	4610      	mov	r0, r2
  4023be:	4619      	mov	r1, r3
  4023c0:	bdd0      	pop	{r4, r6, r7, pc}
  4023c2:	bf00      	nop
  4023c4:	3df00000 	.word	0x3df00000
  4023c8:	41f00000 	.word	0x41f00000

004023cc <__udivmoddi4>:
  4023cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4023d0:	468c      	mov	ip, r1
  4023d2:	460d      	mov	r5, r1
  4023d4:	4604      	mov	r4, r0
  4023d6:	9e08      	ldr	r6, [sp, #32]
  4023d8:	2b00      	cmp	r3, #0
  4023da:	d151      	bne.n	402480 <__udivmoddi4+0xb4>
  4023dc:	428a      	cmp	r2, r1
  4023de:	4617      	mov	r7, r2
  4023e0:	d96d      	bls.n	4024be <__udivmoddi4+0xf2>
  4023e2:	fab2 fe82 	clz	lr, r2
  4023e6:	f1be 0f00 	cmp.w	lr, #0
  4023ea:	d00b      	beq.n	402404 <__udivmoddi4+0x38>
  4023ec:	f1ce 0c20 	rsb	ip, lr, #32
  4023f0:	fa01 f50e 	lsl.w	r5, r1, lr
  4023f4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4023f8:	fa02 f70e 	lsl.w	r7, r2, lr
  4023fc:	ea4c 0c05 	orr.w	ip, ip, r5
  402400:	fa00 f40e 	lsl.w	r4, r0, lr
  402404:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402408:	0c25      	lsrs	r5, r4, #16
  40240a:	fbbc f8fa 	udiv	r8, ip, sl
  40240e:	fa1f f987 	uxth.w	r9, r7
  402412:	fb0a cc18 	mls	ip, sl, r8, ip
  402416:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40241a:	fb08 f309 	mul.w	r3, r8, r9
  40241e:	42ab      	cmp	r3, r5
  402420:	d90a      	bls.n	402438 <__udivmoddi4+0x6c>
  402422:	19ed      	adds	r5, r5, r7
  402424:	f108 32ff 	add.w	r2, r8, #4294967295
  402428:	f080 8123 	bcs.w	402672 <__udivmoddi4+0x2a6>
  40242c:	42ab      	cmp	r3, r5
  40242e:	f240 8120 	bls.w	402672 <__udivmoddi4+0x2a6>
  402432:	f1a8 0802 	sub.w	r8, r8, #2
  402436:	443d      	add	r5, r7
  402438:	1aed      	subs	r5, r5, r3
  40243a:	b2a4      	uxth	r4, r4
  40243c:	fbb5 f0fa 	udiv	r0, r5, sl
  402440:	fb0a 5510 	mls	r5, sl, r0, r5
  402444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402448:	fb00 f909 	mul.w	r9, r0, r9
  40244c:	45a1      	cmp	r9, r4
  40244e:	d909      	bls.n	402464 <__udivmoddi4+0x98>
  402450:	19e4      	adds	r4, r4, r7
  402452:	f100 33ff 	add.w	r3, r0, #4294967295
  402456:	f080 810a 	bcs.w	40266e <__udivmoddi4+0x2a2>
  40245a:	45a1      	cmp	r9, r4
  40245c:	f240 8107 	bls.w	40266e <__udivmoddi4+0x2a2>
  402460:	3802      	subs	r0, #2
  402462:	443c      	add	r4, r7
  402464:	eba4 0409 	sub.w	r4, r4, r9
  402468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40246c:	2100      	movs	r1, #0
  40246e:	2e00      	cmp	r6, #0
  402470:	d061      	beq.n	402536 <__udivmoddi4+0x16a>
  402472:	fa24 f40e 	lsr.w	r4, r4, lr
  402476:	2300      	movs	r3, #0
  402478:	6034      	str	r4, [r6, #0]
  40247a:	6073      	str	r3, [r6, #4]
  40247c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402480:	428b      	cmp	r3, r1
  402482:	d907      	bls.n	402494 <__udivmoddi4+0xc8>
  402484:	2e00      	cmp	r6, #0
  402486:	d054      	beq.n	402532 <__udivmoddi4+0x166>
  402488:	2100      	movs	r1, #0
  40248a:	e886 0021 	stmia.w	r6, {r0, r5}
  40248e:	4608      	mov	r0, r1
  402490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402494:	fab3 f183 	clz	r1, r3
  402498:	2900      	cmp	r1, #0
  40249a:	f040 808e 	bne.w	4025ba <__udivmoddi4+0x1ee>
  40249e:	42ab      	cmp	r3, r5
  4024a0:	d302      	bcc.n	4024a8 <__udivmoddi4+0xdc>
  4024a2:	4282      	cmp	r2, r0
  4024a4:	f200 80fa 	bhi.w	40269c <__udivmoddi4+0x2d0>
  4024a8:	1a84      	subs	r4, r0, r2
  4024aa:	eb65 0503 	sbc.w	r5, r5, r3
  4024ae:	2001      	movs	r0, #1
  4024b0:	46ac      	mov	ip, r5
  4024b2:	2e00      	cmp	r6, #0
  4024b4:	d03f      	beq.n	402536 <__udivmoddi4+0x16a>
  4024b6:	e886 1010 	stmia.w	r6, {r4, ip}
  4024ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024be:	b912      	cbnz	r2, 4024c6 <__udivmoddi4+0xfa>
  4024c0:	2701      	movs	r7, #1
  4024c2:	fbb7 f7f2 	udiv	r7, r7, r2
  4024c6:	fab7 fe87 	clz	lr, r7
  4024ca:	f1be 0f00 	cmp.w	lr, #0
  4024ce:	d134      	bne.n	40253a <__udivmoddi4+0x16e>
  4024d0:	1beb      	subs	r3, r5, r7
  4024d2:	0c3a      	lsrs	r2, r7, #16
  4024d4:	fa1f fc87 	uxth.w	ip, r7
  4024d8:	2101      	movs	r1, #1
  4024da:	fbb3 f8f2 	udiv	r8, r3, r2
  4024de:	0c25      	lsrs	r5, r4, #16
  4024e0:	fb02 3318 	mls	r3, r2, r8, r3
  4024e4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4024e8:	fb0c f308 	mul.w	r3, ip, r8
  4024ec:	42ab      	cmp	r3, r5
  4024ee:	d907      	bls.n	402500 <__udivmoddi4+0x134>
  4024f0:	19ed      	adds	r5, r5, r7
  4024f2:	f108 30ff 	add.w	r0, r8, #4294967295
  4024f6:	d202      	bcs.n	4024fe <__udivmoddi4+0x132>
  4024f8:	42ab      	cmp	r3, r5
  4024fa:	f200 80d1 	bhi.w	4026a0 <__udivmoddi4+0x2d4>
  4024fe:	4680      	mov	r8, r0
  402500:	1aed      	subs	r5, r5, r3
  402502:	b2a3      	uxth	r3, r4
  402504:	fbb5 f0f2 	udiv	r0, r5, r2
  402508:	fb02 5510 	mls	r5, r2, r0, r5
  40250c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402510:	fb0c fc00 	mul.w	ip, ip, r0
  402514:	45a4      	cmp	ip, r4
  402516:	d907      	bls.n	402528 <__udivmoddi4+0x15c>
  402518:	19e4      	adds	r4, r4, r7
  40251a:	f100 33ff 	add.w	r3, r0, #4294967295
  40251e:	d202      	bcs.n	402526 <__udivmoddi4+0x15a>
  402520:	45a4      	cmp	ip, r4
  402522:	f200 80b8 	bhi.w	402696 <__udivmoddi4+0x2ca>
  402526:	4618      	mov	r0, r3
  402528:	eba4 040c 	sub.w	r4, r4, ip
  40252c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402530:	e79d      	b.n	40246e <__udivmoddi4+0xa2>
  402532:	4631      	mov	r1, r6
  402534:	4630      	mov	r0, r6
  402536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40253a:	f1ce 0420 	rsb	r4, lr, #32
  40253e:	fa05 f30e 	lsl.w	r3, r5, lr
  402542:	fa07 f70e 	lsl.w	r7, r7, lr
  402546:	fa20 f804 	lsr.w	r8, r0, r4
  40254a:	0c3a      	lsrs	r2, r7, #16
  40254c:	fa25 f404 	lsr.w	r4, r5, r4
  402550:	ea48 0803 	orr.w	r8, r8, r3
  402554:	fbb4 f1f2 	udiv	r1, r4, r2
  402558:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40255c:	fb02 4411 	mls	r4, r2, r1, r4
  402560:	fa1f fc87 	uxth.w	ip, r7
  402564:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402568:	fb01 f30c 	mul.w	r3, r1, ip
  40256c:	42ab      	cmp	r3, r5
  40256e:	fa00 f40e 	lsl.w	r4, r0, lr
  402572:	d909      	bls.n	402588 <__udivmoddi4+0x1bc>
  402574:	19ed      	adds	r5, r5, r7
  402576:	f101 30ff 	add.w	r0, r1, #4294967295
  40257a:	f080 808a 	bcs.w	402692 <__udivmoddi4+0x2c6>
  40257e:	42ab      	cmp	r3, r5
  402580:	f240 8087 	bls.w	402692 <__udivmoddi4+0x2c6>
  402584:	3902      	subs	r1, #2
  402586:	443d      	add	r5, r7
  402588:	1aeb      	subs	r3, r5, r3
  40258a:	fa1f f588 	uxth.w	r5, r8
  40258e:	fbb3 f0f2 	udiv	r0, r3, r2
  402592:	fb02 3310 	mls	r3, r2, r0, r3
  402596:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40259a:	fb00 f30c 	mul.w	r3, r0, ip
  40259e:	42ab      	cmp	r3, r5
  4025a0:	d907      	bls.n	4025b2 <__udivmoddi4+0x1e6>
  4025a2:	19ed      	adds	r5, r5, r7
  4025a4:	f100 38ff 	add.w	r8, r0, #4294967295
  4025a8:	d26f      	bcs.n	40268a <__udivmoddi4+0x2be>
  4025aa:	42ab      	cmp	r3, r5
  4025ac:	d96d      	bls.n	40268a <__udivmoddi4+0x2be>
  4025ae:	3802      	subs	r0, #2
  4025b0:	443d      	add	r5, r7
  4025b2:	1aeb      	subs	r3, r5, r3
  4025b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4025b8:	e78f      	b.n	4024da <__udivmoddi4+0x10e>
  4025ba:	f1c1 0720 	rsb	r7, r1, #32
  4025be:	fa22 f807 	lsr.w	r8, r2, r7
  4025c2:	408b      	lsls	r3, r1
  4025c4:	fa05 f401 	lsl.w	r4, r5, r1
  4025c8:	ea48 0303 	orr.w	r3, r8, r3
  4025cc:	fa20 fe07 	lsr.w	lr, r0, r7
  4025d0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4025d4:	40fd      	lsrs	r5, r7
  4025d6:	ea4e 0e04 	orr.w	lr, lr, r4
  4025da:	fbb5 f9fc 	udiv	r9, r5, ip
  4025de:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4025e2:	fb0c 5519 	mls	r5, ip, r9, r5
  4025e6:	fa1f f883 	uxth.w	r8, r3
  4025ea:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4025ee:	fb09 f408 	mul.w	r4, r9, r8
  4025f2:	42ac      	cmp	r4, r5
  4025f4:	fa02 f201 	lsl.w	r2, r2, r1
  4025f8:	fa00 fa01 	lsl.w	sl, r0, r1
  4025fc:	d908      	bls.n	402610 <__udivmoddi4+0x244>
  4025fe:	18ed      	adds	r5, r5, r3
  402600:	f109 30ff 	add.w	r0, r9, #4294967295
  402604:	d243      	bcs.n	40268e <__udivmoddi4+0x2c2>
  402606:	42ac      	cmp	r4, r5
  402608:	d941      	bls.n	40268e <__udivmoddi4+0x2c2>
  40260a:	f1a9 0902 	sub.w	r9, r9, #2
  40260e:	441d      	add	r5, r3
  402610:	1b2d      	subs	r5, r5, r4
  402612:	fa1f fe8e 	uxth.w	lr, lr
  402616:	fbb5 f0fc 	udiv	r0, r5, ip
  40261a:	fb0c 5510 	mls	r5, ip, r0, r5
  40261e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402622:	fb00 f808 	mul.w	r8, r0, r8
  402626:	45a0      	cmp	r8, r4
  402628:	d907      	bls.n	40263a <__udivmoddi4+0x26e>
  40262a:	18e4      	adds	r4, r4, r3
  40262c:	f100 35ff 	add.w	r5, r0, #4294967295
  402630:	d229      	bcs.n	402686 <__udivmoddi4+0x2ba>
  402632:	45a0      	cmp	r8, r4
  402634:	d927      	bls.n	402686 <__udivmoddi4+0x2ba>
  402636:	3802      	subs	r0, #2
  402638:	441c      	add	r4, r3
  40263a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40263e:	eba4 0408 	sub.w	r4, r4, r8
  402642:	fba0 8902 	umull	r8, r9, r0, r2
  402646:	454c      	cmp	r4, r9
  402648:	46c6      	mov	lr, r8
  40264a:	464d      	mov	r5, r9
  40264c:	d315      	bcc.n	40267a <__udivmoddi4+0x2ae>
  40264e:	d012      	beq.n	402676 <__udivmoddi4+0x2aa>
  402650:	b156      	cbz	r6, 402668 <__udivmoddi4+0x29c>
  402652:	ebba 030e 	subs.w	r3, sl, lr
  402656:	eb64 0405 	sbc.w	r4, r4, r5
  40265a:	fa04 f707 	lsl.w	r7, r4, r7
  40265e:	40cb      	lsrs	r3, r1
  402660:	431f      	orrs	r7, r3
  402662:	40cc      	lsrs	r4, r1
  402664:	6037      	str	r7, [r6, #0]
  402666:	6074      	str	r4, [r6, #4]
  402668:	2100      	movs	r1, #0
  40266a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40266e:	4618      	mov	r0, r3
  402670:	e6f8      	b.n	402464 <__udivmoddi4+0x98>
  402672:	4690      	mov	r8, r2
  402674:	e6e0      	b.n	402438 <__udivmoddi4+0x6c>
  402676:	45c2      	cmp	sl, r8
  402678:	d2ea      	bcs.n	402650 <__udivmoddi4+0x284>
  40267a:	ebb8 0e02 	subs.w	lr, r8, r2
  40267e:	eb69 0503 	sbc.w	r5, r9, r3
  402682:	3801      	subs	r0, #1
  402684:	e7e4      	b.n	402650 <__udivmoddi4+0x284>
  402686:	4628      	mov	r0, r5
  402688:	e7d7      	b.n	40263a <__udivmoddi4+0x26e>
  40268a:	4640      	mov	r0, r8
  40268c:	e791      	b.n	4025b2 <__udivmoddi4+0x1e6>
  40268e:	4681      	mov	r9, r0
  402690:	e7be      	b.n	402610 <__udivmoddi4+0x244>
  402692:	4601      	mov	r1, r0
  402694:	e778      	b.n	402588 <__udivmoddi4+0x1bc>
  402696:	3802      	subs	r0, #2
  402698:	443c      	add	r4, r7
  40269a:	e745      	b.n	402528 <__udivmoddi4+0x15c>
  40269c:	4608      	mov	r0, r1
  40269e:	e708      	b.n	4024b2 <__udivmoddi4+0xe6>
  4026a0:	f1a8 0802 	sub.w	r8, r8, #2
  4026a4:	443d      	add	r5, r7
  4026a6:	e72b      	b.n	402500 <__udivmoddi4+0x134>

004026a8 <__aeabi_idiv0>:
  4026a8:	4770      	bx	lr
  4026aa:	bf00      	nop

004026ac <__aeabi_d2uiz>:
  4026ac:	004a      	lsls	r2, r1, #1
  4026ae:	d211      	bcs.n	4026d4 <__aeabi_d2uiz+0x28>
  4026b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4026b4:	d211      	bcs.n	4026da <__aeabi_d2uiz+0x2e>
  4026b6:	d50d      	bpl.n	4026d4 <__aeabi_d2uiz+0x28>
  4026b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4026bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4026c0:	d40e      	bmi.n	4026e0 <__aeabi_d2uiz+0x34>
  4026c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4026c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4026ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4026ce:	fa23 f002 	lsr.w	r0, r3, r2
  4026d2:	4770      	bx	lr
  4026d4:	f04f 0000 	mov.w	r0, #0
  4026d8:	4770      	bx	lr
  4026da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4026de:	d102      	bne.n	4026e6 <__aeabi_d2uiz+0x3a>
  4026e0:	f04f 30ff 	mov.w	r0, #4294967295
  4026e4:	4770      	bx	lr
  4026e6:	f04f 0000 	mov.w	r0, #0
  4026ea:	4770      	bx	lr

004026ec <__libc_init_array>:
  4026ec:	b570      	push	{r4, r5, r6, lr}
  4026ee:	4e0f      	ldr	r6, [pc, #60]	; (40272c <__libc_init_array+0x40>)
  4026f0:	4d0f      	ldr	r5, [pc, #60]	; (402730 <__libc_init_array+0x44>)
  4026f2:	1b76      	subs	r6, r6, r5
  4026f4:	10b6      	asrs	r6, r6, #2
  4026f6:	bf18      	it	ne
  4026f8:	2400      	movne	r4, #0
  4026fa:	d005      	beq.n	402708 <__libc_init_array+0x1c>
  4026fc:	3401      	adds	r4, #1
  4026fe:	f855 3b04 	ldr.w	r3, [r5], #4
  402702:	4798      	blx	r3
  402704:	42a6      	cmp	r6, r4
  402706:	d1f9      	bne.n	4026fc <__libc_init_array+0x10>
  402708:	4e0a      	ldr	r6, [pc, #40]	; (402734 <__libc_init_array+0x48>)
  40270a:	4d0b      	ldr	r5, [pc, #44]	; (402738 <__libc_init_array+0x4c>)
  40270c:	1b76      	subs	r6, r6, r5
  40270e:	f000 f8a7 	bl	402860 <_init>
  402712:	10b6      	asrs	r6, r6, #2
  402714:	bf18      	it	ne
  402716:	2400      	movne	r4, #0
  402718:	d006      	beq.n	402728 <__libc_init_array+0x3c>
  40271a:	3401      	adds	r4, #1
  40271c:	f855 3b04 	ldr.w	r3, [r5], #4
  402720:	4798      	blx	r3
  402722:	42a6      	cmp	r6, r4
  402724:	d1f9      	bne.n	40271a <__libc_init_array+0x2e>
  402726:	bd70      	pop	{r4, r5, r6, pc}
  402728:	bd70      	pop	{r4, r5, r6, pc}
  40272a:	bf00      	nop
  40272c:	0040286c 	.word	0x0040286c
  402730:	0040286c 	.word	0x0040286c
  402734:	00402874 	.word	0x00402874
  402738:	0040286c 	.word	0x0040286c

0040273c <register_fini>:
  40273c:	4b02      	ldr	r3, [pc, #8]	; (402748 <register_fini+0xc>)
  40273e:	b113      	cbz	r3, 402746 <register_fini+0xa>
  402740:	4802      	ldr	r0, [pc, #8]	; (40274c <register_fini+0x10>)
  402742:	f000 b805 	b.w	402750 <atexit>
  402746:	4770      	bx	lr
  402748:	00000000 	.word	0x00000000
  40274c:	0040275d 	.word	0x0040275d

00402750 <atexit>:
  402750:	2300      	movs	r3, #0
  402752:	4601      	mov	r1, r0
  402754:	461a      	mov	r2, r3
  402756:	4618      	mov	r0, r3
  402758:	f000 b81e 	b.w	402798 <__register_exitproc>

0040275c <__libc_fini_array>:
  40275c:	b538      	push	{r3, r4, r5, lr}
  40275e:	4c0a      	ldr	r4, [pc, #40]	; (402788 <__libc_fini_array+0x2c>)
  402760:	4d0a      	ldr	r5, [pc, #40]	; (40278c <__libc_fini_array+0x30>)
  402762:	1b64      	subs	r4, r4, r5
  402764:	10a4      	asrs	r4, r4, #2
  402766:	d00a      	beq.n	40277e <__libc_fini_array+0x22>
  402768:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40276c:	3b01      	subs	r3, #1
  40276e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402772:	3c01      	subs	r4, #1
  402774:	f855 3904 	ldr.w	r3, [r5], #-4
  402778:	4798      	blx	r3
  40277a:	2c00      	cmp	r4, #0
  40277c:	d1f9      	bne.n	402772 <__libc_fini_array+0x16>
  40277e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402782:	f000 b877 	b.w	402874 <_fini>
  402786:	bf00      	nop
  402788:	00402884 	.word	0x00402884
  40278c:	00402880 	.word	0x00402880

00402790 <__retarget_lock_acquire_recursive>:
  402790:	4770      	bx	lr
  402792:	bf00      	nop

00402794 <__retarget_lock_release_recursive>:
  402794:	4770      	bx	lr
  402796:	bf00      	nop

00402798 <__register_exitproc>:
  402798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40279c:	4d2c      	ldr	r5, [pc, #176]	; (402850 <__register_exitproc+0xb8>)
  40279e:	4606      	mov	r6, r0
  4027a0:	6828      	ldr	r0, [r5, #0]
  4027a2:	4698      	mov	r8, r3
  4027a4:	460f      	mov	r7, r1
  4027a6:	4691      	mov	r9, r2
  4027a8:	f7ff fff2 	bl	402790 <__retarget_lock_acquire_recursive>
  4027ac:	4b29      	ldr	r3, [pc, #164]	; (402854 <__register_exitproc+0xbc>)
  4027ae:	681c      	ldr	r4, [r3, #0]
  4027b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4027b4:	2b00      	cmp	r3, #0
  4027b6:	d03e      	beq.n	402836 <__register_exitproc+0x9e>
  4027b8:	685a      	ldr	r2, [r3, #4]
  4027ba:	2a1f      	cmp	r2, #31
  4027bc:	dc1c      	bgt.n	4027f8 <__register_exitproc+0x60>
  4027be:	f102 0e01 	add.w	lr, r2, #1
  4027c2:	b176      	cbz	r6, 4027e2 <__register_exitproc+0x4a>
  4027c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4027c8:	2401      	movs	r4, #1
  4027ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4027ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4027d2:	4094      	lsls	r4, r2
  4027d4:	4320      	orrs	r0, r4
  4027d6:	2e02      	cmp	r6, #2
  4027d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4027dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4027e0:	d023      	beq.n	40282a <__register_exitproc+0x92>
  4027e2:	3202      	adds	r2, #2
  4027e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4027e8:	6828      	ldr	r0, [r5, #0]
  4027ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4027ee:	f7ff ffd1 	bl	402794 <__retarget_lock_release_recursive>
  4027f2:	2000      	movs	r0, #0
  4027f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4027f8:	4b17      	ldr	r3, [pc, #92]	; (402858 <__register_exitproc+0xc0>)
  4027fa:	b30b      	cbz	r3, 402840 <__register_exitproc+0xa8>
  4027fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402800:	f3af 8000 	nop.w
  402804:	4603      	mov	r3, r0
  402806:	b1d8      	cbz	r0, 402840 <__register_exitproc+0xa8>
  402808:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40280c:	6002      	str	r2, [r0, #0]
  40280e:	2100      	movs	r1, #0
  402810:	6041      	str	r1, [r0, #4]
  402812:	460a      	mov	r2, r1
  402814:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402818:	f04f 0e01 	mov.w	lr, #1
  40281c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402820:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402824:	2e00      	cmp	r6, #0
  402826:	d0dc      	beq.n	4027e2 <__register_exitproc+0x4a>
  402828:	e7cc      	b.n	4027c4 <__register_exitproc+0x2c>
  40282a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40282e:	430c      	orrs	r4, r1
  402830:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402834:	e7d5      	b.n	4027e2 <__register_exitproc+0x4a>
  402836:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40283a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40283e:	e7bb      	b.n	4027b8 <__register_exitproc+0x20>
  402840:	6828      	ldr	r0, [r5, #0]
  402842:	f7ff ffa7 	bl	402794 <__retarget_lock_release_recursive>
  402846:	f04f 30ff 	mov.w	r0, #4294967295
  40284a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40284e:	bf00      	nop
  402850:	20400908 	.word	0x20400908
  402854:	0040285c 	.word	0x0040285c
  402858:	00000000 	.word	0x00000000

0040285c <_global_impure_ptr>:
  40285c:	204004e0                                ..@ 

00402860 <_init>:
  402860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402862:	bf00      	nop
  402864:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402866:	bc08      	pop	{r3}
  402868:	469e      	mov	lr, r3
  40286a:	4770      	bx	lr

0040286c <__init_array_start>:
  40286c:	0040273d 	.word	0x0040273d

00402870 <__frame_dummy_init_array_entry>:
  402870:	00400165                                e.@.

00402874 <_fini>:
  402874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402876:	bf00      	nop
  402878:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40287a:	bc08      	pop	{r3}
  40287c:	469e      	mov	lr, r3
  40287e:	4770      	bx	lr

00402880 <__fini_array_start>:
  402880:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <mario_theme_notes>:
20400010:	0a4d 0000 0a4d 0000 0000 0000 0a4d 0000     M...M.......M...
20400020:	0000 0000 082d 0000 0a4d 0000 0000 0000     ....-...M.......
20400030:	0c40 0000 0000 0000 0000 0000 0000 0000     @...............
20400040:	0620 0000 0000 0000 0000 0000 0000 0000      ...............
20400050:	082d 0000 0000 0000 0000 0000 0620 0000     -........... ...
	...
20400068:	0527 0000 0000 0000 0000 0000 06e0 0000     '...............
20400078:	0000 0000 07b8 0000 0000 0000 0749 0000     ............I...
20400088:	06e0 0000 0000 0000 0620 0000 0a4d 0000     ........ ...M...
20400098:	0c40 0000 0dc0 0000 0000 0000 0aea 0000     @...............
204000a8:	0c40 0000 0000 0000 0a4d 0000 0000 0000     @.......M.......
204000b8:	082d 0000 092d 0000 07b8 0000 0000 0000     -...-...........
204000c8:	0000 0000 082d 0000 0000 0000 0000 0000     ....-...........
204000d8:	0620 0000 0000 0000 0000 0000 0527 0000      ...........'...
	...
204000f0:	06e0 0000 0000 0000 07b8 0000 0000 0000     ................
20400100:	0749 0000 06e0 0000 0000 0000 0620 0000     I........... ...
20400110:	0a4d 0000 0c40 0000 0dc0 0000 0000 0000     M...@...........
20400120:	0aea 0000 0c40 0000 0000 0000 0a4d 0000     ....@.......M...
20400130:	0000 0000 082d 0000 092d 0000 07b8 0000     ....-...-.......
	...

20400148 <mario_theme_tempo>:
20400148:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400158:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400168:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400178:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400188:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400198:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204001a8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204001b8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204001c8:	0070 0000 0070 0000 0070 0000 0053 0000     p...p...p...S...
204001d8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204001e8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204001f8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400208:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400218:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400228:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400238:	0053 0000 0053 0000 0053 0000 0070 0000     S...S...S...p...
20400248:	0070 0000 0070 0000 0053 0000 0053 0000     p...p...S...S...
20400258:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400268:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400278:	0053 0000 0053 0000                         S...S...

20400280 <underworld_notes>:
20400280:	0106 0000 020b 0000 00dc 0000 01b8 0000     ................
20400290:	00e9 0000 01d2 0000 0000 0000 0000 0000     ................
204002a0:	0106 0000 020b 0000 00dc 0000 01b8 0000     ................
204002b0:	00e9 0000 01d2 0000 0000 0000 0000 0000     ................
204002c0:	00af 0000 015d 0000 0093 0000 0126 0000     ....].......&...
204002d0:	009c 0000 0137 0000 0000 0000 0000 0000     ....7...........
204002e0:	00af 0000 015d 0000 0093 0000 0126 0000     ....].......&...
204002f0:	009c 0000 0137 0000 0000 0000 0000 0000     ....7...........
20400300:	0137 0000 0115 0000 0126 0000 0115 0000     7.......&.......
20400310:	0137 0000 0137 0000 00d0 0000 00c4 0000     7...7...........
20400320:	0115 0000 0106 0000 0172 0000 015d 0000     ........r...]...
20400330:	00a5 0000 01d2 0000 01b8 0000 019f 0000     ................
20400340:	0137 0000 00f7 0000 00e9 0000 00dc 0000     7...............
20400350:	00d0 0000 0000 0000 0000 0000 0000 0000     ................

20400360 <underworld_tempo>:
20400360:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400370:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
20400380:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400390:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
204003a0:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204003b0:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
204003c0:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204003d0:	0053 0000 0053 0000 00a6 0000 00a6 0000     S...S...........
204003e0:	0037 0000 0037 0000 0037 0000 00a6 0000     7...7...7.......
204003f0:	00a6 0000 00a6 0000 00a6 0000 00a6 0000     ................
20400400:	00a6 0000 0037 0000 0037 0000 0037 0000     ....7...7...7...
20400410:	0037 0000 0037 0000 0037 0000 0064 0000     7...7...7...d...
20400420:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
20400430:	0064 0000 014d 0000 014d 0000 014d 0000     d...M...M...M...

20400440 <imperial_march_notes>:
20400440:	01b8 0000 01b8 0000 01b8 0000 015d 0000     ............]...
20400450:	020b 0000 01b8 0000 015d 0000 020b 0000     ........].......
20400460:	01b8 0000 0000 0000 0293 0000 0293 0000     ................
20400470:	0293 0000 02ba 0000 020b 0000 019f 0000     ................
20400480:	015d 0000 020b 0000 01b8 0000 0000 0000     ]...............

20400490 <imperial_march_tempo>:
20400490:	01f4 0000 01f4 0000 01f4 0000 015e 0000     ............^...
204004a0:	0096 0000 01f4 0000 015e 0000 0096 0000     ........^.......
204004b0:	028a 0000 01f4 0000 01f4 0000 01f4 0000     ................
204004c0:	01f4 0000 015e 0000 0096 0000 01f4 0000     ....^...........
204004d0:	015e 0000 0096 0000 028a 0000 01f4 0000     ^...............

204004e0 <impure_data>:
204004e0:	0000 0000 07cc 2040 0834 2040 089c 2040     ......@ 4.@ ..@ 
	...
20400588:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400598:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400908 <__atexit_recursive_mutex>:
20400908:	09a0 2040                                   ..@ 
